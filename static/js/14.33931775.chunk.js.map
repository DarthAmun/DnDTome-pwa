{"version":3,"sources":["components/form_elements/CheckField.tsx","components/entities/spells/details/SpellView.tsx","components/entities/spells/details/SpellEditView.tsx","components/entities/spells/details/SpellDetail.tsx","components/form_elements/IconButton.tsx","components/form_elements/TextButton.tsx","components/form_elements/StringField.tsx","components/general_elements/LinkCheck.tsx","components/general_elements/FormatedText.tsx","hooks/DexieHooks.tsx","components/form_elements/BackButton.tsx","components/general_elements/ToggleStyle.tsx","components/p2p/P2PSender.tsx","services/PeerIdService.tsx","components/general_elements/Dialog.tsx","components/form_elements/NumberField.tsx","components/form_elements/TextField.tsx","../node_modules/peerjs/dist sync"],"names":["CheckField","value","label","icon","transform","onChange","Field","LabelText","Icon","Input","type","defaultChecked","e","target","checked","Checkmark","styled","theme","tile","color","backgroundColor","FontAwesomeIcon","main","highlight","div","input","buttons","SpellView","spell","useState","send","setSend","formatLevel","useCallback","undefined","level","hasRitual","ritual","className","hasConcentration","duration","toLowerCase","includes","getPicture","pic","CenterWrapper","View","School","school","Flag","Level","ImageName","name","Name","PropWrapper","Prop","faHistory","time","faHourglassHalf","faPowerOff","rotate","range","faMortarPestle","components","faUser","classes","faLink","sources","Text","FormatedText","text","TextButton","faPaperPlane","onClick","P2PSender","data","mode","props","Image","style","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","ImageElm","Empty","SpellEditView","onEdit","StringField","FieldGroup","NumberField","faImage","TextField","faBookOpen","SpellDetail","isNew","editMode","setMode","spellObj","editSpell","showAlert","setAlert","showDeleteDialog","setDeleteDialog","message","setMessage","unsavedChanges","setUnsavedChanges","history","useHistory","useEffect","Dialog","faExclamationTriangle","confirmeText","confirmeClick","remove","id","goBack","abortText","abortClick","TopBar","BackButton","faArrowLeft","action","toString","title","IconButton","tableName","updateWithCallback","result","setTimeout","updateSpell","faSave","faTrash","Message","floatLeft","disabled","SimpleButton","left","DisabledSimpleButton","height","button","hoverColor","placeholder","LinkCheck","loading","setLoading","entitiyFound","setEntity","newType","recivePromiseByAttributeCount","then","count","faMeteor","faIdCard","faDragon","faMapMarkedAlt","faTable","formatIcon","formatedText","setFormatedText","cut","str","cutStart","cutEnd","substr","formatLink","parts","split","formattedParts","forEach","part","index","codePart","linkParts","link","push","TextPart","key","Link","formatTable","textPart","table","tableRows","isHead","map","row","cells","cell","TableHeadProp","TableProp","formatText","indexOf","span","backgroundColorLink","th","td","useItem","effect","setEffect","reducer","state","error","useReducer","dispatch","get","catch","useItemByAttr","attr","attrValue","where","equalsIgnoreCase","first","Back","ToggleLeft","ToggleRight","EditToggle","setName","peer","setPeer","setError","brokerId","min","max","password","characters","i","length","Math","floor","random","generateBrokerId","newPeer","Peer","host","secure","console","log","on","conn","errorData","disconnected","destroyed","reconnect","reciveAllPromise","results","faExclamationCircle","DialogWrapper","ButtonBar","step","textarea","webpackEmptyContext","req","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/14.33931775.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: boolean;\n  label: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: boolean) => void;\n}\n\nconst CheckField = ({ value, label, icon, transform, onChange }: $Props) => {\n  return (\n    <Field>\n      <LabelText>\n        {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n      </LabelText>\n      <Input\n        type=\"checkbox\"\n        defaultChecked={value}\n        onChange={(e) => onChange(e.target.checked)}\n      ></Input>\n      <Checkmark></Checkmark>\n    </Field>\n  );\n};\n\nexport default CheckField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: 38px;\n  line-height: 38px;\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n  user-select: none;\n  position: relative;\n\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1;\n`;\n\nconst Checkmark = styled.div`\n  flex: 1 1;\n  height: 30px;\n  min-width: 30px;\n  max-width: 30px;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin-left: 5px;\n  border-radius: 5px;\n\n  &:after {\n    content: \"\";\n    display: none;\n  }\n\n  &:after {\n    width: 5px;\n    height: 10px;\n    border: solid white;\n    border-width: 0 3px 3px 0;\n    -webkit-transform: rotate(45deg);\n    -ms-transform: rotate(45deg);\n    transform: rotate(45deg);\n    margin-left: 6px;\n    margin-top: 2px;\n  }\n`;\n\nconst Input = styled.input`\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n  left: 0;\n  bottom 0;\n\n  &:checked ~ ${Checkmark} {\n    background-color: ${({ theme }) => theme.main.highlight};\n    color: ${({ theme }) => theme.buttons.color};\n  }\n\n  &:checked ~ ${Checkmark}:after {\n    display: block;\n  }\n`;\n","import React, { useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faHourglassHalf,\n  faMortarPestle,\n  faHistory,\n  faPowerOff,\n  faUser,\n  faLink,\n  faPaperPlane,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport Spell from \"../../../../data/Spell\";\nimport FormatedText from \"../../../general_elements/FormatedText\";\nimport P2PSender from \"../../../p2p/P2PSender\";\nimport TextButton from \"../../../form_elements/TextButton\";\n\ninterface $Props {\n  spell: Spell;\n}\n\nconst SpellView = ({ spell }: $Props) => {\n  const [send, setSend] = useState<boolean>(false);\n\n  const formatLevel = useCallback(() => {\n    if (spell !== undefined) {\n      if (spell.level === 0) {\n        return \"C\";\n      }\n      return spell.level;\n    }\n    return \"\";\n  }, [spell]);\n\n  const hasRitual = useCallback(() => {\n    if (spell !== undefined) {\n      if (spell.ritual === 1) {\n        return <div className=\"icon\">R</div>;\n      }\n    }\n    return \"\";\n  }, [spell]);\n\n  const hasConcentration = useCallback(() => {\n    if (spell !== undefined) {\n      let search = spell.duration.toLowerCase();\n      if (search.includes(\"concentration\")) {\n        return <div className=\"icon\">C</div>;\n      }\n    }\n    return \"\";\n  }, [spell]);\n\n  const getPicture = useCallback(() => {\n    if (spell !== undefined) {\n      if (spell.pic === \"\" || spell.pic === null) {\n        return \"\";\n      }\n      return spell.pic;\n    }\n    return \"\";\n  }, [spell]);\n\n  return (\n    <CenterWrapper>\n      <View>\n        <School school={spell.school}>{spell.school}</School>\n\n        <Flag>\n          <b>{hasConcentration()}</b>\n        </Flag>\n        <Flag>\n          <b>{hasRitual()}</b>\n        </Flag>\n\n        <Level>\n          <b>{formatLevel()}</b>\n        </Level>\n\n        {getPicture() !== \"\" ? (\n          <ImageName>\n            <Image pic={getPicture()}></Image>\n            <b>{spell.name}</b>\n          </ImageName>\n        ) : (\n          <Name>\n            <b>{spell.name}</b>\n          </Name>\n        )}\n\n        <PropWrapper>\n          <Prop>\n            <Icon icon={faHistory} />\n            {spell.time}\n          </Prop>\n          <Prop>\n            <Icon icon={faHourglassHalf} />\n            {spell.duration}\n          </Prop>\n          <Prop>\n            <Icon icon={faPowerOff} transform={{ rotate: 42 }} />\n            {spell.range}\n          </Prop>\n          <Prop>\n            <Icon icon={faMortarPestle} />\n            {spell.components}\n          </Prop>\n          <Prop>\n            <Icon icon={faUser} />\n            {spell.classes}\n          </Prop>\n          <Prop>\n            <Icon icon={faLink} />\n            {spell.sources}\n          </Prop>\n        </PropWrapper>\n        <Text>\n          <FormatedText text={spell.text} />\n        </Text>\n        <PropWrapper>\n            {!send && (\n              <TextButton\n                text={`Send ${spell.name}`}\n                icon={faPaperPlane}\n                onClick={() => setSend(true)}\n              />\n            )}\n            {!!send && <P2PSender data={spell} mode={\"THIS\"} />}\n        </PropWrapper>\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default SpellView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\ntype SchoolType = {\n  school?: string;\n};\n\nconst School = styled.div<SchoolType>`\n  height: auto;\n  float: left;\n  padding: 5px 10px 7px 10px;\n  line-height: 30px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  color: ${(props) => {\n    if (props.school === \"Necromancy\") {\n      return \"#bef28e\";\n    } else if (props.school === \"Conjuration\") {\n      return \"#fce97a\";\n    } else if (props.school === \"Evocation\") {\n      return \"#db5740\";\n    } else if (props.school === \"Divination\") {\n      return \"#9ebed2\";\n    } else if (props.school === \"Enchantment\") {\n      return \"#ce90ca\";\n    } else if (props.school === \"Transmutation\") {\n      return \"#e19c60\";\n    } else if (props.school === \"Abjuration\") {\n      return \"#278ae4\";\n    } else if (props.school === \"Illusion\") {\n      return \"#8b42f9\";\n    } else {\n      return \"white\";\n    }\n  }};\n`;\n\nconst Level = styled.div`\n  height: auto;\n  padding: 10px;\n  width: 20px;\n  height: 20px;\n  line-height: 20px;\n  float: left;\n  text-align: center;\n  border-top-right-radius: 3px;\n  border-radius: 30px;\n  margin: 0px 5px 5px 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: var(--card-title-color);\n  text-align: center;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst ImageName = styled.div`\n  height: 30px;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: var(--card-title-color);\n  text-align: center;\n  border-radius: 50px 5px 5px 50px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst Prop = styled.div`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px;\n  float: left;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: calc(100% - 30px);\n  margin: 10px 5px 5px 5px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst Flag = styled.div`\n  height: auto;\n  float: left;\n  padding: 5px 10px 7px 10px;\n  margin-left: 5px;\n  font-size: 12px;\n  line-height: 30px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\ninterface $ImageProps {\n  pic: string;\n}\n\nconst Image = ({ pic }: $ImageProps) => {\n  const style = {\n    backgroundImage: `url(${pic})`,\n    backgroundPosition: \"center\",\n    backgroundSize: \"cover\",\n    backgroundRepeat: \"no-repeat\",\n  };\n\n  if (pic !== \"\") {\n    return <ImageElm style={style}></ImageElm>;\n  } else {\n    return <Empty />;\n  }\n};\n\nconst ImageElm = styled.div`\n  margin: -10px 5px -10px -10px;\n  height: 47px;\n  width: 47px;\n  float: left;\n  border-radius: 100px;\n  border: 3px solid ${({ theme }) => theme.main.highlight};\n  background-color: white;\n  overflow: hidden;\n`;\nconst Empty = styled.div``;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Spell from \"../../../../data/Spell\";\n\nimport StringField from \"../../../form_elements/StringField\";\nimport NumberField from \"../../../form_elements/NumberField\";\nimport TextField from \"../../../form_elements/TextField\";\nimport CheckField from \"../../../form_elements/CheckField\";\n\nimport {\n  faHourglassHalf,\n  faMortarPestle,\n  faHistory,\n  faPowerOff,\n  faUser,\n  faLink,\n  faBookOpen,\n  faImage,\n} from \"@fortawesome/free-solid-svg-icons\";\n\ninterface $Props {\n  spell: Spell;\n  onEdit: (value: Spell) => void;\n}\n\nconst SpellEditView = ({ spell, onEdit }: $Props) => {\n  return (\n    <CenterWrapper>\n      <View>\n        <StringField\n          value={spell.name}\n          label=\"Name\"\n          onChange={(name) => onEdit({ ...spell, name: name })}\n        />\n        <StringField\n          value={spell.school}\n          label=\"School\"\n          onChange={(school) => onEdit({ ...spell, school: school })}\n        />\n        <FieldGroup>\n          <NumberField\n            value={spell.level}\n            label=\"Level\"\n            onChange={(level) => onEdit({ ...spell, level: level })}\n          />\n          <CheckField\n            value={!!spell.ritual}\n            label=\"Ritual\"\n            onChange={(ritual) => onEdit({ ...spell, ritual: ritual ? 1 : 0 })}\n          />\n        </FieldGroup>\n        <StringField\n          value={spell.time}\n          label=\"Time\"\n          icon={faHistory}\n          onChange={(time) => onEdit({ ...spell, time: time })}\n        />\n        <StringField\n          value={spell.range}\n          label=\"Range\"\n          icon={faPowerOff}\n          transform={{ rotate: 42 }}\n          onChange={(range) => onEdit({ ...spell, range: range })}\n        />\n        <StringField\n          value={spell.duration}\n          label=\"Duration\"\n          icon={faHourglassHalf}\n          onChange={(duration) => onEdit({ ...spell, duration: duration })}\n        />\n        <StringField\n          value={spell.components}\n          label=\"Comp.\"\n          icon={faMortarPestle}\n          onChange={(components) =>\n            onEdit({ ...spell, components: components })\n          }\n        />\n        <StringField\n          value={spell.classes}\n          label=\"Classes\"\n          icon={faUser}\n          onChange={(classes) => onEdit({ ...spell, classes: classes })}\n        />\n        <StringField\n          value={spell.sources}\n          label=\"Sources\"\n          icon={faLink}\n          onChange={(sources) => onEdit({ ...spell, sources: sources })}\n        />\n        <StringField\n          value={spell.pic}\n          label=\"Picture\"\n          icon={faImage}\n          onChange={(pic) => onEdit({ ...spell, pic: pic })}\n        />\n        <TextField\n          value={spell.text}\n          label=\"Text\"\n          icon={faBookOpen}\n          onChange={(text) => onEdit({ ...spell, text: text })}\n        />\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default SpellEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst FieldGroup = styled.div`\n  flex: 2 1 auto;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  padding: 5px;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\n\nimport {\n  faArrowLeft,\n  faSave,\n  faTrash,\n  faExclamationTriangle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport SpellView from \"./SpellView\";\nimport SpellEditView from \"./SpellEditView\";\nimport BackButton from \"../../../form_elements/BackButton\";\nimport Spell from \"../../../../data/Spell\";\nimport IconButton from \"../../../form_elements/IconButton\";\nimport { remove, updateWithCallback } from \"../../../../services/DatabaseService\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Dialog from \"../../../general_elements/Dialog\";\nimport { EditToggle, ToggleLeft, ToggleRight } from \"../../../general_elements/ToggleStyle\";\n\ninterface $Props {\n  spell: Spell;\n  isNew: boolean;\n}\n\nconst SpellDetail = ({ spell, isNew }: $Props) => {\n  const [editMode, setMode] = useState<boolean>(isNew);\n  const [spellObj, editSpell] = useState<Spell>(spell);\n  const [showAlert, setAlert] = useState<boolean>(false);\n  const [showDeleteDialog, setDeleteDialog] = useState<boolean>(false);\n  const [message, setMessage] = useState<string>(\"\");\n  const [unsavedChanges, setUnsavedChanges] = useState<boolean>(false);\n  let history = useHistory();\n\n  const deleteSpell = () => {\n    setDeleteDialog(true);\n  };\n\n  useEffect(() => {\n    if (spellObj !== spell) {\n      setUnsavedChanges(true);\n    }\n  }, [spellObj, spell]);\n\n  const updateSpell = (tableName: string, spellObj: Spell) => {\n    updateWithCallback(tableName, spellObj, (result) => {\n      if (result > 0) {\n        setUnsavedChanges(false);\n        setMessage(\"Saved successful!\");\n        setAlert(true);\n      } else {\n        setMessage(\"Something went wrong!\");\n        setAlert(true);\n      }\n      setTimeout(() => {\n        setAlert(false);\n      }, 3000);\n    });\n  };\n\n  return (\n    <>\n      {showDeleteDialog && (\n        <Dialog\n          message={`Delete ${spell.name}?`}\n          icon={faExclamationTriangle}\n          confirmeText={\"Delete\"}\n          confirmeClick={() => {\n            remove(\"spells\", spell.id);\n            history.goBack();\n          }}\n          abortText={\"Back\"}\n          abortClick={() => {\n            setDeleteDialog(false);\n          }}\n        />\n      )}\n      <TopBar>\n        <BackButton icon={faArrowLeft} action={() => history.goBack()} />\n        <EditToggle mode={editMode.toString()}>\n          <ToggleLeft onClick={() => setMode(false)}>View</ToggleLeft>\n          <ToggleRight onClick={() => setMode(true)}>Edit</ToggleRight>\n        </EditToggle>\n        {unsavedChanges && <Icon icon={faExclamationTriangle} title={\"Unsaved changes!\"} />}\n        {editMode && (\n          <>\n            <IconButton onClick={() => updateSpell(\"spells\", spellObj)} icon={faSave} />\n            <IconButton onClick={() => deleteSpell()} icon={faTrash} />\n            {message && showAlert && <Message>{message}</Message>}\n          </>\n        )}\n      </TopBar>\n      {editMode ? (\n        <SpellEditView spell={spellObj} onEdit={(value) => editSpell(value)} />\n      ) : (\n        <SpellView spell={spellObj} />\n      )}\n    </>\n  );\n};\n\nexport default SpellDetail;\n\nconst TopBar = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  overflow: hidden;\n  flex: 1 1;\n  min-width: calc(100% - 20px);\n  height: 45px;\n  padding: 10px;\n`;\n\nconst Message = styled.div`\n  padding: 5px;\n  width: 150px;\n  height: 30px;\n  line-height: 30px;\n  border-radius: 5px;\n  float: right;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  float: right;\n  line-height: 30px;\n  display: block;\n  height: 30px;\n  padding: 10px;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  icon: IconDefinition;\n  floatLeft?: boolean;\n  disabled?: boolean;\n  transform?: string | Transform;\n  onClick: (() => void) | ((e: any) => void);\n}\n\nconst IconButton = ({ icon, floatLeft, disabled, transform, onClick }: $Props) => {\n  return (\n    <>\n      {!disabled && (\n        <SimpleButton left={floatLeft} onClick={onClick}>\n          <Icon icon={icon} transform={transform} />\n        </SimpleButton>\n      )}\n      {disabled && (\n        <DisabledSimpleButton>\n          <Icon icon={icon} transform={transform} />\n        </DisabledSimpleButton>\n      )}\n    </>\n  );\n};\n\nexport default IconButton;\n\ntype FloatMpde = {\n  left?: boolean;\n};\n\nconst SimpleButton = styled.div<FloatMpde>`\n  color: ${({ theme }) => theme.buttons.color};\n  background-color: ${({ theme }) => theme.buttons.backgroundColor};\n  cursor: pointer;\n\n  font-size: 16px;\n  overflow: hidden;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: ${({ left }) => (left ? \"left\" : \"right\")};\n  padding: 10px;\n  margin: 5px;\n  border-radius: 10px;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n\n  transition: color 0.2s;\n\n  &:hover {\n    color: white;\n  }\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst DisabledSimpleButton = styled(SimpleButton)`\n  color: ${({ theme }) => theme.buttons.backgroundColor};\n  background-color: ${({ theme }) => theme.buttons.color};\n  cursor: not-allowed;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  text: string;\n  disabled?: boolean;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onClick: () => void;\n}\n\nconst TextButton = ({ text, icon, transform, disabled, onClick }: $Props) => {\n  return (\n    <SimpleButton onClick={onClick} disabled={disabled}>\n      {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {text}\n    </SimpleButton>\n  );\n};\n\nexport default TextButton;\n\nconst SimpleButton = styled.button`\n  color: ${({ theme }) => theme.buttons.color};\n  background-color: ${({ theme }) => theme.buttons.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: right;\n  padding: 10px;\n  margin: 5px;\n  border-radius: 10px;\n  cursor: pointer;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n  box-sizing: content-box;\n  border: none;\n\n  transition: color 0.2s;\n\n  &:hover {\n    color: ${({ theme }) => theme.buttons.hoverColor};\n  }\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.buttons.disabled};\n  }\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n  margin-right: 5px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: string;\n  label: string;\n  placeholder?: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: string) => void;\n}\n\nconst StringField = ({ value, label, placeholder, icon, transform, onChange }: $Props) => (\n  <Field>\n    <LabelText>\n      {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n    </LabelText>\n    <Input\n      type=\"text\"\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      placeholder={placeholder}\n    ></Input>\n  </Field>\n);\n\nexport default StringField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: 38px;\n  line-height: 30px;\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1 auto;\n`;\n\nconst Input = styled.input`\n  flex: 3 1 auto;\n  height: 38px;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin-left: 5px;\n  border-radius: 5px;\n  width: 0;\n  min-width: 100px;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { BiError, BiHistory, BiSelectMultiple } from \"react-icons/bi\";\nimport {\n  GiCrystalWand,\n  GiBackpack,\n  GiWomanElfFace,\n  GiPlagueDoctorProfile,\n  GiSwordClash,\n  GiBookmarklet,\n  GiScrollUnfurled,\n  GiSolarSystem,\n  GiDjinn,\n  GiBookshelf,\n} from \"react-icons/gi\";\nimport {\n  faMeteor,\n  faIdCard,\n  faDragon,\n  faMapMarkedAlt,\n  faTable,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { MdEvent } from \"react-icons/md\";\nimport { HiUserGroup } from \"react-icons/hi\";\nimport { recivePromiseByAttributeCount } from \"../../services/DatabaseService\";\n\ninterface $Props {\n  type: string;\n  name: string;\n}\n\nconst LinkCheck = ({ type, name }: $Props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [entitiyFound, setEntity] = useState<boolean>(false);\n\n  useEffect(() => {\n    let newType = type + \"s\";\n    if (type === \"class\" || type === \"subclass\") newType = type + \"es\";\n    recivePromiseByAttributeCount(newType, \"name\", name).then((count: number) => {\n      setEntity(count > 0);\n      setLoading(false);\n    });\n  }, [type, name]);\n\n  const formatIcon = (type: string) => {\n    switch (type) {\n      case \"spell\":\n        return <FontAwesomeIcon icon={faMeteor} />;\n      case \"item\":\n        return <GiCrystalWand />;\n      case \"gear\":\n        return <GiBackpack />;\n      case \"race\":\n      case \"subrace\":\n        return <GiWomanElfFace />;\n      case \"class\":\n      case \"subclass\":\n        return <GiPlagueDoctorProfile />;\n      case \"selection\":\n        return <BiSelectMultiple />;\n      case \"char\":\n        return <FontAwesomeIcon icon={faIdCard} />;\n      case \"monster\":\n        return <FontAwesomeIcon icon={faDragon} />;\n      case \"encounter\":\n        return <GiSwordClash />;\n      case \"campaign\":\n        return <GiBookmarklet />;\n      case \"quest\":\n        return <GiScrollUnfurled />;\n      case \"event\":\n        return <MdEvent />;\n      case \"world\":\n        return <GiSolarSystem />;\n      case \"location\":\n        return <FontAwesomeIcon icon={faMapMarkedAlt} />;\n      case \"npc\":\n        return <GiDjinn />;\n      case \"randomTable\":\n        return <FontAwesomeIcon icon={faTable} />;\n      case \"book\":\n        return <GiBookshelf />;\n      case \"group\":\n        return <HiUserGroup />;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      {loading && <BiHistory />}\n      {!loading && !entitiyFound && <BiError />}\n      {!loading && entitiyFound && <>{formatIcon(type)}</>}\n    </>\n  );\n};\n\nexport default LinkCheck;\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\nimport LinkCheck from \"./LinkCheck\";\n\ninterface $Props {\n  text: string;\n}\n\nconst FormatedText = ({ text }: $Props) => {\n  const [formatedText, setFormatedText] = useState<JSX.Element>();\n  let history = useHistory();\n\n  const cut = (str: string, cutStart: number, cutEnd: number) => {\n    return str.substr(0, cutStart) + str.substr(cutEnd + 1);\n  };\n\n  const formatLink = useCallback(\n    (text: string) => {\n      if (text !== undefined) {\n        if (text.includes(\"[[\") && text.includes(\"]]\")) {\n          const parts = text.split(\"[[\");\n          let formattedParts: any[] = [];\n          parts.forEach((part: string, index: number) => {\n            if (part.includes(\"]]\")) {\n              const codePart: string[] = part.split(\"]]\");\n              const linkParts: string[] = codePart[0].split(\".\");\n              const link: string = \"/\" + linkParts[0] + \"-detail/name/\" + linkParts[1];\n              formattedParts.push(\n                <TextPart key={index}>\n                  <Link onClick={() => history.push(link)}>\n                    <LinkCheck type={linkParts[0]} name={linkParts[1]} /> {linkParts[1]}\n                  </Link>\n                  <TextPart>{codePart[1]}</TextPart>\n                </TextPart>\n              );\n            } else {\n              if (part !== \"\") formattedParts.push(<TextPart key={index}>{part}</TextPart>);\n            }\n          });\n          return <>{formattedParts}</>;\n        } else {\n          return <TextPart>{text}</TextPart>;\n        }\n      }\n    },\n    [history]\n  );\n\n  const formatTable = useCallback(\n    (textPart: string) => {\n      if (textPart.includes(\"||table||\")) {\n        const table: string[] = text.split(\"||table||\");\n        const tableRows: string[] = table[1].split(\"||\");\n        let isHead = true;\n        return (\n          <>\n            {formatLink(table[0])}\n            <table>\n              <tbody>\n                {tableRows.map((row: string, index: number) => {\n                  if (row.includes(\"|\")) {\n                    if (isHead) {\n                      isHead = false;\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableHeadProp key={index}>{cell}</TableHeadProp>;\n                          })}\n                        </tr>\n                      );\n                    } else {\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableProp key={index}>{formatLink(cell)}</TableProp>;\n                          })}\n                        </tr>\n                      );\n                    }\n                  } else {\n                    return <></>;\n                  }\n                })}\n              </tbody>\n            </table>\n            {formatLink(table[2])}\n          </>\n        );\n      } else {\n        return formatLink(textPart);\n      }\n    },\n    [text, formatLink]\n  );\n\n  const formatText = useCallback(\n    (textPart: string) => {\n      while (textPart.includes(\"{{\")) {\n        const cutStart = textPart.indexOf(\"{{\");\n        const cutEnd = textPart.indexOf(\"}}\") + 1;\n        textPart = cut(textPart, cutStart, cutEnd);\n      }\n      return formatTable(textPart);\n    },\n    [formatTable]\n  );\n\n  useEffect(() => {\n    if (text !== undefined) {\n      let formatedText = formatText(text);\n      setFormatedText(formatedText);\n    }\n  }, [text, history, formatText]);\n\n  return <>{formatedText}</>;\n};\n\nexport default FormatedText;\n\nconst Link = styled.span`\n  display: inline-block;\n  background-color: ${({ theme }) => theme.tile.backgroundColorLink};\n  border-radius: 5px;\n  text-decoration: none;\n  color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 14px;\n  padding: 0px 5px 0px 5px;\n  cursor: pointer;\n  white-space: pre;\n`;\n\nconst TextPart = styled.span`\n  white-space: pre-line;\n`;\n\nconst TableHeadProp = styled.th`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 2px 5px 2px 5px;\n`;\n\nconst TableProp = styled.td`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 5px;\n  text-align: center;\n`;\n","import Dexie from \"dexie\";\nimport { useReducer, useEffect, useCallback, useState } from \"react\";\nimport Filter from \"../data/Filter\";\nimport ReactDOM from \"react-dom\";\n\ntype TableState<T> = [T[] | undefined, boolean, Dexie.DexieError | undefined];\ntype TableAction<T> =\n  | { type: \"resolved\"; data: T[] }\n  | { type: \"empty\" }\n  | { type: \"reset\" }\n  | { type: \"error\"; error: Dexie.DexieError };\n\ntype ItemState<T> = [T | undefined, boolean, Dexie.DexieError | undefined];\ntype ItemAction<T> =\n  | { type: \"resolved\"; data: T }\n  | { type: \"empty\" }\n  | { type: \"reset\" }\n  | { type: \"error\"; error: Dexie.DexieError };\n\nexport const useTable = <T, U>(table: Dexie.Table<T, U>): TableState<T> => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const reducer = useCallback((state: TableState<T>, action: TableAction<T>): TableState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () =>\n        table\n          .toArray()\n          .then((data) => {\n            dispatch({\n              type: \"resolved\",\n              data,\n            });\n          })\n          .catch((error) => {\n            dispatch({\n              type: \"error\",\n              error,\n            });\n          });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, effect]);\n\n  return state;\n};\n\nexport const useTableByFilter = <T, U>(\n  table: Dexie.Table<T, U>,\n  filters: Filter[]\n): TableState<T> => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const [filter, setFilter] = useState<Filter[]>(filters);\n  const reducer = useCallback((state: TableState<T>, action: TableAction<T>): TableState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      case \"reset\":\n        return [undefined, true, undefined];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (filter !== filters) {\n      ReactDOM.unstable_batchedUpdates(() => {\n        dispatch({ type: \"reset\" });\n        setFilter(filters);\n        setEffect(true);\n      });\n    }\n  }, [filter, filters, setEffect]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () => console.time(\"filtered get all\");\n      table\n        .filter((obj: T) => {\n          let test: boolean[] = [];\n          filters.forEach((filter) => {\n            if (typeof filter.value === \"string\") {\n              test.push(\n                // @ts-ignore\n                obj[filter.fieldName].toLowerCase().includes(filter.value.toLowerCase())\n              );\n            } else if (typeof filter.value === \"number\") {\n              // @ts-ignore\n              test.push(obj[filter.fieldName] === filter.value);\n            } else if (typeof filter.value === \"boolean\") {\n              // @ts-ignore\n              test.push(obj[filter.fieldName] === filter.value);\n            } else if (filter.value instanceof Array) {\n              let arrayTest: boolean = false;\n              filter.value.forEach((filterPart: string | boolean | number) => {\n                if (typeof filterPart === \"string\") {\n                  if (\n                    // @ts-ignore\n                    obj[filter.fieldName].toLowerCase().includes(filterPart.toLowerCase())\n                  )\n                    arrayTest = true;\n                } else if (typeof filterPart === \"number\") {\n                  // @ts-ignore\n                  if (obj[filter.fieldName] === filterPart) arrayTest = true;\n                } else if (typeof filterPart === \"boolean\") {\n                  // @ts-ignore\n                  if (obj[filter.fieldName] === filterPart) arrayTest = true;\n                }\n              });\n              test.push(arrayTest);\n            }\n          });\n\n          let result = true;\n          test.forEach((val) => {\n            if (!val) result = false;\n          });\n          return result;\n        })\n        .sortBy(\"name\")\n        .then((data) => {\n          console.timeEnd(\"filtered get all\");\n          dispatch({\n            type: \"resolved\",\n            data,\n          });\n        })\n        .catch((error) => {\n          dispatch({\n            type: \"error\",\n            error,\n          });\n        });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, effect, filters]);\n\n  return state;\n};\n\nexport const useItem = <T, U>(table: Dexie.Table<T, U>, id: U) => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const reducer = useCallback((state: ItemState<T>, action: ItemAction<T>): ItemState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"empty\":\n        return [undefined, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () =>\n        table\n          .get(id)\n          .then((data) => {\n            if (data !== undefined) {\n              dispatch({\n                type: \"resolved\",\n                data,\n              });\n            } else {\n              dispatch({\n                type: \"empty\",\n              });\n            }\n          })\n          .catch((error) => {\n            dispatch({\n              type: \"error\",\n              error,\n            });\n          });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, id, effect]);\n\n  return state;\n};\n\nexport const useItemByAttr = <T, U>(table: Dexie.Table<T, U>, attr: string, attrValue: string) => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const reducer = useCallback((state: ItemState<T>, action: ItemAction<T>): ItemState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"empty\":\n        return [undefined, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () =>\n        table\n          .where(attr)\n          .equalsIgnoreCase(attrValue)\n          .first()\n          .then((data) => {\n            if (data !== undefined) {\n              dispatch({\n                type: \"resolved\",\n                data,\n              });\n            } else {\n              dispatch({\n                type: \"empty\",\n              });\n            }\n          })\n          .catch((error) => {\n            dispatch({\n              type: \"error\",\n              error,\n            });\n          });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, attr, attrValue, effect]);\n\n  return state;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  icon: IconDefinition;\n  transform?: string | Transform;\n  action: () => void;\n}\n\nconst BackButton = ({ icon, transform, action }: $Props) => {\n  return (\n    <Back onClick={action}>\n      <Icon icon={icon} transform={transform} />\n    </Back>\n  );\n};\n\nexport default BackButton;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n  &:hover {\n    color: ${({ theme }) => theme.buttons.color};\n  }\n`;\n\nconst Back = styled.div`\n  float: left;\n  font-size: calc(${({ theme }) => theme.buttons.height} + 10px);\n  margin: 10px 0px 0px 10px;\n  cursor: pointer;\n`;\n","import styled from \"styled-components\";\n\nexport const ToggleLeft = styled.div`\n  width: auto;\n  padding: 10px;\n  margin: 5px 0px 5px 5px;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: left;\n  cursor: pointer;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n  border-radius: 5px 0px 0px 5px;\n\n  transition: color 0.2s, background-color 0.2s;\n\n  &:hover {\n    color: ${({ theme }) => theme.buttons.hoverColor};\n  }\n`;\n\nexport const ToggleRight = styled(ToggleLeft)`\n  margin: 5px 5px 5px 0px;\n\n  border-radius: 0px 5px 5px 0px;\n`;\n\ntype EditMode = {\n  mode: string;\n};\n\nexport const EditToggle = styled.div<EditMode>`\n  width: auto;\n  height: ${({ theme }) => theme.buttons.height};\n  float: right;\n  color: ${({ theme }) => theme.buttons.color};\n\n  ${ToggleLeft} {\n    background-color: ${(props) => {\n      if (props.mode !== \"true\") {\n        return ({ theme }) => theme.buttons.backgroundColor;\n      } else {\n        return ({ theme }) => theme.tile.backgroundColor;\n      }\n    }};\n  }\n\n  ${ToggleRight} {\n    background-color: ${(props) => {\n      if (props.mode === \"true\") {\n        return ({ theme }) => theme.buttons.backgroundColor;\n      } else {\n        return ({ theme }) => theme.tile.backgroundColor;\n      }\n    }};\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Peer from \"peerjs\";\nimport { reciveAllPromise } from \"../../services/DatabaseService\";\nimport IEntity from \"../../data/IEntity\";\nimport { generateBrokerId } from \"../../services/PeerIdService\";\n\nimport { faExclamationCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport StringField from \"../form_elements/StringField\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\ninterface $Props {\n  data: string | IEntity;\n  mode: \"ALL\" | \"THIS\";\n}\n\nconst P2PSender = ({ data, mode }: $Props) => {\n  const [name, setName] = useState<string>(\"\");\n  const [peer, setPeer] = useState<Peer>();\n  const [error, setError] = useState<any>();\n\n  useEffect(() => {\n    if (peer === undefined) {\n      const brokerId = generateBrokerId();\n      const newPeer = new Peer(brokerId, {\n        host: \"peerjs.thedndtome.com\",\n        secure: true,\n      });\n      console.log(newPeer);\n      newPeer.on(\"connection\", function (conn) {\n        conn.on(\"error\", function (errorData) {\n          setError(errorData);\n        });\n        conn.on(\"open\", function () {\n          conn.send(data);\n        });\n      });\n      setPeer(newPeer);\n    }\n  }, [data, peer]);\n\n  useEffect(() => {\n    if (peer !== undefined) {\n      if (peer.disconnected && !peer.destroyed) {\n        peer.reconnect();\n      }\n      if (mode === \"ALL\" && typeof data === \"string\") {\n        reciveAllPromise(data).then((results) => {\n          console.log(results);\n          setName(data);\n          peer.on(\"connection\", function (conn) {\n            conn.on(\"error\", function (errorData) {\n              setError(errorData);\n            });\n            conn.on(\"open\", function () {\n              conn.send(results);\n            });\n          });\n        });\n      } else if (mode === \"THIS\" && typeof data !== \"string\") {\n        setName(data.name);\n        peer.on(\"connection\", function (conn) {\n          conn.on(\"error\", function (errorData) {\n            setError(errorData);\n          });\n          conn.on(\"open\", function () {\n            conn.send(data);\n          });\n        });\n      }\n    }\n  }, [data, mode, peer]);\n\n  return (\n    <>\n      {peer !== undefined && peer.id !== null && (\n        <>\n          <StringField value={peer.id} label={`Your ${name} ID:`} onChange={() => {}} />\n        </>\n      )}\n      {error && <Icon icon={faExclamationCircle} />}\n    </>\n  );\n};\n\nexport default P2PSender;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n","const getRandomInteger = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nexport const generateBrokerId = () => {\n  let password = \"\";\n  const characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  for (let i = 0; i < 13; i++) {\n    password += characters[getRandomInteger(0, characters.length - 1)];\n  }\n  return password;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport TextButton from \"../form_elements/TextButton\";\n\ninterface $Props {\n  message: string;\n  icon?: IconDefinition;\n  confirmeText: string;\n  confirmeClick: () => void;\n  abortText: string;\n  abortClick: () => void;\n}\n\nconst Dialog = ({\n  message,\n  icon,\n  confirmeText,\n  confirmeClick,\n  abortText,\n  abortClick,\n}: $Props) => {\n  return (\n    <DialogWrapper>\n      <Message>\n        {icon ? <Icon icon={icon} /> : \"\"} {message}\n      </Message>\n      <ButtonBar>\n        <TextButton text={abortText} onClick={abortClick} />\n        <TextButton text={confirmeText} onClick={confirmeClick} />\n      </ButtonBar>\n    </DialogWrapper>\n  );\n};\n\nexport default Dialog;\n\nconst DialogWrapper = styled.div`\n  width: 180px;\n  position: absolute;\n  z-index: 1010;\n  top: 10px;\n  left: calc(50% - 100px);\n  padding: 10px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  color: ${({ theme }) => theme.tile.color};\n`;\n\nconst Message = styled.div`\n  width: 100%;\n  text-align: center;\n`;\n\nconst ButtonBar = styled.div`\n  width: 100%;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n  margin-right: 5px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: number;\n  label: string;\n  max?: number;\n  step?: number;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: number) => void;\n}\n\nconst NumberField = ({ value, max, step, label, icon, transform, onChange }: $Props) => {\n  return (\n    <Field>\n      <LabelText>\n        {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n      </LabelText>\n      {max && (\n        <Input\n          type=\"number\"\n          max={max}\n          step={step ? step : 1}\n          value={value}\n          onChange={(e) => onChange(+e.target.value)}\n        />\n      )}\n      {!max && (\n        <Input\n          type=\"number\"\n          step={step ? step : 1}\n          value={value}\n          onChange={(e) => onChange(+e.target.value)}\n        />\n      )}\n    </Field>\n  );\n};\n\nexport default NumberField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: 38px;\n  line-height: 30px;\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1;\n`;\n\nconst Input = styled.input`\n  flex: 1 1 auto;\n  max-width: 6em;\n  height: 38px;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin-left: 5px;\n  border-radius: 5px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: string;\n  label: string;\n  height?: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: string) => void;\n}\n\nconst TextField = ({ value, label, height, icon, transform, onChange }: $Props) => {\n  return (\n    <Field>\n      <LabelText>\n        {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n      </LabelText>\n      <Input height={height} value={value} onChange={(e) => onChange(e.target.value)}></Input>\n    </Field>\n  );\n};\n\nexport default TextField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  min-width: calc(100% - 20px);\n  flex: 3 3 auto;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1;\n  min-width: 100%;\n  height: 30px;\n  line-height: 30px;\n`;\n\ntype TextProps = {\n  height?: string;\n};\n\nconst Input = styled.textarea<TextProps>`\n  flex: 1 1;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  height: ${({ height }) => (height !== undefined ? height : \"auto\")};\n  min-height: ${({ height }) => (height !== undefined ? height : \"22vh\")};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n`;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 97;"],"sourceRoot":""}