{"version":3,"sources":["components/general_elements/TabBar.tsx","components/statistics/gear/CostRatioChart.tsx","components/statistics/gear/DamageRatioChart.tsx","components/statistics/gear/GearTypeRatioChart.tsx","components/statistics/gear/WeightVsCostsChart.tsx","components/statistics/gear/WeightRatioChart.tsx","components/statistics/general/AmountOfEntitiesChart.tsx","components/statistics/items/AttunmentRatioChart.tsx","components/statistics/items/BaseRatioChart.tsx","components/statistics/items/ItemTypeRatioChart.tsx","components/statistics/items/MagicBonusRatioChart.tsx","components/statistics/items/RarityRatioChart.tsx","components/statistics/monsters/CrRatioChart.tsx","components/statistics/monsters/LegendaryRatioChart.tsx","components/statistics/monsters/MonsterTypeRatioChart.tsx","components/statistics/spells/ActionsRatioChart.tsx","components/statistics/spells/LevelRatioChart.tsx","components/statistics/spells/LevelVsSchoolChart.tsx","components/statistics/spells/LevelVsTimeChart.tsx","components/statistics/spells/RitualRatioChart.tsx","components/statistics/spells/SchoolsRatioChart.tsx","components/statistics/spells/SchoolVsTimeChart.tsx","components/statistics/items/RarityVsAttunmentChart.tsx","components/statistics/items/RarityVsMagicBonusChart.tsx","components/statistics/Statistics.tsx"],"names":["TabBar","children","activeTab","onChange","Bar","map","child","index","Tab","onClick","e","isActive","styled","div","theme","tile","color","backgroundColor","input","buttons","props","CostRatioChart","useState","loading","setLoading","generalCounts","setGeneralCounts","useEffect","makeSchoolsData","a","reciveAttributeSelectionPromise","costs","promList","cost","recivePromiseByAttributeCount","toString","count","push","name","names","counts","colors","sort","b","forEach","Math","floor","random","labels","datasets","data","OptionSection","SelectionTitle","undefined","style","width","paddingBottom","boxShadow","DamageRatioChart","types","type","GearTypeRatioChart","WeightVsCostsChart","xLabels","setXLabels","yLabels","setYLabels","reciveAllPromise","gears","filter","gear","trim","weight","weights","x","indexOf","y","prom","r","length","options","scales","ticks","callback","tickValue","plugins","tooltip","callbacks","label","tooltipItem","xLabel","yLabel","legend","display","WeightRatioChart","AmountOfEntitiesChart","makeGeneralCountsData","reciveCountPromise","AttunmentRatioChart","attunments","attunment","BaseRatioChart","bases","base","ItemTypeRatioChart","MagicBonusRatioChart","magicBoni","magicBonus","RarityRatioChart","rarities","rarity","position","responsive","CrRatioChart","crs","cr","LegendaryRatioChart","leg","noleg","MonsterTypeRatioChart","ActionsRatioChart","times","newTimes","time","startsWith","LevelRatioChart","levels","level","LevelVsSchoolChart","spells","parseInt","schools","school","spell","LevelVsTimeChart","RitualRatioChart","rituals","ritual","SchoolsRatioChart","SchoolVsTimeChart","RarityVsAttunmentChart","items","item","value","countsA","Array","countsB","RarityVsMagicBonusChart","magicBonis","OptionTab","Statistics","setTab","tab"],"mappings":"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","file":"static/js/19.c3b18692.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface $Props {\n  children: string[];\n  activeTab?: string;\n  onChange: (name: string) => void;\n}\n\nconst TabBar = ({ children, activeTab, onChange }: $Props) => {\n  return (\n    <Bar>\n      {children.map((child, index) => {\n        return (\n          <Tab key={index} onClick={(e) => onChange(child)} isActive={child === activeTab}>\n            {child}\n          </Tab>\n        );\n      })}\n    </Bar>\n  );\n};\n\nexport default TabBar;\n\nconst Bar = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  min-width: calc(100% - 20px);\n  flex: 1 1 auto;\n  padding: 3px;\n  margin: 5px;\n  border-radius: 10px;\n  position: relative;\n  z-index: 100;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: baseline;\n`;\n\ntype ActiveType = {\n  isActive?: boolean;\n};\n\nconst Tab = styled.div<ActiveType>`\n  flex: 3 1 auto;\n  height: 30px;\n  line-height: 20px;\n  padding: 5px;\n  box-sizing: border-box;\n  text-align: center;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin: 2px;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.buttons.backgroundColor};\n    color: ${({ theme }) => theme.buttons.color};\n  }\n\n  ${(props) => {\n    if (props.isActive) {\n      return `background-color: ${props.theme.buttons.backgroundColor}; \n      color: ${props.theme.buttons.color};`;\n    }\n  }}\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst CostRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const costs = await reciveAttributeSelectionPromise(\"gears\", \"cost\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const cost of costs) {\n      if (cost !== \"\") {\n        const count = await recivePromiseByAttributeCount(\"gears\", \"cost\", cost.toString());\n        promList.push({\n          name: cost.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Cost Graph</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default CostRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst DamageRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const types = await reciveAttributeSelectionPromise(\"gears\", \"damage\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const type of types) {\n      if (type !== \"\") {\n        const count = await recivePromiseByAttributeCount(\"gears\", \"damage\", type.toString());\n        promList.push({\n          name: type.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Damage Graph</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default DamageRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst GearTypeRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const types = await reciveAttributeSelectionPromise(\"gears\", \"type\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const type of types) {\n      if (type !== undefined) {\n        const count = await recivePromiseByAttributeCount(\"gears\", \"type\", type as number);\n        promList.push({\n          name: type.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Type Graph</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default GearTypeRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bubble } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAllPromise,\n  reciveAttributeSelectionPromise,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\nimport Gear from \"../../../data/Gear\";\nimport { Tick } from \"chart.js\";\n\nconst WeightVsCostsChart = () => {\n  const [xLabels, setXLabels] = useState<string[]>([]);\n  const [yLabels, setYLabels] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    datasets: { data: { x: number; y: number }[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    let gears: Gear[] = (await reciveAllPromise(\"gears\")).filter(\n      (gear) =>\n        gear.cost !== undefined &&\n        gear.cost.trim() !== \"\" &&\n        gear.weight !== undefined &&\n        gear.weight.trim() !== \"\"\n    );\n    const costs = (await reciveAttributeSelectionPromise(\"gears\", \"cost\"))\n      .map((cost) => cost.toString())\n      .filter((cost) => cost !== undefined && cost.trim() !== \"\");\n    const weights = (await reciveAttributeSelectionPromise(\"gears\", \"weight\"))\n      .map((weight) => weight.toString())\n      .filter((weight) => weight !== undefined && weight.trim() !== \"\");\n\n    setXLabels(costs);\n    setYLabels(weights);\n\n    let promList: { x: number; y: number; r: number }[] = [];\n    let colors: string[] = [];\n    gears.forEach((gear: Gear) => {\n      if (\n        gear.cost !== undefined &&\n        gear.cost.trim() !== \"\" &&\n        gear.weight !== undefined &&\n        gear.weight.trim() !== \"\"\n      ) {\n        let x = costs.indexOf(gear.cost);\n        let y = weights.indexOf(gear.weight);\n        let prom: { x: number; y: number; r: number } = promList.filter(\n          (prom) => prom.x === x && prom.y === y\n        )[0];\n        let index = promList.indexOf(prom);\n\n        if (prom !== undefined) {\n          promList[index] = { ...promList[index], r: promList[index].r + 1 };\n        } else {\n          promList.push({\n            x: x,\n            y: y,\n            r: 1,\n          });\n          colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n        }\n      }\n    });\n\n    promList = promList.map((prom) => {\n      return { ...prom, r: (prom.r / gears.length) * 500 };\n    });\n\n    setGeneralCounts({\n      datasets: [\n        {\n          data: promList,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Weight x Costs Ratio</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bubble\n            data={generalCounts}\n            options={{\n              scales: {\n                x: {\n                  ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function (tickValue: number | string, index: number, ticks: Tick[]) {\n                      return xLabels[tickValue];\n                    },\n                  },\n                },\n                y: {\n                  ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function (tickValue: number | string, index: number, ticks: Tick[]) {\n                      return yLabels[tickValue];\n                    },\n                  },\n                },\n              },\n              plugins: {\n                tooltip: {\n                  callbacks: {\n                    label: function (tooltipItem: any) {\n                      return xLabels[tooltipItem.xLabel] + \" x \" + yLabels[tooltipItem.yLabel];\n                    },\n                  },\n                },\n              },\n            }}\n            legend={{ display: false }}\n          />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default WeightVsCostsChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst WeightRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const weights = await reciveAttributeSelectionPromise(\"gears\", \"weight\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const weight of weights) {\n      if (weight !== \"\") {\n        const count = await recivePromiseByAttributeCount(\"gears\", \"weight\", weight.toString());\n        promList.push({\n          name: weight.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Weight Graph</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default WeightRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"@iftek/react-chartjs-3\";\nimport { reciveCountPromise } from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst AmountOfEntitiesChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeGeneralCountsData();\n  }, []);\n\n  const makeGeneralCountsData = async () => {\n    let promList: { name: string; count: number }[] = [];\n    promList.push({\n      name: \"spells\",\n      count: await reciveCountPromise(\"spells\"),\n    });\n    promList.push({ name: \"gears\", count: await reciveCountPromise(\"gears\") });\n    promList.push({ name: \"items\", count: await reciveCountPromise(\"items\") });\n    promList.push({\n      name: \"monsters\",\n      count: await reciveCountPromise(\"monsters\"),\n    });\n    promList.push({ name: \"races\", count: await reciveCountPromise(\"races\") });\n    promList.push({\n      name: \"subraces\",\n      count: await reciveCountPromise(\"subraces\"),\n    });\n    promList.push({\n      name: \"classes\",\n      count: await reciveCountPromise(\"classes\"),\n    });\n    promList.push({\n      name: \"subclasses\",\n      count: await reciveCountPromise(\"subclasses\"),\n    });\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Amount of Entities</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default AmountOfEntitiesChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 20em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst AttunmentRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const attunments = await reciveAttributeSelectionPromise(\"items\", \"attunment\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const attunment of attunments) {\n      if (attunment !== undefined) {\n        const count = await recivePromiseByAttributeCount(\n          \"items\",\n          \"attunment\",\n          attunment as number\n        );\n        promList.push({\n          name: attunment.toString() === \"0\" ? \"no attunment\" : \"attunment\",\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Attunment Ratio</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default AttunmentRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 15em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst BaseRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const bases = await reciveAttributeSelectionPromise(\"items\", \"base\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const base of bases) {\n      if (base !== \"\") {\n        const count = await recivePromiseByAttributeCount(\"items\", \"base\", base.toString());\n        promList.push({\n          name: base.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Base Graph</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} options={{}} legend={{ display: false }} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default BaseRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst ItemTypeRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const types = await reciveAttributeSelectionPromise(\"items\", \"type\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const type of types) {\n      if (type !== undefined) {\n        const count = await recivePromiseByAttributeCount(\"items\", \"type\", type.toString());\n        promList.push({\n          name: type.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Type Graph</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} options={{}} legend={{ display: false }} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default ItemTypeRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst MagicBonusRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const magicBoni = await reciveAttributeSelectionPromise(\"items\", \"magicBonus\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const magicBonus of magicBoni) {\n      if (magicBonus !== undefined) {\n        const count = await recivePromiseByAttributeCount(\n          \"items\",\n          \"magicBonus\",\n          magicBonus as number\n        );\n        promList.push({\n          name: \"+\" + magicBonus.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Rarity Ratio</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default MagicBonusRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 15em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst RarityRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const rarities = await reciveAttributeSelectionPromise(\"items\", \"rarity\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const rarity of rarities) {\n      if (rarity !== undefined) {\n        const count = await recivePromiseByAttributeCount(\"items\", \"rarity\", rarity.toString());\n        promList.push({\n          name: rarity.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Rarity Ratio</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div\n          style={{\n            position: \"relative\",\n            width: \"100%\",\n            paddingBottom: \"10px\",\n          }}\n        >\n          <Doughnut\n            data={generalCounts}\n            options={{\n              responsive: true,\n              plugins: {\n                legend: {\n                  position: \"top\",\n                },\n              },\n            }}\n          />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default RarityRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 auto;\n  max-width: 30em;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst CrRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const crs = await reciveAttributeSelectionPromise(\"monsters\", \"cr\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const cr of crs) {\n      if (cr !== undefined) {\n        const count = await recivePromiseByAttributeCount(\"monsters\", \"cr\", cr as number);\n        promList.push({\n          name: cr.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Cr Graph</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default CrRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst LegendaryRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const rarities = await reciveAttributeSelectionPromise(\"monsters\", \"lAblt\");\n\n    let leg = 0;\n    let noleg = 0;\n\n    let promList: { name: string; count: number }[] = [];\n    for (const rarity of rarities) {\n      if (rarity !== \"\") {\n        const count = await recivePromiseByAttributeCount(\"monsters\", \"lAblt\", rarity.toString());\n        leg += count;\n      } else {\n        const count = await recivePromiseByAttributeCount(\"monsters\", \"lAblt\", rarity.toString());\n        noleg += count;\n      }\n    }\n\n    promList.push({\n      name: \"Legendary\",\n      count: leg,\n    });\n    promList.push({\n      name: \"no Legendary\",\n      count: noleg,\n    });\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Legendary Ratio</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default LegendaryRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 15em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst MonsterTypeRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const types = await reciveAttributeSelectionPromise(\"monsters\", \"type\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const type of types) {\n      if (type !== undefined) {\n        const count = await recivePromiseByAttributeCount(\"monsters\", \"type\", type.toString());\n        promList.push({\n          name: type.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Type Graph</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default MonsterTypeRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst ActionsRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    let times = await reciveAttributeSelectionPromise(\"spells\", \"time\");\n\n    let newTimes: string[] = [];\n    times.forEach((time) => {\n      if (!time.toString().startsWith(\"1 reaction\")) {\n        newTimes.push(time.toString());\n      }\n    });\n\n    let promList: { name: string; count: number }[] = [];\n    for (const time of newTimes) {\n      if (time !== \"\") {\n        const count = await recivePromiseByAttributeCount(\"spells\", \"time\", time.toString());\n        promList.push({\n          name: time.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Time Ratio</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} options={{}} legend={{ display: false }} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default ActionsRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst LevelRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const levels = await reciveAttributeSelectionPromise(\"spells\", \"level\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const level of levels) {\n      if (level !== undefined) {\n        const count = await recivePromiseByAttributeCount(\"spells\", \"level\", level as number);\n        promList.push({\n          name: \"Level \" + level.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Level Ratio</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default LevelRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 auto;\n  max-width: 30em;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bubble } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAllPromise,\n  reciveAttributeSelectionPromise,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\nimport Spell from \"../../../data/Spell\";\nimport { Tick } from \"chart.js\";\n\nconst LevelVsSchoolChart = () => {\n  const [xLabels, setXLabels] = useState<string[]>([]);\n  const [yLabels, setYLabels] = useState<number[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    datasets: { data: { x: number; y: number }[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    let spells: Spell[] = await reciveAllPromise(\"spells\");\n    const levels = (await reciveAttributeSelectionPromise(\"spells\", \"level\")).map((level) =>\n      parseInt(level.toString())\n    );\n    const schools = (await reciveAttributeSelectionPromise(\"spells\", \"school\")).map((school) =>\n      school.toString()\n    );\n\n    setXLabels(schools);\n    setYLabels(levels);\n\n    let promList: { x: number; y: number; r: number }[] = [];\n    let colors: string[] = [];\n    spells.forEach((spell: Spell) => {\n      if (!spell.time.startsWith(\"1 reaction\")) {\n        let x = schools.indexOf(spell.school);\n        let y = levels.indexOf(spell.level);\n        let prom: { x: number; y: number; r: number } = promList.filter(\n          (prom) => prom.x === x && prom.y === y\n        )[0];\n        let index = promList.indexOf(prom);\n\n        if (prom !== undefined) {\n          promList[index] = { ...promList[index], r: promList[index].r + 1 };\n        } else {\n          promList.push({\n            x: x,\n            y: y,\n            r: 1,\n          });\n          colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n        }\n      }\n    });\n\n    promList = promList.map((prom) => {\n      return { ...prom, r: (prom.r / spells.length) * 500 };\n    });\n\n    setGeneralCounts({\n      datasets: [\n        {\n          data: promList,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>School x Level Ratio</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bubble\n            data={generalCounts}\n            options={{\n              scales: {\n                x: {\n                  ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function (tickValue: number | string, index: number, ticks: Tick[]) {\n                      return xLabels[tickValue];\n                    },\n                  },\n                },\n                y: {\n                  ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function (tickValue: number | string, index: number, ticks: Tick[]) {\n                      return yLabels[tickValue];\n                    },\n                  },\n                },\n              },\n              plugins: {\n                tooltip: {\n                  callbacks: {\n                    label: function (tooltipItem: any) {\n                      return xLabels[tooltipItem.xLabel] + \" x \" + yLabels[tooltipItem.yLabel];\n                    },\n                  },\n                },\n              },\n            }}\n            legend={{ display: false }}\n          />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default LevelVsSchoolChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bubble } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAllPromise,\n  reciveAttributeSelectionPromise,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\nimport Spell from \"../../../data/Spell\";\nimport { Tick } from \"chart.js\";\n\nconst LevelVsTimeChart = () => {\n  const [xLabels, setXLabels] = useState<string[]>([]);\n  const [yLabels, setYLabels] = useState<number[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    datasets: { data: { x: number; y: number }[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    let spells: Spell[] = await reciveAllPromise(\"spells\");\n    const levels = (await reciveAttributeSelectionPromise(\"spells\", \"level\")).map((level) =>\n      parseInt(level.toString())\n    );\n    const times = (await reciveAttributeSelectionPromise(\"spells\", \"time\"))\n      .map((time) => time.toString())\n      .filter((time) => !time.startsWith(\"1 reaction\"));\n\n    setXLabels(times);\n    setYLabels(levels);\n\n    let promList: { x: number; y: number; r: number }[] = [];\n    let colors: string[] = [];\n    spells.forEach((spell: Spell) => {\n      if (!spell.time.startsWith(\"1 reaction\")) {\n        let x = times.indexOf(spell.time);\n        let y = levels.indexOf(spell.level);\n        let prom: { x: number; y: number; r: number } = promList.filter(\n          (prom) => prom.x === x && prom.y === y\n        )[0];\n        let index = promList.indexOf(prom);\n\n        if (prom !== undefined) {\n          promList[index] = { ...promList[index], r: promList[index].r + 1 };\n        } else {\n          promList.push({\n            x: x,\n            y: y,\n            r: 1,\n          });\n          colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n        }\n      }\n    });\n\n    promList = promList.map((prom) => {\n      return { ...prom, r: (prom.r / spells.length) * 200 };\n    });\n\n    setGeneralCounts({\n      datasets: [\n        {\n          data: promList,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Time x Level Ratio</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bubble\n            data={generalCounts}\n            options={{\n              scales: {\n                x: {\n                  ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function (tickValue: number | string, index: number, ticks: Tick[]) {\n                      return xLabels[tickValue];\n                    },\n                  },\n                },\n                y: {\n                  ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function (tickValue: number | string, index: number, ticks: Tick[]) {\n                      return xLabels[tickValue];\n                    },\n                  },\n                },\n              },\n              plugins: {\n                tooltip: {\n                  callbacks: {\n                    label: function (tooltipItem: any) {\n                      return xLabels[tooltipItem.xLabel] + \" x \" + yLabels[tooltipItem.yLabel];\n                    },\n                  },\n                },\n              },\n            }}\n            legend={{ display: false }}\n          />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default LevelVsTimeChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst RitualRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const rituals = await reciveAttributeSelectionPromise(\"spells\", \"ritual\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const ritual of rituals) {\n      if (ritual !== undefined) {\n        const count = await recivePromiseByAttributeCount(\"spells\", \"ritual\", ritual as number);\n        promList.push({\n          name: ritual.toString() === \"0\" ? \"no Ritual\" : \"Ritual\",\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Ritual Ratio</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default RitualRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 auto;\n  max-width: 30em;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst SchoolsRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const schools = await reciveAttributeSelectionPromise(\"spells\", \"school\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const school of schools) {\n      if (school !== \"\")\n        promList.push({\n          name: school.toString(),\n          count: await recivePromiseByAttributeCount(\"spells\", \"school\", school.toString()),\n        });\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>School Ratio</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default SchoolsRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 auto;\n  max-width: 30em;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bubble } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAllPromise,\n  reciveAttributeSelectionPromise,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\nimport Spell from \"../../../data/Spell\";\nimport { Tick } from \"chart.js\";\n\nconst SchoolVsTimeChart = () => {\n  const [xLabels, setXLabels] = useState<string[]>([]);\n  const [yLabels, setYLabels] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    datasets: { data: { x: number; y: number }[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    let spells: Spell[] = await reciveAllPromise(\"spells\");\n    const schools = (await reciveAttributeSelectionPromise(\"spells\", \"school\")).map((school) =>\n      school.toString()\n    );\n    const times = (await reciveAttributeSelectionPromise(\"spells\", \"time\"))\n      .map((time) => time.toString())\n      .filter((time) => !time.startsWith(\"1 reaction\"));\n\n    setXLabels(times);\n    setYLabels(schools);\n\n    let promList: { x: number; y: number; r: number }[] = [];\n    let colors: string[] = [];\n    spells.forEach((spell: Spell) => {\n      if (!spell.time.startsWith(\"1 reaction\")) {\n        let x = times.indexOf(spell.time);\n        let y = schools.indexOf(spell.school);\n        let prom: { x: number; y: number; r: number } = promList.filter(\n          (prom) => prom.x === x && prom.y === y\n        )[0];\n        let index = promList.indexOf(prom);\n\n        if (prom !== undefined) {\n          promList[index] = { ...promList[index], r: promList[index].r + 1 };\n        } else {\n          promList.push({\n            x: x,\n            y: y,\n            r: 1,\n          });\n          colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n        }\n      }\n    });\n\n    promList = promList.map((prom) => {\n      return { ...prom, r: (prom.r / spells.length) * 200 };\n    });\n\n    setGeneralCounts({\n      datasets: [\n        {\n          data: promList,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle> School x Time Ratio</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bubble\n            data={generalCounts}\n            options={{\n              scales: {\n                x: {\n                  ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function (tickValue: number | string, index: number, ticks: Tick[]) {\n                      return xLabels[tickValue];\n                    },\n                  },\n                },\n\n                y: {\n                  ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function (tickValue: number | string, index: number, ticks: Tick[]) {\n                      return yLabels[tickValue];\n                    },\n                  },\n                },\n              },\n              plugins: {\n                tooltip: {\n                  callbacks: {\n                    label: function (tooltipItem: any) {\n                      return xLabels[tooltipItem.xLabel] + \" x \" + yLabels[tooltipItem.yLabel];\n                    },\n                  },\n                },\n              },\n            }}\n            legend={{ display: false }}\n          />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default SchoolVsTimeChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAllPromise,\n  reciveAttributeSelectionPromise,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\nimport Item from \"../../../data/Item\";\n\nconst RarityVsAttunmentChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { label: string; data: number[]; backgroundColor: string }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    let items: Item[] = (await reciveAllPromise(\"items\")).filter(\n      (item) =>\n        item.rarity !== undefined && item.rarity.trim() !== \"\" && item.attunment !== undefined\n    );\n    const rarities = (await reciveAttributeSelectionPromise(\"items\", \"rarity\"))\n      .map((rarity) => rarity.toString())\n      .filter((rarity) => rarity !== undefined && rarity.trim() !== \"\");\n    const attunments = (await reciveAttributeSelectionPromise(\"items\", \"attunment\"))\n      .map((attunment) => attunment.toString())\n      .filter((attunment) => attunment !== undefined);\n\n    let promList: { x: string; attunment: number; value: number }[] = [];\n    items.forEach((item: Item) => {\n      if (item.rarity !== undefined && item.rarity.trim() !== \"\" && item.attunment !== undefined) {\n        let x = item.rarity;\n        let y = attunments.indexOf(item.attunment.toString());\n        let prom: { x: string; attunment: number; value: number } = promList.filter(\n          (prom) => prom.x === x && prom.attunment === y\n        )[0];\n        let index = promList.indexOf(prom);\n\n        if (prom !== undefined) {\n          promList[index] = { ...promList[index], value: promList[index].value + 1 };\n        } else {\n          promList.push({\n            x: x,\n            attunment: y,\n            value: 1,\n          });\n        }\n      }\n    });\n\n    let countsA: number[] = new Array(rarities.length);\n    let countsB: number[] = new Array(rarities.length);\n    promList.forEach((count) => {\n      if (count.attunment) countsA[rarities.indexOf(count.x)] = count.value;\n      else countsB[rarities.indexOf(count.x)] = count.value;\n    });\n\n    setGeneralCounts({\n      labels: rarities,\n      datasets: [\n        {\n          label: \"Attunment\",\n          data: countsA,\n          backgroundColor: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\n        },\n        {\n          label: \"No Attunment\",\n          data: countsB,\n          backgroundColor: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Rarity x Attunment Ratio</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} options={{}} legend={{ display: false }} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default RarityVsAttunmentChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"@iftek/react-chartjs-3\";\nimport {\n  reciveAllPromise,\n  reciveAttributeSelectionPromise,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\nimport Item from \"../../../data/Item\";\n\nconst RarityVsMagicBonusChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { label: string; data: number[]; backgroundColor: string }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    let items: Item[] = (await reciveAllPromise(\"items\")).filter(\n      (item) =>\n        item.rarity !== undefined && item.rarity.trim() !== \"\" && item.magicBonus !== undefined\n    );\n    const rarities = (await reciveAttributeSelectionPromise(\"items\", \"rarity\"))\n      .map((rarity) => rarity.toString())\n      .filter((rarity) => rarity !== undefined && rarity.trim() !== \"\");\n    const magicBoni = (await reciveAttributeSelectionPromise(\"items\", \"magicBonus\"))\n      .map((attunment) => attunment.toString())\n      .filter((attunment) => attunment !== undefined);\n\n    let promList: { x: string; y: number; value: number }[] = [];\n    items.forEach((item: Item) => {\n      if (item.rarity !== undefined && item.rarity.trim() !== \"\" && item.magicBonus !== undefined) {\n        let x = item.rarity;\n        let y = magicBoni.indexOf(item.magicBonus.toString());\n        let prom: { x: string; y: number; value: number } = promList.filter(\n          (prom) => prom.x === x && prom.y === y\n        )[0];\n        let index = promList.indexOf(prom);\n\n        if (prom !== undefined) {\n          promList[index] = { ...promList[index], value: promList[index].value + 1 };\n        } else {\n          promList.push({\n            x: x,\n            y: y,\n            value: 1,\n          });\n        }\n      }\n    });\n\n    let counts: { label: string; data: number[]; backgroundColor: string }[] = [];\n    magicBoni.forEach((magicBonis) => {\n      counts.push({\n        label: \"+\" + magicBonis,\n        data: new Array(rarities.length),\n        backgroundColor: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\n      });\n    });\n    promList.forEach((count) => {\n      counts[count.y].data[rarities.indexOf(count.x)] = count.value;\n    });\n\n    setGeneralCounts({\n      labels: rarities,\n      datasets: counts,\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Rarity x Magic Bonus Ratio</SelectionTitle>\n      {!loading && generalCounts !== undefined && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} options={{}} legend={{ display: false }} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default RarityVsMagicBonusChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport TabBar from \"../general_elements/TabBar\";\nimport CostRatioChart from \"./gear/CostRatioChart\";\nimport DamageRatioChart from \"./gear/DamageRatioChart\";\nimport GearTypeRatioChart from \"./gear/GearTypeRatioChart\";\nimport WeightVsCostsChart from \"./gear/WeightVsCostsChart\";\nimport WeightRatioChart from \"./gear/WeightRatioChart\";\nimport AmountOfEntitiesChart from \"./general/AmountOfEntitiesChart\";\nimport AttunmentRatioChart from \"./items/AttunmentRatioChart\";\nimport BaseRatioChart from \"./items/BaseRatioChart\";\nimport ItemTypeRatioChart from \"./items/ItemTypeRatioChart\";\nimport MagicBonusRatioChart from \"./items/MagicBonusRatioChart\";\nimport RarityRatioChart from \"./items/RarityRatioChart\";\nimport CrRatioChart from \"./monsters/CrRatioChart\";\nimport LegendaryRatioChart from \"./monsters/LegendaryRatioChart\";\nimport MonsterTypeRatioChart from \"./monsters/MonsterTypeRatioChart\";\nimport ActionsRatioChart from \"./spells/ActionsRatioChart\";\nimport LevelRatioChart from \"./spells/LevelRatioChart\";\nimport LevelVsSchoolChart from \"./spells/LevelVsSchoolChart\";\nimport LevelVsTimeChart from \"./spells/LevelVsTimeChart\";\nimport RitualRatioChart from \"./spells/RitualRatioChart\";\nimport SchoolsRatioChart from \"./spells/SchoolsRatioChart\";\nimport SchoolVsTimeChart from \"./spells/SchoolVsTimeChart\";\nimport RarityVsAttunmentChart from \"./items/RarityVsAttunmentChart\";\nimport RarityVsMagicBonusChart from \"./items/RarityVsMagicBonusChart\";\n\nconst Statistics = () => {\n  const [activeTab, setTab] = useState<string>(\"General\");\n\n  return (\n    <>\n      <TabBar\n        children={[\"General\", \"Spells\", \"Gears\", \"Magic Items\", \"Monsters\"]}\n        onChange={(tab: string) => setTab(tab)}\n        activeTab={activeTab}\n      />\n      {activeTab === \"General\" && (\n        <OptionTab>\n          <AmountOfEntitiesChart />\n        </OptionTab>\n      )}\n      {activeTab === \"Spells\" && (\n        <OptionTab>\n          <SchoolsRatioChart />\n          <LevelRatioChart />\n          <RitualRatioChart />\n          <ActionsRatioChart />\n          <SchoolVsTimeChart />\n          <LevelVsSchoolChart />\n          <LevelVsTimeChart />\n        </OptionTab>\n      )}\n      {activeTab === \"Gears\" && (\n        <OptionTab>\n          <GearTypeRatioChart />\n          <DamageRatioChart />\n          <CostRatioChart />\n          <WeightRatioChart />\n          <WeightVsCostsChart />\n        </OptionTab>\n      )}\n      {activeTab === \"Magic Items\" && (\n        <OptionTab>\n          <RarityRatioChart />\n          <AttunmentRatioChart />\n          <MagicBonusRatioChart />\n          <BaseRatioChart />\n          <ItemTypeRatioChart />\n          <RarityVsAttunmentChart />\n          <RarityVsMagicBonusChart />\n        </OptionTab>\n      )}\n      {activeTab === \"Monsters\" && (\n        <OptionTab>\n          <LegendaryRatioChart />\n          <MonsterTypeRatioChart />\n          <CrRatioChart />\n        </OptionTab>\n      )}\n    </>\n  );\n};\n\nexport default Statistics;\n\nconst OptionTab = styled.div`\n  flex: 1 1 auto;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n"],"sourceRoot":""}