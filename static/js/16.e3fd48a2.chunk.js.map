{"version":3,"sources":["components/help/Help.tsx","components/general_elements/LinkCheck.tsx","components/general_elements/FormatedText.tsx","components/general_elements/TabBar.tsx"],"names":["Help","useState","activeTab","setTab","General","children","onChange","tab","HelpSection","SelectionTitle","SectionText","text","styled","div","theme","tile","color","backgroundColor","boxShadow","input","LinkCheck","type","name","loading","setLoading","entitiyFound","setEntity","useEffect","newType","recivePromiseByAttributeCount","then","count","icon","faMeteor","faIdCard","faDragon","faMapMarkedAlt","faTable","formatIcon","FormatedText","webhook","useWebhook","json","setJson","formatedText","setFormatedText","history","useHistory","undefined","newText","formatDiscordText","length","substring","newJson","username","content","JSON","stringify","cut","str","cutStart","cutEnd","substr","rollDiscord","useCallback","command","includes","rollCommand","result","rolls","sendMessage","newCommand","value","parseInt","replaceAll","krit","fail","rollString","formatLink","parts","split","formattedParts","forEach","part","index","codePart","linkParts","linkEntity","push","TextPart","key","DiscordPart","onClick","link","Link","formatTable","textPart","table","tableRows","isHead","map","row","cells","cell","TableHeadProp","TableProp","formatText","indexOf","FormatedTextContainer","IconButton","style","float","padding","faDiscord","sendEmbedMessage","span","backgroundColorLink","th","td","TabBar","Bar","child","Tab","e","isActive","buttons","props"],"mappings":"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","file":"static/js/16.e3fd48a2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport FormatedText from \"../general_elements/FormatedText\";\nimport TabBar from \"../general_elements/TabBar\";\n\nconst Help = () => {\n  const [activeTab, setTab] = useState<string>(\"Install\");\n\n  return (\n    <>\n      <General>\n        <TabBar\n          children={[\"Install\", \"Create\", \"Import\", \"Export\", \"Text Formating\", \"Modifiers\"]}\n          onChange={(tab: string) => setTab(tab)}\n          activeTab={activeTab}\n        />\n        {activeTab === \"Install\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>How to install DnDTome on desktop</SelectionTitle>\n              <SectionText>\n                To install this webapp as an app use chrome and click on the plus in your navigation\n                bar right next to the favorite star icon.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to install DnDTome on mobile</SelectionTitle>\n              <SectionText>\n                To install this webapp as an app on mobile find and click the \"Add to home screen\"\n                option in your firefox, chrome or safari.\n              </SectionText>\n            </HelpSection>\n          </>\n        )}\n        {activeTab === \"Create\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>How to create Entitys</SelectionTitle>\n              <SectionText>\n                To create a new Spell for example go to Spells and hit \"Add Spell\" in the top\n                middle.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to create Sub-Entitys</SelectionTitle>\n              <SectionText>\n                For subclasses/subraces you need to visit a class/race and click the little circled\n                + in the subclass/subrace section of the class/race.\n              </SectionText>\n            </HelpSection>\n          </>\n        )}\n        {activeTab === \"Import\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>How to import Entitiys via .json files</SelectionTitle>\n              <SectionText>\n                Go to options and select a file in the top left file select dialog titled \"Import\".\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to import Entitiys via the send functionallity</SelectionTitle>\n              <SectionText>\n                Go to options and navigate to recive. Add the ID of the sender to the filed and\n                accept sended entities.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to import 5eTools files</SelectionTitle>\n              <SectionText>\n                Go to options and navigate to \"Other Import\" and select the file dialog suited for\n                the entity you want to import.\n              </SectionText>\n              <SectionText>Your entity is not listed there?</SectionText>\n              <SectionText>Those will be updated and added gradually.</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to import from other sources</SelectionTitle>\n              <SectionText>\n                As of now only dndtome and 5eTools .json files are supported.\n              </SectionText>\n            </HelpSection>\n          </>\n        )}\n        {activeTab === \"Export\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>How to export Entitiys to .json files</SelectionTitle>\n              <SectionText>\n                Go to options and click the \"export\"-Button located in the top right section titled\n                \"Export\". This will export your hole collection to one big file! (Excluding your pdf\n                library)\n              </SectionText>\n              <SectionText>\n                Or go to options and navigate to the entities you want to send for example \"Spells\".\n                There you can export all your spells to one file.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to send Entitiys via the send functionallity</SelectionTitle>\n              <SectionText>\n                Go to options and navigate to the entities you want to send for example \"Spells\".\n                Click the \"Send all Spells\"-Button and copy the ID.\n              </SectionText>\n              <SectionText>\n                Or go to the entities overview and choose a single entity for example a spell called\n                \"Heal\". Click the \"Send Heal\"-Button and copy the ID.\n              </SectionText>\n              <SectionText>You can now send the ID to the reciver.</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to export 5eTools files</SelectionTitle>\n              <SectionText>Not supported as of now.</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to export to other sources</SelectionTitle>\n              <SectionText>As of now you can only export to dndtome .json files.</SectionText>\n            </HelpSection>\n          </>\n        )}\n        {activeTab === \"Text Formating\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>How to create a hyper-link</SelectionTitle>\n              <SectionText>You can add a hyper-link in every textarea.</SectionText>\n              <SectionText>\n                To do so write: [[spell.Heal Me]] to link to the spell with the name \"Heal Me\".\n              </SectionText>\n              <SectionText>\n                Result: <FormatedText text={\"[[spell.Heal Me]]\"} />\n              </SectionText>\n              <SectionText>This works for all entities.</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to create a table</SelectionTitle>\n              <SectionText>You can add a table in every textarea.</SectionText>\n              <SectionText>\n                To do so write: <br />\n                ||table||\n                <br />\n                ||\"Header1\"|\"Header2\"|\"Header3\"|...||\n                <br />\n                ||\"Cell1\"|\"Cell2\"|\"Cell3\"|...||\n                <br />\n                ||...||\n              </SectionText>\n              <SectionText>\n                Result:{\" \"}\n                <FormatedText\n                  text={`||table||||Header1|Header2|Header3|...||||Cell1|Cell2|Cell3|...||`}\n                />\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to create a discord \"Link\" to roll dice</SelectionTitle>\n              <SectionText>You can add a discord-link in every textarea.</SectionText>\n              <SectionText>To do so write: [[dice.+2 to hit]] to roll a d20+2 in discord.</SectionText>\n              <SectionText>\n                Result: <FormatedText text={`[[dice.+2 to hit]]`} />\n              </SectionText>\n              <SectionText>Or write: [[dice.2d12+6 radiant damage]] to roll a \"2d12+6 radiant damage\" in discord.</SectionText>\n              <SectionText>\n                Result: <FormatedText text={`[[dice.2d12+6 radiant damage]]`} />\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to create a table with links in it</SelectionTitle>\n              <SectionText>\n                You can add a link to every cell of a table in every textarea.\n              </SectionText>\n              <SectionText>\n                To do so write: <br />\n                ||table||\n                <br />\n                ||\"Header1\"|\"Header2\"|\"Header3\"|...||\n                <br />\n                ||\"[[spell.Heal Me]]\"|\"Cell2\"|\"Cell3\"|...||\n                <br />\n                ||...||\n              </SectionText>\n              <SectionText>\n                Result:{\" \"}\n                <FormatedText\n                  text={`||table||||Header1|Header2|Header|...||||[[spell.Heal Me]]|Cell2|Cell3|...||`}\n                />\n              </SectionText>\n            </HelpSection>\n          </>\n        )}\n        {activeTab === \"Modifiers\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>What are modifiers?</SelectionTitle>\n              <SectionText>\n                Modifiers enable you to give class-, subclass-, race-, subracefeatures and magic\n                items (for now) spezial modifiers that will directly modify the character using\n                those things.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Equal modifiers</SelectionTitle>\n              <SectionText>Add {\"{{'target'='value'}}\"} to a feature.</SectionText>\n              <SectionText>\n                For example: {\"{{ac=15}}\"} or {'{{alignment=\"Real Evil\"}'}\n              </SectionText>\n              <SectionText>\n                You can even alter deeper values like: {\"{{saves.chaSaveProf=1}}\"}\n              </SectionText>\n              <SectionText>\n                Complex example: {\"{{ac=\\\"10+(([dex]-10)/2)+(([con]-10)/2)\\\"}}\"} where{\" \"}\n                {\"(([dex]-10)/2)\"} gives you the bonus for the stat.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Add modifiers</SelectionTitle>\n              <SectionText>Add {\"{{'target'+'value'}}\"} to a feature.</SectionText>\n              <SectionText>\n                For example: {\"{{ac+3}}\"} or {'{{profs+\"Thiefs tools\"}'}\n              </SectionText>\n              <SectionText>Deep example: {\"{{skills.natureProf+1}}\"}</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Substract modifiers</SelectionTitle>\n              <SectionText>Add {\"{{'target'-'value'}}\"} to a feature.</SectionText>\n              <SectionText>For example: {\"{{ac-3}}\"}</SectionText>\n              <SectionText>Deep example: {\"{{money.gold-100}}\"}</SectionText>\n              <SectionText>No option for removing something from a text yet!</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Add modifiers</SelectionTitle>\n              <SectionText>Add {\"{{'target'.add='value'}}\"} to a feature.</SectionText>\n              <SectionText>For example: {'{{spells.add=\"Acid Splash\"}}'}</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Character fields that can be accessed</SelectionTitle>\n              <SectionText>\n                name: text\n                <br /> player: text\n                <br /> pic: text\n                <br /> background: text\n                <br /> ac: number\n                <br /> hp: number\n                <br /> currentHp: number\n                <br /> init: number\n                <br /> speed: text\n                <br /> str: number\n                <br /> dex: number\n                <br /> con: number\n                <br /> int: number\n                <br /> wis: number\n                <br /> cha: number\n                <br /> actions: text\n                <br /> profsLangs: text\n                <br /> senses: text\n                <br /> alignment: text\n                <br /> inspiration: number\n                <br /> castingHit: number\n                <br /> castingDC: number\n                <br /> money: Money\n                <br /> skills: Skills\n                <br /> saves: Saves\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Money fields that can be accessed</SelectionTitle>\n              <SectionText>\n                copper: number\n                <br /> silver: number\n                <br /> electrum: number\n                <br /> gold: number\n                <br /> platinum: number\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Saves fields that can be accessed</SelectionTitle>\n              <SectionText>\n                strSaveProf: number\n                <br /> dexSaveProf: number\n                <br /> conSaveProf: number\n                <br /> intSaveProf: number\n                <br /> wisSaveProf: number\n                <br /> chaSaveProf: number\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Skills fields that can be accessed</SelectionTitle>\n              <SectionText>\n                acrobaticsProf: number\n                <br /> animalHandlingProf: number\n                <br /> arcanaProf: number\n                <br /> athleticsProf: number\n                <br /> deceptionProf: number\n                <br /> historyProf: number\n                <br /> insightProf: number\n                <br /> intimidationProf: number\n                <br /> investigationProf: number\n                <br /> medicineProf: number\n                <br /> natureProf: number\n                <br /> perceptionProf: number\n                <br /> performanceProf: number\n                <br /> persuasionProf: number\n                <br /> religionProf: number\n                <br /> sleightOfHandProf: number\n                <br /> stealthProf: number\n                <br /> survivalProf: number\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Fields you can add something to</SelectionTitle>\n              <SectionText>\n                monsters\n                <br /> spells\n              </SectionText>\n            </HelpSection>\n          </>\n        )}\n      </General>\n    </>\n  );\n};\n\nexport default Help;\n\nconst General = styled.div`\n  flex: 1 1 auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst HelpSection = styled.div`\n  flex: 1 1 20em;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 3px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n\nconst SectionText = styled.div`\n  flex: 1 1 auto;\n  width: calc(100% - 10px);\n  padding: 5px;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { BiError, BiHistory, BiSelectMultiple } from \"react-icons/bi\";\nimport {\n  GiCrystalWand,\n  GiBackpack,\n  GiWomanElfFace,\n  GiPlagueDoctorProfile,\n  GiSwordClash,\n  GiBookmarklet,\n  GiScrollUnfurled,\n  GiSolarSystem,\n  GiDjinn,\n  GiBookshelf,\n  GiDiceTwentyFacesTwenty,\n} from \"react-icons/gi\";\nimport {\n  faMeteor,\n  faIdCard,\n  faDragon,\n  faMapMarkedAlt,\n  faTable,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { MdEvent } from \"react-icons/md\";\nimport { HiUserGroup } from \"react-icons/hi\";\nimport { recivePromiseByAttributeCount } from \"../../services/DatabaseService\";\n\ninterface $Props {\n  type: string;\n  name: string;\n}\n\nconst LinkCheck = ({ type, name }: $Props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [entitiyFound, setEntity] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (type === \"dice\") {\n      setEntity(true);\n      setLoading(false);\n    } else {\n      let newType = type + \"s\";\n      if (type === \"class\" || type === \"subclass\") newType = type + \"es\";\n      recivePromiseByAttributeCount(newType, \"name\", name).then((count: number) => {\n        setEntity(count > 0);\n        setLoading(false);\n      });\n    }\n  }, [type, name]);\n\n  const formatIcon = (type: string) => {\n    switch (type) {\n      case \"spell\":\n        return <FontAwesomeIcon icon={faMeteor} />;\n      case \"item\":\n        return <GiCrystalWand />;\n      case \"gear\":\n        return <GiBackpack />;\n      case \"race\":\n      case \"subrace\":\n        return <GiWomanElfFace />;\n      case \"class\":\n      case \"subclass\":\n        return <GiPlagueDoctorProfile />;\n      case \"selection\":\n        return <BiSelectMultiple />;\n      case \"char\":\n        return <FontAwesomeIcon icon={faIdCard} />;\n      case \"monster\":\n        return <FontAwesomeIcon icon={faDragon} />;\n      case \"encounter\":\n        return <GiSwordClash />;\n      case \"campaign\":\n        return <GiBookmarklet />;\n      case \"quest\":\n        return <GiScrollUnfurled />;\n      case \"event\":\n        return <MdEvent />;\n      case \"world\":\n        return <GiSolarSystem />;\n      case \"location\":\n        return <FontAwesomeIcon icon={faMapMarkedAlt} />;\n      case \"npc\":\n        return <GiDjinn />;\n      case \"randomTable\":\n        return <FontAwesomeIcon icon={faTable} />;\n      case \"book\":\n        return <GiBookshelf />;\n      case \"group\":\n        return <HiUserGroup />;\n      case \"dice\":\n        return <GiDiceTwentyFacesTwenty />;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      {loading && <BiHistory />}\n      {!loading && !entitiyFound && <BiError />}\n      {!loading && entitiyFound && <>{formatIcon(type)}</>}\n    </>\n  );\n};\n\nexport default LinkCheck;\n","import { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\nimport { useWebhook } from \"../../hooks/webhookHook\";\nimport { rollCommand } from \"../../services/DiceService\";\nimport { formatDiscordText, sendEmbedMessage, sendMessage } from \"../../services/DiscordService\";\nimport IconButton from \"../form_elements/IconButton\";\nimport LinkCheck from \"./LinkCheck\";\n\ninterface $Props {\n  text: string;\n}\n\nconst FormatedText = ({ text }: $Props) => {\n  let webhook = useWebhook();\n  const [json, setJson] = useState<string>(\"\");\n  const [formatedText, setFormatedText] = useState<JSX.Element>();\n  let history = useHistory();\n\n  useEffect(() => {\n    if (webhook !== undefined) {\n      let newText = formatDiscordText(text);\n      if (newText.length >= 2000) {\n        newText = newText.substring(0, 1997) + \"...\";\n      }\n      let newJson = {\n        username: webhook.name + \" (DnDTome)\",\n        content: newText,\n      };\n      setJson(JSON.stringify(newJson));\n    }\n  }, [text, webhook]);\n\n  const cut = (str: string, cutStart: number, cutEnd: number) => {\n    return str.substr(0, cutStart) + str.substr(cutEnd + 1);\n  };\n\n  const rollDiscord = useCallback(\n    (command: string) => {\n      if (!command.includes(\"d\")) {\n        let newCommand = \"d20\" + command;\n        let value = parseInt(command.replaceAll(\"+\", \"\"));\n        const { result, text, rolls } = rollCommand(newCommand);\n\n        let krit = false;\n        if (result - value === 20) krit = true;\n        let fail = false;\n        if (result - value === 1) fail = true;\n\n        let rollString = \"d20\" + rolls + command;\n        if (result !== undefined && webhook !== undefined) {\n          sendMessage(\n            webhook,\n            result +\n              \" \" +\n              text +\n              (fail ? \" :red_circle:\" : \"\") +\n              (krit ? \" :green_circle:\" : \"\") +\n              \" ||\" +\n              rollString +\n              \"||\"\n          );\n        }\n      } else {\n        const { result, text, rolls } = rollCommand(command);\n        if (result !== undefined && webhook !== undefined) {\n          sendMessage(webhook, result + \" \" + text + \" ||\" + command + \" \" + rolls + \"||\");\n        }\n      }\n    },\n    [webhook]\n  );\n\n  const formatLink = useCallback(\n    (text: string) => {\n      if (text !== undefined) {\n        if (text.includes(\"[[\") && text.includes(\"]]\")) {\n          const parts = text.split(\"[[\");\n          let formattedParts: any[] = [];\n          parts.forEach((part: string, index: number) => {\n            if (part.includes(\"]]\")) {\n              const codePart: string[] = part.split(\"]]\");\n              const linkParts: string[] = codePart[0].split(\".\");\n              let linkEntity = linkParts[0];\n              if (linkEntity === \"dice\") {\n                formattedParts.push(\n                  <TextPart key={index}>\n                    <DiscordPart onClick={() => rollDiscord(linkParts[1])}>\n                      <LinkCheck type={linkParts[0]} name={linkParts[1]} /> {linkParts[1]}\n                    </DiscordPart>\n                    <TextPart>{codePart[1]}</TextPart>\n                  </TextPart>\n                );\n              } else {\n                if (linkEntity === \"class\" || linkEntity === \"subclass\") linkEntity += \"e\";\n                const link: string = \"/\" + linkEntity + \"-detail/name/\" + linkParts[1];\n                formattedParts.push(\n                  <TextPart key={index}>\n                    <Link onClick={() => history.push(link)}>\n                      <LinkCheck type={linkParts[0]} name={linkParts[1]} /> {linkParts[1]}\n                    </Link>\n                    <TextPart>{codePart[1]}</TextPart>\n                  </TextPart>\n                );\n              }\n            } else {\n              if (part !== \"\") formattedParts.push(<TextPart key={index}>{part}</TextPart>);\n            }\n          });\n          return <>{formattedParts}</>;\n        } else {\n          return <TextPart>{text}</TextPart>;\n        }\n      }\n    },\n    [history]\n  );\n\n  const formatTable = useCallback(\n    (textPart: string) => {\n      if (textPart.includes(\"||table||\")) {\n        const table: string[] = text.split(\"||table||\");\n        const tableRows: string[] = table[1].split(\"||\");\n        let isHead = true;\n        return (\n          <>\n            {formatLink(table[0])}\n            <table>\n              <tbody>\n                {tableRows.map((row: string, index: number) => {\n                  if (row.includes(\"|\")) {\n                    if (isHead) {\n                      isHead = false;\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableHeadProp key={index}>{cell}</TableHeadProp>;\n                          })}\n                        </tr>\n                      );\n                    } else {\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableProp key={index}>{formatLink(cell)}</TableProp>;\n                          })}\n                        </tr>\n                      );\n                    }\n                  } else {\n                    return <></>;\n                  }\n                })}\n              </tbody>\n            </table>\n            {formatLink(table[2])}\n          </>\n        );\n      } else {\n        return formatLink(textPart);\n      }\n    },\n    [text, formatLink]\n  );\n\n  const formatText = useCallback(\n    (textPart: string) => {\n      while (textPart.includes(\"{{\")) {\n        const cutStart = textPart.indexOf(\"{{\");\n        const cutEnd = textPart.indexOf(\"}}\") + 1;\n        textPart = cut(textPart, cutStart, cutEnd);\n      }\n      return formatTable(textPart);\n    },\n    [formatTable]\n  );\n\n  useEffect(() => {\n    if (text !== undefined) {\n      let formatedText = formatText(text);\n      setFormatedText(formatedText);\n    }\n  }, [text, history, formatText]);\n\n  return (\n    <FormatedTextContainer>\n      {webhook !== undefined && text !== \"\" && (\n        <IconButton\n          style={{\n            backgroundColor: \"#7289da\",\n            float: \"right\",\n            padding: \"5px\",\n          }}\n          icon={faDiscord}\n          onClick={() => sendEmbedMessage(webhook, json)}\n        />\n      )}\n      {formatedText}\n    </FormatedTextContainer>\n  );\n};\n\nexport default FormatedText;\n\nconst FormatedTextContainer = styled.div`\n  line-height: 20px;\n`;\n\nconst Link = styled.span`\n  display: inline-block;\n  background-color: ${({ theme }) => theme.tile.backgroundColorLink};\n  border-radius: 5px;\n  text-decoration: none;\n  color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 14px;\n  padding: 0px 5px 0px 5px;\n  margin: 1px;\n  cursor: pointer;\n  white-space: pre;\n`;\n\nconst DiscordPart = styled(Link)`\n  background-color: #7289da;\n  color: white;\n`;\n\nconst TextPart = styled.span`\n  white-space: pre-line;\n`;\n\nconst TableHeadProp = styled.th`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 2px 5px 2px 5px;\n`;\n\nconst TableProp = styled.td`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 5px;\n  text-align: center;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface $Props {\n  children: string[];\n  activeTab?: string;\n  onChange: (name: string) => void;\n}\n\nconst TabBar = ({ children, activeTab, onChange }: $Props) => {\n  return (\n    <Bar>\n      {children.map((child, index) => {\n        return (\n          <Tab key={index} onClick={(e) => onChange(child)} isActive={child === activeTab}>\n            {child}\n          </Tab>\n        );\n      })}\n    </Bar>\n  );\n};\n\nexport default TabBar;\n\nconst Bar = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  min-width: calc(100% - 20px);\n  flex: 1 1 auto;\n  padding: 3px;\n  margin: 5px;\n  border-radius: 10px;\n  position: relative;\n  z-index: 100;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: baseline;\n`;\n\ntype ActiveType = {\n  isActive?: boolean;\n};\n\nconst Tab = styled.div<ActiveType>`\n  flex: 3 1 auto;\n  height: 30px;\n  line-height: 20px;\n  padding: 5px;\n  box-sizing: border-box;\n  text-align: center;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin: 2px;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.buttons.backgroundColor};\n    color: ${({ theme }) => theme.buttons.color};\n  }\n\n  ${(props) => {\n    if (props.isActive) {\n      return `background-color: ${props.theme.buttons.backgroundColor}; \n      color: ${props.theme.buttons.color};`;\n    }\n  }}\n`;\n"],"sourceRoot":""}