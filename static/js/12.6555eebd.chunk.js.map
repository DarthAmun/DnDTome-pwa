{"version":3,"sources":["components/form_elements/CheckField.tsx","components/form_elements/IconButton.tsx","components/form_elements/TextButton.tsx","components/form_elements/StringField.tsx","components/entities/item/details/ItemView.tsx","components/entities/item/details/ItemEditView.tsx","components/entities/item/details/ItemDetail.tsx","components/general_elements/LinkCheck.tsx","components/general_elements/FormatedText.tsx","hooks/DexieHooks.tsx","components/form_elements/BackButton.tsx","components/general_elements/ToggleStyle.tsx","components/p2p/P2PSender.tsx","services/PeerIdService.tsx","components/general_elements/Dialog.tsx","components/form_elements/NumberField.tsx","components/form_elements/TextField.tsx","components/form_elements/AutoStringField.tsx","../node_modules/peerjs/dist sync"],"names":["CheckField","value","label","icon","transform","onChange","Field","LabelText","Icon","Input","type","defaultChecked","e","target","checked","Checkmark","styled","theme","tile","color","backgroundColor","FontAwesomeIcon","main","highlight","div","input","buttons","IconButton","floatLeft","disabled","onClick","SimpleButton","left","DisabledSimpleButton","height","TextButton","text","button","hoverColor","StringField","placeholder","ItemView","item","useState","send","setSend","itemBase","setItemBase","useEffect","reciveAllFiltered","fieldName","base","sort","results","hasAttunment","useCallback","undefined","attunment","className","getPicture","pic","CenterWrapper","View","Rarity","rarity","Flag","ImageName","name","Name","PropWrapper","Prop","magicBonus","faLink","sources","damage","properties","Text","FormatedText","description","faPaperPlane","P2PSender","data","mode","props","toLowerCase","trim","Image","style","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","ImageElm","Empty","ItemEditView","onEdit","AutoStringField","optionTable","NumberField","faImage","TextField","faBookOpen","ItemDetail","isNew","editMode","setMode","itemObj","editItem","showAlert","setAlert","showDeleteDialog","setDeleteDialog","message","setMessage","unsavedChanges","setUnsavedChanges","history","useHistory","Dialog","faExclamationTriangle","confirmeText","confirmeClick","remove","id","goBack","abortText","abortClick","TopBar","BackButton","faArrowLeft","action","toString","title","tableName","updateWithCallback","result","setTimeout","updateItem","faSave","faTrash","Message","LinkCheck","loading","setLoading","entitiyFound","setEntity","recivePromiseByAttributeCount","then","count","faMeteor","faIdCard","faDragon","faMapMarkedAlt","faTable","formatIcon","formatedText","setFormatedText","cut","str","cutStart","cutEnd","substr","formatLink","includes","parts","split","formattedParts","forEach","part","index","codePart","linkParts","link","push","TextPart","key","Link","formatTable","textPart","table","tableRows","isHead","map","row","cells","cell","TableHeadProp","TableProp","formatText","indexOf","span","backgroundColorLink","th","td","useItem","effect","setEffect","reducer","state","error","useReducer","dispatch","get","catch","useItemByAttr","attr","attrValue","where","equals","first","Back","ToggleLeft","ToggleRight","EditToggle","setName","peer","setPeer","setError","brokerId","min","max","password","characters","i","length","Math","floor","random","generateBrokerId","newPeer","Peer","host","secure","console","log","on","conn","errorData","disconnected","destroyed","reconnect","reciveAllPromise","faExclamationCircle","DialogWrapper","ButtonBar","textarea","optionsTable","options","setOptions","filteredOptions","setFilteredOptions","findAllItems","a","itemList","Promise","all","items","o","concat","reciveAll","Array","onSearch","searchTerm","newOptions","filter","option","Options","opt","Option","webpackEmptyContext","req","Error","code","keys","resolve","module","exports"],"mappings":"gsDA+BeA,IAhBI,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,MAAOC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,SACnD,OACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACGJ,EAAO,kBAACK,EAAD,CAAML,KAAMA,EAAMC,UAAWA,IAAgB,GADvD,IAC4DF,GAE5D,kBAACO,EAAD,CACEC,KAAK,WACLC,eAAgBV,EAChBI,SAAU,SAACO,GAAD,OAAOP,EAASO,EAAEC,OAAOC,YAErC,kBAACC,EAAD,QAON,IAAMT,EAAQU,IAAOd,MAAV,KACA,qBAAGe,MAAkBC,KAAKC,SACf,qBAAGF,MAAkBC,KAAKE,mBAiB1CZ,EAAOQ,YAAOK,IAAPL,CAAH,KAMC,qBAAGC,MAAkBK,KAAKC,aAG/BhB,EAAYS,IAAOQ,IAAV,KAITT,EAAYC,IAAOQ,IAAV,KAQO,qBAAGP,MAAkBQ,MAAML,mBACtC,qBAAGH,MAAkBQ,MAAMN,SAsBhCV,EAAQO,IAAOS,MAAV,IASKV,GACQ,qBAAGE,MAAkBK,KAAKC,aACrC,qBAAGN,MAAkBS,QAAQP,QAG1BJ,I,oyBC9EDY,IAjBI,SAAC,GAA+D,IAA7DxB,EAA4D,EAA5DA,KAAMyB,EAAsD,EAAtDA,UAAWC,EAA2C,EAA3CA,SAAUzB,EAAiC,EAAjCA,UAAW0B,EAAsB,EAAtBA,QAC1D,OACE,qCACID,GACA,kBAACE,EAAD,CAAcC,KAAMJ,EAAWE,QAASA,GACtC,kBAACtB,EAAD,CAAML,KAAMA,EAAMC,UAAWA,KAGhCyB,GACC,kBAACI,EAAD,KACE,kBAACzB,EAAD,CAAML,KAAMA,EAAMC,UAAWA,OAavC,IAAM2B,EAAef,IAAOQ,IAAV,KACP,qBAAGP,MAAkBS,QAAQP,SAClB,qBAAGF,MAAkBS,QAAQN,mBAKvC,qBAAGH,MAAkBS,QAAQQ,UACxB,qBAAGjB,MAAkBS,QAAQQ,UACnC,qBAAGF,KAAmB,OAAS,WAkBpCC,EAAuBjB,YAAOe,EAAPf,CAAH,KACf,qBAAGC,MAAkBS,QAAQN,mBAClB,qBAAGH,MAAkBS,QAAQP,SAI7CX,EAAOQ,YAAOK,IAAPL,CAAH,M,gxBChDKmB,IARI,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,KAAMjC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,UAAWyB,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,QACrD,OACE,kBAACC,EAAD,CAAcD,QAASA,EAASD,SAAUA,GACvC1B,EAAO,kBAACK,EAAD,CAAML,KAAMA,EAAMC,UAAWA,IAAgB,GADvD,IAC4DgC,IAOhE,IAAML,EAAef,IAAOqB,OAAV,KACP,qBAAGpB,MAAkBS,QAAQP,SAClB,qBAAGF,MAAkBS,QAAQN,mBAGvC,qBAAGH,MAAkBS,QAAQQ,UACxB,qBAAGjB,MAAkBS,QAAQQ,UAajC,qBAAGjB,MAAkBS,QAAQY,cAIlB,qBAAGrB,MAAkBS,QAAQG,YAS/CrB,EAAOQ,YAAOK,IAAPL,CAAH,M,u9BC3BKuB,IAdK,SAAC,GAAD,IAAGtC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAOsC,EAAjB,EAAiBA,YAAarC,EAA9B,EAA8BA,KAAMC,EAApC,EAAoCA,UAAWC,EAA/C,EAA+CA,SAA/C,OAClB,kBAACC,EAAD,KACE,kBAACC,EAAD,KACGJ,EAAO,kBAACK,EAAD,CAAML,KAAMA,EAAMC,UAAWA,IAAgB,GADvD,IAC4DF,GAE5D,kBAACO,EAAD,CACEC,KAAK,OACLT,MAAOA,EACPI,SAAU,SAACO,GAAD,OAAOP,EAASO,EAAEC,OAAOZ,QACnCuC,YAAaA,MAOnB,IAAMlC,EAAQU,IAAOd,MAAV,KACA,qBAAGe,MAAkBC,KAAKC,SACf,qBAAGF,MAAkBC,KAAKE,mBAe1CZ,EAAOQ,YAAOK,IAAPL,CAAH,KAMC,qBAAGC,MAAkBK,KAAKC,aAG/BhB,EAAYS,IAAOQ,IAAV,KAITf,EAAQO,IAAOS,MAAV,KAMW,qBAAGR,MAAkBQ,MAAML,mBACtC,qBAAGH,MAAkBQ,MAAMN,U,0pFCrDtC,IAsFesB,EAtFE,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAmB,EACbC,oBAAkB,GADL,mBAC9BC,EAD8B,KACxBC,EADwB,OAELF,qBAFK,mBAE9BG,EAF8B,KAEpBC,EAFoB,KAIrCC,qBAAU,WACRC,YACE,QACA,CAAC,CAAEC,UAAW,OAAQjD,MAAOyC,EAAKS,KAAMC,KAAM,KAC9C,SAACC,GACCN,EAAYM,EAAQ,SAGvB,CAACX,IAEJ,IAAMY,EAAeC,uBAAY,WAC/B,YAAaC,IAATd,GACIA,EAAKe,UACF,yBAAKC,UAAU,QAAf,KAGJ,KACN,CAAChB,IAEEiB,EAAaJ,uBAAY,WAC7B,YAAaC,IAATd,EACe,KAAbA,EAAKkB,KAA2B,OAAblB,EAAKkB,IACnB,GAEFlB,EAAKkB,IAEP,KACN,CAAClB,IAEJ,OACE,kBAACmB,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,CAAQC,OAAQtB,EAAKsB,QAAStB,EAAKsB,QAEnC,kBAACC,EAAD,KACE,2BAAIX,MAGY,KAAjBK,IACC,kBAACO,EAAD,KACE,kBAAC,EAAD,CAAON,IAAKD,MACZ,2BAAIjB,EAAKyB,OAGX,kBAACC,EAAD,KACE,2BAAI1B,EAAKyB,OAIb,kBAACE,EAAD,KACE,kBAACC,EAAD,KAAO5B,EAAKhC,MACZ,kBAAC4D,EAAD,SAAQ5B,EAAK6B,YACb,kBAACD,EAAD,KACE,kBAAC9D,EAAD,CAAML,KAAMqE,MACX9B,EAAK+B,SAEP/B,EAAKS,MAAQL,GACZ,oCACE,kBAACwB,EAAD,KAAO5B,EAAKS,MACZ,kBAACmB,EAAD,KAAOxB,EAAS4B,QAChB,kBAACJ,EAAD,KAAOxB,EAAS6B,aAGpB,kBAACC,EAAD,KACE,kBAACC,EAAA,EAAD,CAAczC,KAAMM,EAAKoC,gBAG7B,kBAACT,EAAD,MACMzB,GACA,kBAACT,EAAA,EAAD,CACEC,KAAI,eAAUM,EAAKyB,MACnBhE,KAAM4E,IACNjD,QAAS,kBAAMe,GAAQ,QAGxBD,GAAQ,kBAACoC,EAAA,EAAD,CAAWC,KAAMvC,EAAMwC,KAAM,aAS9CrB,EAAgB7C,IAAOQ,IAAV,KAMbsC,EAAO9C,IAAOQ,IAAV,KACC,qBAAGP,MAAkBC,KAAKC,SAY/B4C,EAAS/C,IAAOQ,IAAV,KAMU,qBAAGP,MAAkBC,KAAKE,mBACrC,SAAC+D,GAAW,IAAD,EACZnB,EAAM,UAAGmB,EAAMnB,cAAT,aAAG,EAAcoB,cAAcC,OAC3C,MAAe,aAAXrB,EACK,UACa,cAAXA,EACF,UACa,cAAXA,EACF,UACa,SAAXA,EACF,UACa,aAAXA,EACF,UAEA,aAKPI,EAAOpD,IAAOQ,IAAV,KASY,qBAAGP,MAAkBC,KAAKE,mBAG1C8C,EAAYlD,IAAOQ,IAAV,KASO,qBAAGP,MAAkBC,KAAKE,mBAG1CiD,EAAcrD,IAAOQ,IAAV,KAUX8C,EAAOtD,IAAOQ,IAAV,KAQY,qBAAGP,MAAkBC,KAAKE,mBAG1CwD,EAAO5D,IAAOQ,IAAV,KAQY,qBAAGP,MAAkBC,KAAKE,mBAG1C6C,EAAOjD,IAAOQ,IAAV,KAQY,qBAAGP,MAAkBC,KAAKE,mBAG1CZ,EAAOQ,YAAOK,IAAPL,CAAH,KAMC,qBAAGC,MAAkBK,KAAKC,aAO/B+D,EAAQ,SAAC,GAA0B,IAAxB1B,EAAuB,EAAvBA,IACT2B,EAAQ,CACZC,gBAAgB,OAAD,OAAS5B,EAAT,KACf6B,mBAAoB,SACpBC,eAAgB,QAChBC,iBAAkB,aAGpB,MAAY,KAAR/B,EACK,kBAACgC,EAAD,CAAUL,MAAOA,IAEjB,kBAACM,EAAD,OAILD,EAAW5E,IAAOQ,IAAV,KAMQ,qBAAGP,MAAkBK,KAAKC,aAI1CsE,EAAQ7E,IAAOQ,IAAV,K,qbCxOX,IA4DesE,EA5DM,SAAC,GAA8B,IAA5BpD,EAA2B,EAA3BA,KAAMqD,EAAqB,EAArBA,OAC5B,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAACxD,EAAA,EAAD,CACEtC,MAAOyC,EAAKyB,KACZjE,MAAM,OACNG,SAAU,SAAC8D,GAAD,OAAU4B,EAAO,2BAAKrD,GAAN,IAAYyB,KAAMA,QAE9C,kBAAC6B,EAAA,EAAD,CACEC,YAAa,QACbhG,MAAOyC,EAAKS,KACZjD,MAAM,YACNG,SAAU,SAAC8C,GAAD,OAAU4C,EAAO,2BAAKrD,GAAN,IAAYS,KAAMA,QAE9C,kBAACnD,EAAA,EAAD,CACEC,QAASyC,EAAKe,UACdvD,MAAM,YACNG,SAAU,SAACoD,GAAD,OAAesC,EAAO,2BAAKrD,GAAN,IAAYe,UAAWA,EAAY,EAAI,QAExE,kBAAClB,EAAA,EAAD,CACEtC,MAAOyC,EAAKhC,KACZR,MAAM,OACNG,SAAU,SAACK,GAAD,OAAUqF,EAAO,2BAAKrD,GAAN,IAAYhC,KAAMA,QAE9C,kBAACwF,EAAA,EAAD,CACEjG,MAAOyC,EAAK6B,WACZrE,MAAM,cACNG,SAAU,SAACkE,GAAD,OAAgBwB,EAAO,2BAAKrD,GAAN,IAAY6B,WAAYA,QAE1D,kBAAChC,EAAA,EAAD,CACEtC,MAAOyC,EAAKsB,OACZ9D,MAAM,SACNG,SAAU,SAAC2D,GAAD,OAAY+B,EAAO,2BAAKrD,GAAN,IAAYsB,OAAQA,QAElD,kBAACzB,EAAA,EAAD,CACEtC,MAAOyC,EAAKkB,IACZ1D,MAAM,UACNC,KAAMgG,IACN9F,SAAU,SAACuD,GAAD,OAASmC,EAAO,2BAAKrD,GAAN,IAAYkB,IAAKA,QAE5C,kBAACrB,EAAA,EAAD,CACEtC,MAAOyC,EAAK+B,QACZvE,MAAM,UACNC,KAAMqE,IACNnE,SAAU,SAACoE,GAAD,OAAasB,EAAO,2BAAKrD,GAAN,IAAY+B,QAASA,QAEpD,kBAAC2B,EAAA,EAAD,CACEnG,MAAOyC,EAAKoC,YACZ5E,MAAM,OACNC,KAAMkG,IACNhG,SAAU,SAACyE,GAAD,OACRiB,EAAO,2BAAKrD,GAAN,IAAYoC,YAAaA,WAUrCjB,EAAgB7C,IAAOQ,IAAV,KAMbsC,EAAO9C,IAAOQ,IAAV,KACC,qBAAGP,MAAkBC,KAAKC,S,omBCWtBmF,IA5EI,SAAC,GAA6B,IAA3B5D,EAA0B,EAA1BA,KAAM6D,EAAoB,EAApBA,MAAoB,EAClB5D,mBAAkB4D,GADA,mBACvCC,EADuC,KAC7BC,EAD6B,OAElB9D,mBAAeD,GAFG,mBAEvCgE,EAFuC,KAE9BC,EAF8B,OAGhBhE,oBAAkB,GAHF,mBAGvCiE,EAHuC,KAG5BC,EAH4B,OAIFlE,oBAAkB,GAJhB,mBAIvCmE,EAJuC,KAIrBC,EAJqB,OAKhBpE,mBAAiB,IALD,mBAKvCqE,EALuC,KAK9BC,EAL8B,OAMFtE,oBAAkB,GANhB,mBAMvCuE,EANuC,KAMvBC,EANuB,KAO1CC,EAAUC,cAMdrE,qBAAU,WACJ0D,IAAYhE,GACdyE,GAAkB,KAEnB,CAACT,EAAShE,IAkBb,OACE,oCACGoE,GACC,kBAACQ,GAAA,EAAD,CACEN,QAAO,iBAAYtE,EAAKyB,KAAjB,KACPhE,KAAMoH,IACNC,aAAc,SACdC,cAAe,WACbC,YAAO,QAAShF,EAAKiF,IACrBP,EAAQQ,UAEVC,UAAW,OACXC,WAAY,WACVf,GAAgB,MAItB,kBAACgB,GAAD,KACE,kBAACC,EAAA,EAAD,CAAY7H,KAAM8H,IAAaC,OAAQ,kBAAMd,EAAQQ,YACrD,kBAAC,KAAD,CAAY1C,KAAMsB,EAAS2B,YACzB,kBAAC,KAAD,CAAYrG,QAAS,kBAAM2E,GAAQ,KAAnC,QACA,kBAAC,KAAD,CAAa3E,QAAS,kBAAM2E,GAAQ,KAApC,SAEDS,GAAkB,kBAAC,GAAD,CAAM/G,KAAMoH,IAAuBa,MAAO,qBAC5D5B,GACC,oCACE,kBAAC7E,EAAA,EAAD,CAAYG,QAAS,kBA1CZ,SAACuG,EAAmB3B,GACrC4B,YAAmBD,EAAW3B,GAAS,SAAC6B,GAClCA,EAAS,GACXpB,GAAkB,GAClBF,EAAW,qBACXJ,GAAS,KAETI,EAAW,yBACXJ,GAAS,IAEX2B,YAAW,WACT3B,GAAS,KACR,QA8B8B4B,CAAW,QAAS/B,IAAUvG,KAAMuI,MAC/D,kBAAC/G,EAAA,EAAD,CAAYG,QAAS,WApD7BiF,GAAgB,IAoDiC5G,KAAMwI,OAC9C3B,GAAWJ,GAAa,kBAACgC,GAAD,KAAU5B,KAIxCR,EACC,kBAAC,EAAD,CAAc9D,KAAMgE,EAASX,OAAQ,SAAC9F,GAAD,OAAW0G,EAAS1G,MAEzD,kBAAC,EAAD,CAAUyC,KAAMgE,MAtExB,IA8EMqB,GAAS/G,IAAOQ,IAAV,MACD,qBAAGP,MAAkBC,KAAKC,SAS/ByH,GAAU5H,IAAOQ,IAAV,MASPhB,GAAOQ,YAAOK,IAAPL,CAAH,MAMC,qBAAGC,MAAkBK,KAAKC,c,yIClCtBsH,EA/DG,SAAC,GAA4B,IAA1BnI,EAAyB,EAAzBA,KAAMyD,EAAmB,EAAnBA,KAAmB,EACdxB,oBAAkB,GADJ,mBACrCmG,EADqC,KAC5BC,EAD4B,OAEVpG,oBAAkB,GAFR,mBAErCqG,EAFqC,KAEvBC,EAFuB,KAI5CjG,qBAAU,WACRkG,YAA8BxI,EAAO,IAAK,OAAQyD,GAAMgF,MAAK,SAACC,GAC5DH,EAAUG,EAAQ,GAClBL,GAAW,QAEZ,CAACrI,EAAMyD,IA6CV,OACE,oCACG2E,GAAW,kBAAC,IAAD,OACVA,IAAYE,GAAgB,kBAAC,IAAD,OAC5BF,GAAWE,GAAgB,oCA/Cd,SAACtI,GAClB,OAAQA,GACN,IAAK,QACH,OAAO,kBAAC,IAAD,CAAiBP,KAAMkJ,MAChC,IAAK,OACH,OAAO,kBAAC,IAAD,MACT,IAAK,OACH,OAAO,kBAAC,IAAD,MACT,IAAK,OACH,OAAO,kBAAC,IAAD,MACT,IAAK,QACH,OAAO,kBAAC,IAAD,MACT,IAAK,YACH,OAAO,kBAAC,IAAD,MACT,IAAK,OACH,OAAO,kBAAC,IAAD,CAAiBlJ,KAAMmJ,MAChC,IAAK,UACH,OAAO,kBAAC,IAAD,CAAiBnJ,KAAMoJ,MAChC,IAAK,YACH,OAAO,kBAAC,IAAD,MACT,IAAK,WACH,OAAO,kBAAC,IAAD,MACT,IAAK,QACH,OAAO,kBAAC,IAAD,MACT,IAAK,QACH,OAAO,kBAAC,IAAD,MACT,IAAK,QACH,OAAO,kBAAC,IAAD,MACT,IAAK,WACH,OAAO,kBAAC,IAAD,CAAiBpJ,KAAMqJ,MAChC,IAAK,MACH,OAAO,kBAAC,IAAD,MACT,IAAK,cACH,OAAO,kBAAC,IAAD,CAAiBrJ,KAAMsJ,OAChC,IAAK,OACH,OAAO,kBAAC,IAAD,MACP,IAAK,QACH,OAAO,kBAAC,IAAD,MACX,QACE,MAAO,IAQuBC,CAAWhJ,M,ysBC+BlCmE,IA/GM,SAAC,GAAsB,IAApBzC,EAAmB,EAAnBA,KAAmB,EACDO,qBADC,mBAClCgH,EADkC,KACpBC,EADoB,KAErCxC,EAAUC,cAERwC,EAAM,SAACC,EAAaC,EAAkBC,GAC1C,OAAOF,EAAIG,OAAO,EAAGF,GAAYD,EAAIG,OAAOD,EAAS,IAGjDE,EAAa3G,uBACjB,SAACnB,GACC,QAAaoB,IAATpB,EAAoB,CACtB,GAAIA,EAAK+H,SAAS,OAAS/H,EAAK+H,SAAS,MAAO,CAC9C,IAAMC,EAAQhI,EAAKiI,MAAM,MACrBC,EAAwB,GAkB5B,OAjBAF,EAAMG,SAAQ,SAACC,EAAcC,GAC3B,GAAID,EAAKL,SAAS,MAAO,CACvB,IAAMO,EAAqBF,EAAKH,MAAM,MAChCM,EAAsBD,EAAS,GAAGL,MAAM,KACxCO,EAAe,IAAMD,EAAU,GAAK,gBAAkBA,EAAU,GACtEL,EAAeO,KACb,kBAACC,EAAD,CAAUC,IAAKN,GACb,kBAACO,EAAD,CAAMlJ,QAAS,kBAAMsF,EAAQyD,KAAKD,KAChC,kBAAC,EAAD,CAAWlK,KAAMiK,EAAU,GAAIxG,KAAMwG,EAAU,KADjD,IACyDA,EAAU,IAEnE,kBAACG,EAAD,KAAWJ,EAAS,UAIX,KAATF,GAAaF,EAAeO,KAAK,kBAACC,EAAD,CAAUC,IAAKN,GAAQD,OAGzD,oCAAGF,GAEV,OAAO,kBAACQ,EAAD,KAAW1I,MAIxB,CAACgF,IAGG6D,EAAc1H,uBAClB,SAAC2H,GACC,GAAIA,EAASf,SAAS,aAAc,CAClC,IAAMgB,EAAkB/I,EAAKiI,MAAM,aAC7Be,EAAsBD,EAAM,GAAGd,MAAM,MACvCgB,GAAS,EACb,OACE,oCACGnB,EAAWiB,EAAM,IAClB,+BACE,+BACGC,EAAUE,KAAI,SAACC,EAAad,GAC3B,GAAIc,EAAIpB,SAAS,KAAM,CACrB,GAAIkB,EAAQ,CACVA,GAAS,EACT,IAAMG,EAAQD,EAAIlB,MAAM,KACxB,OACE,wBAAIU,IAAKN,GACNe,EAAMF,KAAI,SAACG,EAAchB,GACxB,OAAO,kBAACiB,EAAD,CAAeX,IAAKN,GAAQgB,OAKzC,IAAMD,EAAQD,EAAIlB,MAAM,KACxB,OACE,wBAAIU,IAAKN,GACNe,EAAMF,KAAI,SAACG,EAAchB,GACxB,OAAO,kBAACkB,EAAD,CAAWZ,IAAKN,GAAQP,EAAWuB,QAMlD,OAAO,0CAKdvB,EAAWiB,EAAM,KAItB,OAAOjB,EAAWgB,KAGtB,CAAC9I,EAAM8H,IAGH0B,EAAarI,uBACjB,SAAC2H,GACC,KAAOA,EAASf,SAAS,OAAO,CAC9B,IAAMJ,EAAWmB,EAASW,QAAQ,MAC5B7B,EAASkB,EAASW,QAAQ,MAAQ,EACxCX,EAAWrB,EAAIqB,EAAUnB,EAAUC,GAErC,OAAOiB,EAAYC,KAErB,CAACD,IAUH,OAPAjI,qBAAU,WACR,QAAaQ,IAATpB,EAAoB,CACtB,IAAIuH,EAAeiC,EAAWxJ,GAC9BwH,EAAgBD,MAEjB,CAACvH,EAAMgF,EAASwE,IAEZ,oCAAGjC,IA5GZ,IAiHMqB,EAAOhK,IAAO8K,KAAV,KAEY,qBAAG7K,MAAkBC,KAAK6K,uBAGrC,qBAAG9K,MAAkBC,KAAKE,mBAO/B0J,EAAW9J,IAAO8K,KAAV,KAIRJ,EAAgB1K,IAAOgL,GAAV,KACG,qBAAG/K,MAAkBQ,MAAML,mBACtC,qBAAGH,MAAkBQ,MAAMN,SAKhCwK,EAAY3K,IAAOiL,GAAV,KACO,qBAAGhL,MAAkBQ,MAAML,mBACtC,qBAAGH,MAAkBQ,MAAMN,U,uHCYzB+K,G,MAAU,SAAOf,EAA0BxD,GAAW,IAAD,EACpChF,oBAAkB,GADkB,mBACzDwJ,EADyD,KACjDC,EADiD,KAE1DC,EAAU9I,uBAAY,SAAC+I,EAAqBpE,GAChD,OAAQA,EAAOxH,MACb,IAAK,WACH,MAAO,CAACwH,EAAOjD,MAAM,OAAOzB,GAC9B,IAAK,QACH,MAAO,MAACA,GAAW,OAAOA,GAC5B,IAAK,QACH,MAAO,MAACA,GAAW,EAAO0E,EAAOqE,OACnC,QACE,MAAO,MAAC/I,GAAW,OAAMA,MAE5B,IAb6D,EAetCgJ,qBAAWH,EAAS,MAAC7I,GAAW,OAAMA,IAfA,mBAezD8I,EAfyD,KAelDG,EAfkD,KA8ChE,OA7BAzJ,qBAAU,WACR,GAAImJ,EAAQ,CAERhB,EACGuB,IAAI/E,GACJwB,MAAK,SAAClE,GAEHwH,OADWjJ,IAATyB,EACO,CACPvE,KAAM,WACNuE,QAGO,CACPvE,KAAM,aAIXiM,OAAM,SAACJ,GACNE,EAAS,CACP/L,KAAM,QACN6L,aAKRH,GAAU,MAEX,CAACjB,EAAOxD,EAAIwE,IAERG,IAGIM,EAAgB,SAAOzB,EAA0B0B,EAAcC,GAAuB,IAAD,EACpEnK,oBAAkB,GADkD,mBACzFwJ,EADyF,KACjFC,EADiF,KAE1FC,EAAU9I,uBAAY,SAAC+I,EAAqBpE,GAChD,OAAQA,EAAOxH,MACb,IAAK,WACH,MAAO,CAACwH,EAAOjD,MAAM,OAAOzB,GAC9B,IAAK,QACH,MAAO,MAACA,GAAW,OAAOA,GAC5B,IAAK,QACH,MAAO,MAACA,GAAW,EAAO0E,EAAOqE,OACnC,QACE,MAAO,MAAC/I,GAAW,OAAMA,MAE5B,IAb6F,EAetEgJ,qBAAWH,EAAS,MAAC7I,GAAW,OAAMA,IAfgC,mBAezF8I,EAfyF,KAelFG,EAfkF,KAgDhG,OA/BAzJ,qBAAU,WACR,GAAImJ,EAAQ,CAERhB,EACG4B,MAAMF,GACNG,OAAOF,GACPG,QACA9D,MAAK,SAAClE,GAEHwH,OADWjJ,IAATyB,EACO,CACPvE,KAAM,WACNuE,QAGO,CACPvE,KAAM,aAIXiM,OAAM,SAACJ,GACNE,EAAS,CACP/L,KAAM,QACN6L,aAKRH,GAAU,MAEX,CAACjB,EAAO0B,EAAMC,EAAWX,IAErBG,I,udC3OMtE,IARI,SAAC,GAAyC,IAAvC7H,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,UAAW8H,EAAqB,EAArBA,OACrC,OACE,kBAACgF,EAAD,CAAMpL,QAASoG,GACb,kBAAC1H,EAAD,CAAML,KAAMA,EAAMC,UAAWA,MAOnC,IAAMI,EAAOQ,YAAOK,IAAPL,CAAH,KAMC,qBAAGC,MAAkBK,KAAKC,aAExB,qBAAGN,MAAkBS,QAAQP,SAIpC+L,EAAOlM,IAAOQ,IAAV,KAEU,qBAAGP,MAAkBS,QAAQQ,W,o4BCnC1C,IAAMiL,EAAanM,IAAOQ,IAAV,KAIX,qBAAGP,MAAkBS,QAAQQ,UACxB,qBAAGjB,MAAkBS,QAAQQ,UASjC,qBAAGjB,MAAkBS,QAAQY,cAI7B8K,EAAcpM,YAAOmM,EAAPnM,CAAH,KAUXqM,EAAarM,IAAOQ,IAAV,KAEX,qBAAGP,MAAkBS,QAAQQ,UAE9B,qBAAGjB,MAAkBS,QAAQP,QAEpCgM,GACoB,SAAChI,GACnB,MAAmB,SAAfA,EAAMD,KACD,qBAAGjE,MAAkBS,QAAQN,iBAE7B,qBAAGH,MAAkBC,KAAKE,mBAKrCgM,GACoB,SAACjI,GACnB,MAAmB,SAAfA,EAAMD,KACD,qBAAGjE,MAAkBS,QAAQN,iBAE7B,qBAAGH,MAAkBC,KAAKE,qB,iSCkC1B4D,IArEG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,KAAmB,EACpBvC,mBAAiB,IADG,mBACrCwB,EADqC,KAC/BmJ,EAD+B,OAEpB3K,qBAFoB,mBAErC4K,EAFqC,KAE/BC,EAF+B,OAGlB7K,qBAHkB,mBAGrC4J,EAHqC,KAG9BkB,EAH8B,KAyD5C,OApDAzK,qBAAU,WACR,QAAaQ,IAAT+J,EAAoB,CACtB,IAAMG,ECpBoB,WAI9B,IAHA,IAJwBC,EAAaC,EAIjCC,EAAW,GACTC,EACJ,iEACOC,EAAI,EAAGA,EAAI,GAAIA,IACtBF,GAAYC,GARUH,EAQkB,EARLC,EAQQE,EAAWE,OAAS,EAP1DC,KAAKC,MAAMD,KAAKE,UAAYP,EAAMD,EAAM,IAAMA,IASrD,OAAOE,EDacO,GACXC,EAAU,IAAIC,IAAKZ,EAAU,CACjCa,KAAM,wBACNC,QAAQ,IAEVC,QAAQC,IAAIL,GACZA,EAAQM,GAAG,cAAc,SAAUC,GACjCA,EAAKD,GAAG,SAAS,SAAUE,GACzBpB,EAASoB,MAEXD,EAAKD,GAAG,QAAQ,WACdC,EAAKhM,KAAKqC,SAGduI,EAAQa,MAET,CAACpJ,EAAMsI,IAEVvK,qBAAU,gBACKQ,IAAT+J,IACEA,EAAKuB,eAAiBvB,EAAKwB,WAC7BxB,EAAKyB,YAEM,QAAT9J,GAAkC,kBAATD,EAC3BgK,YAAiBhK,GAAMkE,MAAK,SAAC9F,GAC3BoL,QAAQC,IAAIrL,GACZiK,EAAQrI,GACRsI,EAAKoB,GAAG,cAAc,SAAUC,GAC9BA,EAAKD,GAAG,SAAS,SAAUE,GACzBpB,EAASoB,MAEXD,EAAKD,GAAG,QAAQ,WACdC,EAAKhM,KAAKS,YAIE,SAAT6B,GAAmC,kBAATD,IACnCqI,EAAQrI,EAAKd,MACboJ,EAAKoB,GAAG,cAAc,SAAUC,GAC9BA,EAAKD,GAAG,SAAS,SAAUE,GACzBpB,EAASoB,MAEXD,EAAKD,GAAG,QAAQ,WACdC,EAAKhM,KAAKqC,aAKjB,CAACA,EAAMC,EAAMqI,IAGd,yCACY/J,IAAT+J,GAAkC,OAAZA,EAAK5F,IAC1B,oCACE,kBAACpF,EAAA,EAAD,CAAatC,MAAOsN,EAAK5F,GAAIzH,MAAK,eAAUiE,EAAV,QAAsB9D,SAAU,gBAGrEkM,GAAS,kBAAC/L,EAAD,CAAML,KAAM+O,QAhE5B,IAuEM1O,EAAOQ,YAAOK,IAAPL,CAAH,KAKC,qBAAGC,MAAkBK,KAAKC,c,6mBEvDtB+F,IArBA,SAAC,GAOD,IANbN,EAMY,EANZA,QACA7G,EAKY,EALZA,KACAqH,EAIY,EAJZA,aACAC,EAGY,EAHZA,cACAI,EAEY,EAFZA,UACAC,EACY,EADZA,WAEA,OACE,kBAACqH,EAAD,KACE,kBAACvG,EAAD,KACGzI,EAAO,kBAACK,EAAD,CAAML,KAAMA,IAAW,GADjC,IACsC6G,GAEtC,kBAACoI,EAAD,KACE,kBAAC,IAAD,CAAYhN,KAAMyF,EAAW/F,QAASgG,IACtC,kBAAC,IAAD,CAAY1F,KAAMoF,EAAc1F,QAAS2F,OAQjD,IAAM0H,EAAgBnO,IAAOQ,IAAV,KAOG,qBAAGP,MAAkBC,KAAKE,mBACrC,qBAAGH,MAAkBC,KAAKC,SAG/ByH,EAAU5H,IAAOQ,IAAV,KAKP4N,EAAYpO,IAAOQ,IAAV,KAIThB,EAAOQ,YAAOK,IAAPL,CAAH,M,m8BCXKkF,IAhCK,SAAC,GAON,IANbjG,EAMY,EANZA,MACA2N,EAKY,EALZA,IACA1N,EAIY,EAJZA,MACAC,EAGY,EAHZA,KACAC,EAEY,EAFZA,UACAC,EACY,EADZA,SAEA,OACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACGJ,EAAO,kBAACK,EAAD,CAAML,KAAMA,EAAMC,UAAWA,IAAgB,GADvD,IAC4DF,GAE3D0N,GACC,kBAACnN,EAAD,CACEC,KAAK,SACLkN,IAAKA,EACL3N,MAAOA,EACPI,SAAU,SAACO,GAAD,OAAOP,GAAUO,EAAEC,OAAOZ,WAGtC2N,GACA,kBAACnN,EAAD,CACEC,KAAK,SACLT,MAAOA,EACPI,SAAU,SAACO,GAAD,OAAOP,GAAUO,EAAEC,OAAOZ,YAS9C,IAAMK,EAAQU,IAAOd,MAAV,KACA,qBAAGe,MAAkBC,KAAKC,SACf,qBAAGF,MAAkBC,KAAKE,mBAe1CZ,EAAOQ,YAAOK,IAAPL,CAAH,KAMC,qBAAGC,MAAkBK,KAAKC,aAG/BhB,EAAYS,IAAOQ,IAAV,KAITf,EAAQO,IAAOS,MAAV,KAOW,qBAAGR,MAAkBQ,MAAML,mBACtC,qBAAGH,MAAkBQ,MAAMN,U,k/BC7DvBiF,IAXG,SAAC,GAAiE,IAA/DnG,EAA8D,EAA9DA,MAAOC,EAAuD,EAAvDA,MAAOgC,EAAgD,EAAhDA,OAAQ/B,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,SAC1D,OACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACGJ,EAAO,kBAACK,EAAD,CAAML,KAAMA,EAAMC,UAAWA,IAAgB,GADvD,IAC4DF,GAE5D,kBAACO,EAAD,CAAOyB,OAAQA,EAAQjC,MAAOA,EAAOI,SAAU,SAACO,GAAD,OAAOP,EAASO,EAAEC,OAAOZ,YAO9E,IAAMK,EAAQU,IAAOd,MAAV,KACA,qBAAGe,MAAkBC,KAAKC,SACf,qBAAGF,MAAkBC,KAAKE,mBAe1CZ,EAAOQ,YAAOK,IAAPL,CAAH,KAMC,qBAAGC,MAAkBK,KAAKC,aAG/BhB,EAAYS,IAAOQ,IAAV,KAWTf,EAAQO,IAAOqO,SAAV,KAKC,gBAAGnN,EAAH,EAAGA,OAAH,YAA4BsB,IAAXtB,EAAuBA,EAAS,UAC7C,gBAAGA,EAAH,EAAGA,OAAH,YAA4BsB,IAAXtB,EAAuBA,EAAS,UAC3C,qBAAGjB,MAAkBQ,MAAML,mBACtC,qBAAGH,MAAkBQ,MAAMN,U,+gDCavB6E,IArES,SAAC,GAOV,IANbC,EAMY,EANZA,YACAhG,EAKY,EALZA,MACAC,EAIY,EAJZA,MACAC,EAGY,EAHZA,KACAC,EAEY,EAFZA,UACAC,EACY,EADZA,SACY,EACWsC,mBAA4BsD,GAA5CqJ,EADK,sBAEkB3M,mBAAoB,IAFtC,mBAEL4M,EAFK,KAEIC,EAFJ,OAGkC7M,mBAAoB,IAHtD,mBAGL8M,EAHK,KAGYC,EAHZ,KAKNC,EAAY,uCAAG,WAAOL,GAAP,eAAAM,EAAA,6DACfC,EAAiC,GACrCP,EAAa/E,SAAQ,SAACY,GACpB0E,EAAShF,KAAKoE,YAAiB9D,OAHd,SAKG2E,QAAQC,IAAIF,GALf,cAMXtF,SAAQ,SAACyF,GACfR,GAAW,SAACS,GAAD,OAAOA,EAAEC,OAAOF,SAPV,2CAAH,sDAWlBhN,qBAAU,WACoB,kBAAjBsM,GACTa,YAAUb,GAAc,SAACrK,GACvBuK,EAAWvK,MAGXqK,aAAwBc,OAASd,EAAatB,OAAS,GACzD2B,EAAaL,KAEd,CAACA,IAEJ,IAAMe,EAAW9M,uBACf,SAAC+M,GACCjQ,EAASiQ,GACT,IAAIC,EAAahB,EAAQiB,QAAO,SAACC,GAC/B,OAAOA,EAAOtM,KAAKgG,SAASmG,MAE9BZ,EAAmBa,KAErB,CAAChB,EAASlP,IAGZ,OACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACGJ,EAAO,kBAACK,EAAD,CAAML,KAAMA,EAAMC,UAAWA,IAAgB,GADvD,IAC4DF,GAE5D,kBAACO,EAAD,CACEC,KAAK,OACLT,MAAOA,EACPI,SAAU,SAACO,GAAD,OAAOyP,EAASzP,EAAEC,OAAOZ,UAErC,kBAACyQ,EAAD,KACGjB,EAAgBzB,OAAS,GACxByB,EAAgBnE,KAAI,SAACqF,EAAKlG,GACxB,OACE,kBAACmG,EAAD,CAAQ7F,IAAKN,EAAO3I,QAAS,SAAClB,GAAD,OAAOyP,EAASM,EAAIxM,QAC9CwM,EAAIxM,YAWrB,IAAM7D,EAAQU,IAAOd,MAAV,KACA,qBAAGe,MAAkBC,KAAKC,SACf,qBAAGF,MAAkBC,KAAKE,mBAiB1CZ,EAAOQ,YAAOK,IAAPL,CAAH,KAMC,qBAAGC,MAAkBK,KAAKC,aAG/BhB,EAAYS,IAAOQ,IAAV,KAITkP,EAAU1P,IAAOQ,IAAV,KAgBPoP,EAAS5P,IAAOQ,IAAV,KAGD,qBAAGP,MAAkBQ,MAAMN,SAChB,qBAAGF,MAAkBQ,MAAML,mBAK3CX,EAAQO,IAAOS,MAAV,KAMW,qBAAGR,MAAkBQ,MAAML,mBACtC,qBAAGH,MAAkBQ,MAAMN,QAIxBuP,I,iBC7Jd,SAASG,EAAoBC,GAC5B,IAAIlQ,EAAI,IAAImQ,MAAM,uBAAyBD,EAAM,KAEjD,MADAlQ,EAAEoQ,KAAO,mBACHpQ,EAEPiQ,EAAoBI,KAAO,WAAa,MAAO,IAC/CJ,EAAoBK,QAAUL,EAC9BM,EAAOC,QAAUP,EACjBA,EAAoBlJ,GAAK","file":"static/js/12.6555eebd.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: boolean;\n  label: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: boolean) => void;\n}\n\nconst CheckField = ({ value, label, icon, transform, onChange }: $Props) => {\n  return (\n    <Field>\n      <LabelText>\n        {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n      </LabelText>\n      <Input\n        type=\"checkbox\"\n        defaultChecked={value}\n        onChange={(e) => onChange(e.target.checked)}\n      ></Input>\n      <Checkmark></Checkmark>\n    </Field>\n  );\n};\n\nexport default CheckField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: 38px;\n  line-height: 38px;\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n  user-select: none;\n  position: relative;\n\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1;\n`;\n\nconst Checkmark = styled.div`\n  flex: 1 1;\n  height: 30px;\n  min-width: 30px;\n  max-width: 30px;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin-left: 5px;\n  border-radius: 5px;\n\n  &:after {\n    content: \"\";\n    display: none;\n  }\n\n  &:after {\n    width: 5px;\n    height: 10px;\n    border: solid white;\n    border-width: 0 3px 3px 0;\n    -webkit-transform: rotate(45deg);\n    -ms-transform: rotate(45deg);\n    transform: rotate(45deg);\n    margin-left: 6px;\n    margin-top: 2px;\n  }\n`;\n\nconst Input = styled.input`\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n  left: 0;\n  bottom 0;\n\n  &:checked ~ ${Checkmark} {\n    background-color: ${({ theme }) => theme.main.highlight};\n    color: ${({ theme }) => theme.buttons.color};\n  }\n\n  &:checked ~ ${Checkmark}:after {\n    display: block;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  icon: IconDefinition;\n  floatLeft?: boolean;\n  disabled?: boolean;\n  transform?: string | Transform;\n  onClick: (() => void) | ((e: any) => void);\n}\n\nconst IconButton = ({ icon, floatLeft, disabled, transform, onClick }: $Props) => {\n  return (\n    <>\n      {!disabled && (\n        <SimpleButton left={floatLeft} onClick={onClick}>\n          <Icon icon={icon} transform={transform} />\n        </SimpleButton>\n      )}\n      {disabled && (\n        <DisabledSimpleButton>\n          <Icon icon={icon} transform={transform} />\n        </DisabledSimpleButton>\n      )}\n    </>\n  );\n};\n\nexport default IconButton;\n\ntype FloatMpde = {\n  left?: boolean;\n};\n\nconst SimpleButton = styled.div<FloatMpde>`\n  color: ${({ theme }) => theme.buttons.color};\n  background-color: ${({ theme }) => theme.buttons.backgroundColor};\n  cursor: pointer;\n\n  font-size: 16px;\n  overflow: hidden;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: ${({ left }) => (left ? \"left\" : \"right\")};\n  padding: 10px;\n  margin: 5px;\n  border-radius: 10px;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n\n  transition: color 0.2s;\n\n  &:hover {\n    color: white;\n  }\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst DisabledSimpleButton = styled(SimpleButton)`\n  color: ${({ theme }) => theme.buttons.backgroundColor};\n  background-color: ${({ theme }) => theme.buttons.color};\n  cursor: not-allowed;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  text: string;\n  disabled?: boolean;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onClick: () => void;\n}\n\nconst TextButton = ({ text, icon, transform, disabled, onClick }: $Props) => {\n  return (\n    <SimpleButton onClick={onClick} disabled={disabled}>\n      {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {text}\n    </SimpleButton>\n  );\n};\n\nexport default TextButton;\n\nconst SimpleButton = styled.button`\n  color: ${({ theme }) => theme.buttons.color};\n  background-color: ${({ theme }) => theme.buttons.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: right;\n  padding: 10px;\n  margin: 5px;\n  border-radius: 10px;\n  cursor: pointer;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n  box-sizing: content-box;\n  border: none;\n\n  transition: color 0.2s;\n\n  &:hover {\n    color: ${({ theme }) => theme.buttons.hoverColor};\n  }\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.buttons.disabled};\n  }\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n  margin-right: 5px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: string;\n  label: string;\n  placeholder?: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: string) => void;\n}\n\nconst StringField = ({ value, label, placeholder, icon, transform, onChange }: $Props) => (\n  <Field>\n    <LabelText>\n      {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n    </LabelText>\n    <Input\n      type=\"text\"\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      placeholder={placeholder}\n    ></Input>\n  </Field>\n);\n\nexport default StringField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: 38px;\n  line-height: 30px;\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1 auto;\n`;\n\nconst Input = styled.input`\n  flex: 3 1 auto;\n  height: 38px;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin-left: 5px;\n  border-radius: 5px;\n  width: 0;\n  min-width: 100px;\n`;\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport Item from \"../../../../data/Item\";\nimport Gear from \"../../../../data/Gear\";\nimport { reciveAllFiltered } from \"../../../../services/DatabaseService\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLink, faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport FormatedText from \"../../../general_elements/FormatedText\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport P2PSender from \"../../../p2p/P2PSender\";\n\ninterface $Props {\n  item: Item;\n}\n\nconst ItemView = ({ item }: $Props) => {\n  const [send, setSend] = useState<boolean>(false);\n  const [itemBase, setItemBase] = useState<Gear>();\n\n  useEffect(() => {\n    reciveAllFiltered(\n      \"gears\",\n      [{ fieldName: \"name\", value: item.base, sort: 0 }],\n      (results: any[]) => {\n        setItemBase(results[0]);\n      }\n    );\n  }, [item]);\n\n  const hasAttunment = useCallback(() => {\n    if (item !== undefined) {\n      if (!!item.attunment) {\n        return <div className=\"icon\">A</div>;\n      }\n    }\n    return \"\";\n  }, [item]);\n\n  const getPicture = useCallback(() => {\n    if (item !== undefined) {\n      if (item.pic === \"\" || item.pic === null) {\n        return \"\";\n      }\n      return item.pic;\n    }\n    return \"\";\n  }, [item]);\n\n  return (\n    <CenterWrapper>\n      <View>\n        <Rarity rarity={item.rarity}>{item.rarity}</Rarity>\n\n        <Flag>\n          <b>{hasAttunment()}</b>\n        </Flag>\n\n        {getPicture() !== \"\" ? (\n          <ImageName>\n            <Image pic={getPicture()}></Image>\n            <b>{item.name}</b>\n          </ImageName>\n        ) : (\n          <Name>\n            <b>{item.name}</b>\n          </Name>\n        )}\n\n        <PropWrapper>\n          <Prop>{item.type}</Prop>\n          <Prop>+{item.magicBonus}</Prop>\n          <Prop>\n            <Icon icon={faLink} />\n            {item.sources}\n          </Prop>\n          {item.base && itemBase && (\n            <>\n              <Prop>{item.base}</Prop>\n              <Prop>{itemBase.damage}</Prop>\n              <Prop>{itemBase.properties}</Prop>\n            </>\n          )}\n          <Text>\n            <FormatedText text={item.description} />\n          </Text>\n        </PropWrapper>\n        <PropWrapper>\n            {!send && (\n              <TextButton\n                text={`Send ${item.name}`}\n                icon={faPaperPlane}\n                onClick={() => setSend(true)}\n              />\n            )}\n            {!!send && <P2PSender data={item} mode={\"THIS\"} />}\n        </PropWrapper>\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default ItemView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\ntype RarityType = {\n  rarity?: string;\n};\n\nconst Rarity = styled.div<RarityType>`\n  height: auto;\n  float: left;\n  padding: 5px 10px 7px 10px;\n  line-height: 30px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  color: ${(props) => {\n    const rarity = props.rarity?.toLowerCase().trim();\n    if (rarity === \"artifact\") {\n      return \"#f74646\";\n    } else if (rarity === \"legendary\") {\n      return \"#f7ce46\";\n    } else if (rarity === \"very rare\") {\n      return \"#8000ff\";\n    } else if (rarity === \"rare\") {\n      return \"#4675f7\";\n    } else if (rarity === \"uncommon\") {\n      return \"#4dbd56\";\n    } else {\n      return \"inherit\";\n    }\n  }};\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: var(--card-title-color);\n  text-align: center;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst ImageName = styled.div`\n  height: 30px;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: var(--card-title-color);\n  text-align: center;\n  border-radius: 50px 5px 5px 50px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst Prop = styled.div`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px;\n  float: left;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: calc(100% - 30px);\n  margin: 10px 5px 5px 5px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst Flag = styled.div`\n  height: auto;\n  float: left;\n  padding: 5px 10px 7px 10px;\n  margin-left: 5px;\n  font-size: 12px;\n  line-height: 30px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\ninterface $ImageProps {\n  pic: string;\n}\n\nconst Image = ({ pic }: $ImageProps) => {\n  const style = {\n    backgroundImage: `url(${pic})`,\n    backgroundPosition: \"center\",\n    backgroundSize: \"cover\",\n    backgroundRepeat: \"no-repeat\",\n  };\n\n  if (pic !== \"\") {\n    return <ImageElm style={style}></ImageElm>;\n  } else {\n    return <Empty />;\n  }\n};\n\nconst ImageElm = styled.div`\n  margin: -10px 5px -10px -10px;\n  height: 47px;\n  width: 47px;\n  float: left;\n  border-radius: 100px;\n  border: 3px solid ${({ theme }) => theme.main.highlight};\n  background-color: white;\n  overflow: hidden;\n`;\nconst Empty = styled.div``;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Item from \"../../../../data/Item\";\n\nimport StringField from \"../../../form_elements/StringField\";\nimport TextField from \"../../../form_elements/TextField\";\nimport CheckField from \"../../../form_elements/CheckField\";\nimport NumberField from \"../../../form_elements/NumberField\";\n\nimport {\n  faLink,\n  faBookOpen,\n  faImage,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport AutoStringField from \"../../../form_elements/AutoStringField\";\n\ninterface $Props {\n  item: Item;\n  onEdit: (value: Item) => void;\n}\n\nconst ItemEditView = ({ item, onEdit }: $Props) => {\n  return (\n    <CenterWrapper>\n      <View>\n        <StringField\n          value={item.name}\n          label=\"Name\"\n          onChange={(name) => onEdit({ ...item, name: name })}\n        />\n        <AutoStringField\n          optionTable={\"gears\"}\n          value={item.base}\n          label=\"Base Gear\"\n          onChange={(base) => onEdit({ ...item, base: base })}\n        />\n        <CheckField\n          value={!!item.attunment}\n          label=\"Attunment\"\n          onChange={(attunment) => onEdit({ ...item, attunment: attunment ? 1 : 0 })}\n        />\n        <StringField\n          value={item.type}\n          label=\"Type\"\n          onChange={(type) => onEdit({ ...item, type: type })}\n        />\n        <NumberField\n          value={item.magicBonus}\n          label=\"Magic Bonus\"\n          onChange={(magicBonus) => onEdit({ ...item, magicBonus: magicBonus })}\n        />\n        <StringField\n          value={item.rarity}\n          label=\"Rarity\"\n          onChange={(rarity) => onEdit({ ...item, rarity: rarity })}\n        />\n        <StringField\n          value={item.pic}\n          label=\"Picture\"\n          icon={faImage}\n          onChange={(pic) => onEdit({ ...item, pic: pic })}\n        />\n        <StringField\n          value={item.sources}\n          label=\"Sources\"\n          icon={faLink}\n          onChange={(sources) => onEdit({ ...item, sources: sources })}\n        />\n        <TextField\n          value={item.description}\n          label=\"Text\"\n          icon={faBookOpen}\n          onChange={(description) =>\n            onEdit({ ...item, description: description })\n          }\n        />\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default ItemEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  padding: 5px;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\n\nimport {\n  faArrowLeft,\n  faSave,\n  faTrash,\n  faExclamationTriangle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport ItemView from \"./ItemView\";\nimport ItemEditView from \"./ItemEditView\";\nimport BackButton from \"../../../form_elements/BackButton\";\nimport Item from \"../../../../data/Item\";\nimport IconButton from \"../../../form_elements/IconButton\";\nimport { remove, updateWithCallback } from \"../../../../services/DatabaseService\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Dialog from \"../../../general_elements/Dialog\";\nimport { EditToggle, ToggleLeft, ToggleRight } from \"../../../general_elements/ToggleStyle\";\n\ninterface $Props {\n  item: Item;\n  isNew: boolean;\n}\n\nconst ItemDetail = ({ item, isNew }: $Props) => {\n  const [editMode, setMode] = useState<boolean>(isNew);\n  const [itemObj, editItem] = useState<Item>(item);\n  const [showAlert, setAlert] = useState<boolean>(false);\n  const [showDeleteDialog, setDeleteDialog] = useState<boolean>(false);\n  const [message, setMessage] = useState<string>(\"\");\n  const [unsavedChanges, setUnsavedChanges] = useState<boolean>(false);\n  let history = useHistory();\n\n  const deleteItem = () => {\n    setDeleteDialog(true);\n  };\n\n  useEffect(() => {\n    if (itemObj !== item) {\n      setUnsavedChanges(true);\n    }\n  }, [itemObj, item]);\n\n  const updateItem = (tableName: string, itemObj: Item) => {\n    updateWithCallback(tableName, itemObj, (result) => {\n      if (result > 0) {\n        setUnsavedChanges(false);\n        setMessage(\"Saved successful!\");\n        setAlert(true);\n      } else {\n        setMessage(\"Something went wrong!\");\n        setAlert(true);\n      }\n      setTimeout(() => {\n        setAlert(false);\n      }, 3000);\n    });\n  };\n\n  return (\n    <>\n      {showDeleteDialog && (\n        <Dialog\n          message={`Delete ${item.name}?`}\n          icon={faExclamationTriangle}\n          confirmeText={\"Delete\"}\n          confirmeClick={() => {\n            remove(\"items\", item.id);\n            history.goBack();\n          }}\n          abortText={\"Back\"}\n          abortClick={() => {\n            setDeleteDialog(false);\n          }}\n        />\n      )}\n      <TopBar>\n        <BackButton icon={faArrowLeft} action={() => history.goBack()} />\n        <EditToggle mode={editMode.toString()}>\n          <ToggleLeft onClick={() => setMode(false)}>View</ToggleLeft>\n          <ToggleRight onClick={() => setMode(true)}>Edit</ToggleRight>\n        </EditToggle>\n        {unsavedChanges && <Icon icon={faExclamationTriangle} title={\"Unsaved changes!\"} />}\n        {editMode && (\n          <>\n            <IconButton onClick={() => updateItem(\"items\", itemObj)} icon={faSave} />\n            <IconButton onClick={() => deleteItem()} icon={faTrash} />\n            {message && showAlert && <Message>{message}</Message>}\n          </>\n        )}\n      </TopBar>\n      {editMode ? (\n        <ItemEditView item={itemObj} onEdit={(value) => editItem(value)} />\n      ) : (\n        <ItemView item={itemObj} />\n      )}\n    </>\n  );\n};\n\nexport default ItemDetail;\n\nconst TopBar = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  overflow: hidden;\n  flex: 1 1;\n  min-width: calc(100% - 20px);\n  height: 45px;\n  padding: 10px;\n`;\n\nconst Message = styled.div`\n  padding: 5px;\n  width: 150px;\n  height: 30px;\n  line-height: 30px;\n  border-radius: 5px;\n  float: right;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  float: right;\n  line-height: 30px;\n  display: block;\n  height: 30px;\n  padding: 10px;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { BiError, BiHistory, BiSelectMultiple } from \"react-icons/bi\";\nimport {\n  GiCrystalWand,\n  GiBackpack,\n  GiWomanElfFace,\n  GiPlagueDoctorProfile,\n  GiSwordClash,\n  GiBookmarklet,\n  GiScrollUnfurled,\n  GiSolarSystem,\n  GiDjinn,\n  GiBookshelf,\n} from \"react-icons/gi\";\nimport {\n  faMeteor,\n  faIdCard,\n  faDragon,\n  faMapMarkedAlt,\n  faTable,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { MdEvent } from \"react-icons/md\";\nimport { HiUserGroup } from \"react-icons/hi\";\nimport { recivePromiseByAttributeCount } from \"../../services/DatabaseService\";\n\ninterface $Props {\n  type: string;\n  name: string;\n}\n\nconst LinkCheck = ({ type, name }: $Props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [entitiyFound, setEntity] = useState<boolean>(false);\n\n  useEffect(() => {\n    recivePromiseByAttributeCount(type + \"s\", \"name\", name).then((count: number) => {\n      setEntity(count > 0);\n      setLoading(false);\n    });\n  }, [type, name]);\n\n  const formatIcon = (type: string) => {\n    switch (type) {\n      case \"spell\":\n        return <FontAwesomeIcon icon={faMeteor} />;\n      case \"item\":\n        return <GiCrystalWand />;\n      case \"gear\":\n        return <GiBackpack />;\n      case \"race\":\n        return <GiWomanElfFace />;\n      case \"class\":\n        return <GiPlagueDoctorProfile />;\n      case \"selection\":\n        return <BiSelectMultiple />;\n      case \"char\":\n        return <FontAwesomeIcon icon={faIdCard} />;\n      case \"monster\":\n        return <FontAwesomeIcon icon={faDragon} />;\n      case \"encounter\":\n        return <GiSwordClash />;\n      case \"campaign\":\n        return <GiBookmarklet />;\n      case \"quest\":\n        return <GiScrollUnfurled />;\n      case \"event\":\n        return <MdEvent />;\n      case \"world\":\n        return <GiSolarSystem />;\n      case \"location\":\n        return <FontAwesomeIcon icon={faMapMarkedAlt} />;\n      case \"npc\":\n        return <GiDjinn />;\n      case \"randomTable\":\n        return <FontAwesomeIcon icon={faTable} />;\n      case \"book\":\n        return <GiBookshelf />;\n        case \"group\":\n          return <HiUserGroup />;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      {loading && <BiHistory />}\n      {!loading && !entitiyFound && <BiError />}\n      {!loading && entitiyFound && <>{formatIcon(type)}</>}\n    </>\n  );\n};\n\nexport default LinkCheck;\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\nimport LinkCheck from \"./LinkCheck\";\n\ninterface $Props {\n  text: string;\n}\n\nconst FormatedText = ({ text }: $Props) => {\n  const [formatedText, setFormatedText] = useState<JSX.Element>();\n  let history = useHistory();\n\n  const cut = (str: string, cutStart: number, cutEnd: number) => {\n    return str.substr(0, cutStart) + str.substr(cutEnd + 1);\n  };\n\n  const formatLink = useCallback(\n    (text: string) => {\n      if (text !== undefined) {\n        if (text.includes(\"[[\") && text.includes(\"]]\")) {\n          const parts = text.split(\"[[\");\n          let formattedParts: any[] = [];\n          parts.forEach((part: string, index: number) => {\n            if (part.includes(\"]]\")) {\n              const codePart: string[] = part.split(\"]]\");\n              const linkParts: string[] = codePart[0].split(\".\");\n              const link: string = \"/\" + linkParts[0] + \"-detail/name/\" + linkParts[1];\n              formattedParts.push(\n                <TextPart key={index}>\n                  <Link onClick={() => history.push(link)}>\n                    <LinkCheck type={linkParts[0]} name={linkParts[1]} /> {linkParts[1]}\n                  </Link>\n                  <TextPart>{codePart[1]}</TextPart>\n                </TextPart>\n              );\n            } else {\n              if (part !== \"\") formattedParts.push(<TextPart key={index}>{part}</TextPart>);\n            }\n          });\n          return <>{formattedParts}</>;\n        } else {\n          return <TextPart>{text}</TextPart>;\n        }\n      }\n    },\n    [history]\n  );\n\n  const formatTable = useCallback(\n    (textPart: string) => {\n      if (textPart.includes(\"||table||\")) {\n        const table: string[] = text.split(\"||table||\");\n        const tableRows: string[] = table[1].split(\"||\");\n        let isHead = true;\n        return (\n          <>\n            {formatLink(table[0])}\n            <table>\n              <tbody>\n                {tableRows.map((row: string, index: number) => {\n                  if (row.includes(\"|\")) {\n                    if (isHead) {\n                      isHead = false;\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableHeadProp key={index}>{cell}</TableHeadProp>;\n                          })}\n                        </tr>\n                      );\n                    } else {\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableProp key={index}>{formatLink(cell)}</TableProp>;\n                          })}\n                        </tr>\n                      );\n                    }\n                  } else {\n                    return <></>;\n                  }\n                })}\n              </tbody>\n            </table>\n            {formatLink(table[2])}\n          </>\n        );\n      } else {\n        return formatLink(textPart);\n      }\n    },\n    [text, formatLink]\n  );\n\n  const formatText = useCallback(\n    (textPart: string) => {\n      while (textPart.includes(\"{{\")) {\n        const cutStart = textPart.indexOf(\"{{\");\n        const cutEnd = textPart.indexOf(\"}}\") + 1;\n        textPart = cut(textPart, cutStart, cutEnd);\n      }\n      return formatTable(textPart);\n    },\n    [formatTable]\n  );\n\n  useEffect(() => {\n    if (text !== undefined) {\n      let formatedText = formatText(text);\n      setFormatedText(formatedText);\n    }\n  }, [text, history, formatText]);\n\n  return <>{formatedText}</>;\n};\n\nexport default FormatedText;\n\nconst Link = styled.span`\n  display: inline-block;\n  background-color: ${({ theme }) => theme.tile.backgroundColorLink};\n  border-radius: 5px;\n  text-decoration: none;\n  color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 14px;\n  padding: 0px 5px 0px 5px;\n  cursor: pointer;\n  white-space: pre;\n`;\n\nconst TextPart = styled.span`\n  white-space: pre-line;\n`;\n\nconst TableHeadProp = styled.th`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 2px 5px 2px 5px;\n`;\n\nconst TableProp = styled.td`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 5px;\n  text-align: center;\n`;\n","import Dexie from \"dexie\";\nimport { useReducer, useEffect, useCallback, useState } from \"react\";\nimport Filter from \"../data/Filter\";\nimport ReactDOM from \"react-dom\";\n\ntype TableState<T> = [T[] | undefined, boolean, Dexie.DexieError | undefined];\ntype TableAction<T> =\n  | { type: \"resolved\"; data: T[] }\n  | { type: \"empty\" }\n  | { type: \"reset\" }\n  | { type: \"error\"; error: Dexie.DexieError };\n\ntype ItemState<T> = [T | undefined, boolean, Dexie.DexieError | undefined];\ntype ItemAction<T> =\n  | { type: \"resolved\"; data: T }\n  | { type: \"empty\" }\n  | { type: \"reset\" }\n  | { type: \"error\"; error: Dexie.DexieError };\n\nexport const useTable = <T, U>(table: Dexie.Table<T, U>): TableState<T> => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const reducer = useCallback((state: TableState<T>, action: TableAction<T>): TableState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () =>\n        table\n          .toArray()\n          .then((data) => {\n            dispatch({\n              type: \"resolved\",\n              data,\n            });\n          })\n          .catch((error) => {\n            dispatch({\n              type: \"error\",\n              error,\n            });\n          });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, effect]);\n\n  return state;\n};\n\nexport const useTableByFilter = <T, U>(\n  table: Dexie.Table<T, U>,\n  filters: Filter[]\n): TableState<T> => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const [filter, setFilter] = useState<Filter[]>(filters);\n  const reducer = useCallback((state: TableState<T>, action: TableAction<T>): TableState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      case \"reset\":\n        return [undefined, true, undefined];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (filter !== filters) {\n      ReactDOM.unstable_batchedUpdates(() => {\n        dispatch({ type: \"reset\" });\n        setFilter(filters);\n        setEffect(true);\n      });\n    }\n  }, [filter, filters, setEffect]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () => console.time(\"filtered get all\");\n      table\n        .filter((obj: T) => {\n          let test: boolean[] = [];\n          filters.forEach((filter) => {\n            if (typeof filter.value === \"string\") {\n              test.push(\n                // @ts-ignore\n                obj[filter.fieldName].toLowerCase().includes(filter.value.toLowerCase())\n              );\n            } else if (typeof filter.value === \"number\") {\n              // @ts-ignore\n              test.push(obj[filter.fieldName] === filter.value);\n            } else if (typeof filter.value === \"boolean\") {\n              // @ts-ignore\n              test.push(obj[filter.fieldName] === filter.value);\n            } else if (filter.value instanceof Array) {\n              let arrayTest: boolean = false;\n              filter.value.forEach((filterPart: string | boolean | number) => {\n                if (typeof filterPart === \"string\") {\n                  if (\n                    // @ts-ignore\n                    obj[filter.fieldName].toLowerCase().includes(filterPart.toLowerCase())\n                  )\n                    arrayTest = true;\n                } else if (typeof filterPart === \"number\") {\n                  // @ts-ignore\n                  if (obj[filter.fieldName] === filterPart) arrayTest = true;\n                } else if (typeof filterPart === \"boolean\") {\n                  // @ts-ignore\n                  if (obj[filter.fieldName] === filterPart) arrayTest = true;\n                }\n              });\n              test.push(arrayTest);\n            }\n          });\n\n          let result = true;\n          test.forEach((val) => {\n            if (!val) result = false;\n          });\n          return result;\n        })\n        .sortBy(\"name\")\n        .then((data) => {\n          console.timeEnd(\"filtered get all\");\n          dispatch({\n            type: \"resolved\",\n            data,\n          });\n        })\n        .catch((error) => {\n          dispatch({\n            type: \"error\",\n            error,\n          });\n        });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, effect, filters]);\n\n  return state;\n};\n\nexport const useItem = <T, U>(table: Dexie.Table<T, U>, id: U) => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const reducer = useCallback((state: ItemState<T>, action: ItemAction<T>): ItemState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"empty\":\n        return [undefined, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () =>\n        table\n          .get(id)\n          .then((data) => {\n            if (data !== undefined) {\n              dispatch({\n                type: \"resolved\",\n                data,\n              });\n            } else {\n              dispatch({\n                type: \"empty\",\n              });\n            }\n          })\n          .catch((error) => {\n            dispatch({\n              type: \"error\",\n              error,\n            });\n          });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, id, effect]);\n\n  return state;\n};\n\nexport const useItemByAttr = <T, U>(table: Dexie.Table<T, U>, attr: string, attrValue: string) => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const reducer = useCallback((state: ItemState<T>, action: ItemAction<T>): ItemState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"empty\":\n        return [undefined, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () =>\n        table\n          .where(attr)\n          .equals(attrValue)\n          .first()\n          .then((data) => {\n            if (data !== undefined) {\n              dispatch({\n                type: \"resolved\",\n                data,\n              });\n            } else {\n              dispatch({\n                type: \"empty\",\n              });\n            }\n          })\n          .catch((error) => {\n            dispatch({\n              type: \"error\",\n              error,\n            });\n          });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, attr, attrValue, effect]);\n\n  return state;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  icon: IconDefinition;\n  transform?: string | Transform;\n  action: () => void;\n}\n\nconst BackButton = ({ icon, transform, action }: $Props) => {\n  return (\n    <Back onClick={action}>\n      <Icon icon={icon} transform={transform} />\n    </Back>\n  );\n};\n\nexport default BackButton;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n  &:hover {\n    color: ${({ theme }) => theme.buttons.color};\n  }\n`;\n\nconst Back = styled.div`\n  float: left;\n  font-size: calc(${({ theme }) => theme.buttons.height} + 10px);\n  margin: 10px 0px 0px 10px;\n  cursor: pointer;\n`;\n","import styled from \"styled-components\";\n\nexport const ToggleLeft = styled.div`\n  width: auto;\n  padding: 10px;\n  margin: 5px 0px 5px 5px;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: left;\n  cursor: pointer;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n  border-radius: 5px 0px 0px 5px;\n\n  transition: color 0.2s, background-color 0.2s;\n\n  &:hover {\n    color: ${({ theme }) => theme.buttons.hoverColor};\n  }\n`;\n\nexport const ToggleRight = styled(ToggleLeft)`\n  margin: 5px 5px 5px 0px;\n\n  border-radius: 0px 5px 5px 0px;\n`;\n\ntype EditMode = {\n  mode: string;\n};\n\nexport const EditToggle = styled.div<EditMode>`\n  width: auto;\n  height: ${({ theme }) => theme.buttons.height};\n  float: right;\n  color: ${({ theme }) => theme.buttons.color};\n\n  ${ToggleLeft} {\n    background-color: ${(props) => {\n      if (props.mode !== \"true\") {\n        return ({ theme }) => theme.buttons.backgroundColor;\n      } else {\n        return ({ theme }) => theme.tile.backgroundColor;\n      }\n    }};\n  }\n\n  ${ToggleRight} {\n    background-color: ${(props) => {\n      if (props.mode === \"true\") {\n        return ({ theme }) => theme.buttons.backgroundColor;\n      } else {\n        return ({ theme }) => theme.tile.backgroundColor;\n      }\n    }};\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Peer from \"peerjs\";\nimport { reciveAllPromise } from \"../../services/DatabaseService\";\nimport IEntity from \"../../data/IEntity\";\nimport { generateBrokerId } from \"../../services/PeerIdService\";\n\nimport { faExclamationCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport StringField from \"../form_elements/StringField\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\ninterface $Props {\n  data: string | IEntity;\n  mode: \"ALL\" | \"THIS\";\n}\n\nconst P2PSender = ({ data, mode }: $Props) => {\n  const [name, setName] = useState<string>(\"\");\n  const [peer, setPeer] = useState<Peer>();\n  const [error, setError] = useState<any>();\n\n  useEffect(() => {\n    if (peer === undefined) {\n      const brokerId = generateBrokerId();\n      const newPeer = new Peer(brokerId, {\n        host: \"peerjs.thedndtome.com\",\n        secure: true,\n      });\n      console.log(newPeer);\n      newPeer.on(\"connection\", function (conn) {\n        conn.on(\"error\", function (errorData) {\n          setError(errorData);\n        });\n        conn.on(\"open\", function () {\n          conn.send(data);\n        });\n      });\n      setPeer(newPeer);\n    }\n  }, [data, peer]);\n\n  useEffect(() => {\n    if (peer !== undefined) {\n      if (peer.disconnected && !peer.destroyed) {\n        peer.reconnect();\n      }\n      if (mode === \"ALL\" && typeof data === \"string\") {\n        reciveAllPromise(data).then((results) => {\n          console.log(results);\n          setName(data);\n          peer.on(\"connection\", function (conn) {\n            conn.on(\"error\", function (errorData) {\n              setError(errorData);\n            });\n            conn.on(\"open\", function () {\n              conn.send(results);\n            });\n          });\n        });\n      } else if (mode === \"THIS\" && typeof data !== \"string\") {\n        setName(data.name);\n        peer.on(\"connection\", function (conn) {\n          conn.on(\"error\", function (errorData) {\n            setError(errorData);\n          });\n          conn.on(\"open\", function () {\n            conn.send(data);\n          });\n        });\n      }\n    }\n  }, [data, mode, peer]);\n\n  return (\n    <>\n      {peer !== undefined && peer.id !== null && (\n        <>\n          <StringField value={peer.id} label={`Your ${name} ID:`} onChange={() => {}} />\n        </>\n      )}\n      {error && <Icon icon={faExclamationCircle} />}\n    </>\n  );\n};\n\nexport default P2PSender;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n","const getRandomInteger = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nexport const generateBrokerId = () => {\n  let password = \"\";\n  const characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  for (let i = 0; i < 13; i++) {\n    password += characters[getRandomInteger(0, characters.length - 1)];\n  }\n  return password;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport TextButton from \"../form_elements/TextButton\";\n\ninterface $Props {\n  message: string;\n  icon?: IconDefinition;\n  confirmeText: string;\n  confirmeClick: () => void;\n  abortText: string;\n  abortClick: () => void;\n}\n\nconst Dialog = ({\n  message,\n  icon,\n  confirmeText,\n  confirmeClick,\n  abortText,\n  abortClick,\n}: $Props) => {\n  return (\n    <DialogWrapper>\n      <Message>\n        {icon ? <Icon icon={icon} /> : \"\"} {message}\n      </Message>\n      <ButtonBar>\n        <TextButton text={abortText} onClick={abortClick} />\n        <TextButton text={confirmeText} onClick={confirmeClick} />\n      </ButtonBar>\n    </DialogWrapper>\n  );\n};\n\nexport default Dialog;\n\nconst DialogWrapper = styled.div`\n  width: 180px;\n  position: absolute;\n  z-index: 1010;\n  top: 10px;\n  left: calc(50% - 100px);\n  padding: 10px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  color: ${({ theme }) => theme.tile.color};\n`;\n\nconst Message = styled.div`\n  width: 100%;\n  text-align: center;\n`;\n\nconst ButtonBar = styled.div`\n  width: 100%;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n  margin-right: 5px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: number;\n  label: string;\n  max?: number;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: number) => void;\n}\n\nconst NumberField = ({\n  value,\n  max,\n  label,\n  icon,\n  transform,\n  onChange,\n}: $Props) => {\n  return (\n    <Field>\n      <LabelText>\n        {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n      </LabelText>\n      {max && (\n        <Input\n          type=\"number\"\n          max={max}\n          value={value}\n          onChange={(e) => onChange(+e.target.value)}\n        />\n      )}\n      {!max && (\n        <Input\n          type=\"number\"\n          value={value}\n          onChange={(e) => onChange(+e.target.value)}\n        />\n      )}\n    </Field>\n  );\n};\n\nexport default NumberField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: 38px;\n  line-height: 30px;\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1;\n`;\n\nconst Input = styled.input`\n  flex: 1 1 auto;\n  max-width: 6em;\n  height: 38px;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin-left: 5px;\n  border-radius: 5px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: string;\n  label: string;\n  height?: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: string) => void;\n}\n\nconst TextField = ({ value, label, height, icon, transform, onChange }: $Props) => {\n  return (\n    <Field>\n      <LabelText>\n        {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n      </LabelText>\n      <Input height={height} value={value} onChange={(e) => onChange(e.target.value)}></Input>\n    </Field>\n  );\n};\n\nexport default TextField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  min-width: calc(100% - 20px);\n  flex: 3 3 auto;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1;\n  min-width: 100%;\n  height: 30px;\n  line-height: 30px;\n`;\n\ntype TextProps = {\n  height?: string;\n};\n\nconst Input = styled.textarea<TextProps>`\n  flex: 1 1;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  height: ${({ height }) => (height !== undefined ? height : \"auto\")};\n  min-height: ${({ height }) => (height !== undefined ? height : \"22vh\")};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n`;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../data/IEntity\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\nimport { reciveAll, reciveAllPromise } from \"../../services/DatabaseService\";\n\ninterface $Props {\n  optionTable: string | string[];\n  value: string;\n  label: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: string) => void;\n}\n\nconst AutoStringField = ({\n  optionTable,\n  value,\n  label,\n  icon,\n  transform,\n  onChange,\n}: $Props) => {\n  const [optionsTable] = useState<string | string[]>(optionTable);\n  const [options, setOptions] = useState<IEntity[]>([]);\n  const [filteredOptions, setFilteredOptions] = useState<IEntity[]>([]);\n\n  const findAllItems = async (optionsTable: string[]) => {\n    let itemList: Promise<IEntity[]>[] = [];\n    optionsTable.forEach((table) => {\n      itemList.push(reciveAllPromise(table));\n    });\n    const results = await Promise.all(itemList);\n    results.forEach((items: IEntity[]) => {\n      setOptions((o) => o.concat(items));\n    });\n  };\n\n  useEffect(() => {\n    if (typeof optionsTable === \"string\") {\n      reciveAll(optionsTable, (data: any[]) => {\n        setOptions(data);\n      });\n    }\n    if (optionsTable instanceof Array && optionsTable.length > 0) {\n      findAllItems(optionsTable);\n    }\n  }, [optionsTable]);\n\n  const onSearch = useCallback(\n    (searchTerm: string) => {\n      onChange(searchTerm);\n      let newOptions = options.filter((option) => {\n        return option.name.includes(searchTerm);\n      });\n      setFilteredOptions(newOptions);\n    },\n    [options, onChange]\n  );\n\n  return (\n    <Field>\n      <LabelText>\n        {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n      </LabelText>\n      <Input\n        type=\"text\"\n        value={value}\n        onChange={(e) => onSearch(e.target.value)}\n      ></Input>\n      <Options>\n        {filteredOptions.length > 0 &&\n          filteredOptions.map((opt, index: number) => {\n            return (\n              <Option key={index} onClick={(e) => onSearch(opt.name)}>\n                {opt.name}\n              </Option>\n            );\n          })}\n      </Options>\n    </Field>\n  );\n};\n\nexport default AutoStringField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: 38px;\n  line-height: 30px;\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n  position: relative;\n  overflow: visible;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1 auto;\n`;\n\nconst Options = styled.div`\n  display: none;\n  position: absolute;\n  border-bottom: none;\n  border-top: none;\n  z-index: 99;\n  top: 100%;\n  left: 0;\n  right: 0;\n  overflow: hidden;\n\n  &:hover {\n    display: block;\n  }\n`;\n\nconst Option = styled.div`\n  padding: 5px;\n  cursor: pointer;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  margin-bottom: 1px;\n  border-radius: 5px;\n`;\n\nconst Input = styled.input`\n  flex: 3 1 auto;\n  height: 38px;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin-left: 5px;\n  border-radius: 5px;\n\n  &:focus ~ ${Options} {\n    display: block;\n  }\n`;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 95;"],"sourceRoot":""}