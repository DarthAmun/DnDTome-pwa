{"version":3,"sources":["components/general_elements/LinkCheck.tsx","components/general_elements/FormatedText.tsx","components/general_elements/TabBar.tsx","components/help/Help.tsx"],"names":["LinkCheck","type","name","useState","loading","setLoading","entitiyFound","setEntity","useEffect","newType","recivePromiseByAttributeCount","then","count","icon","faMeteor","faIdCard","faDragon","faMapMarkedAlt","faTable","formatIcon","FormatedTextContainer","FormatedText","text","webhook","useWebhook","json","setJson","formatedText","setFormatedText","history","useHistory","undefined","newText","formatDiscordText","length","substring","newJson","username","content","JSON","stringify","cut","str","cutStart","cutEnd","substr","rollDiscord","useCallback","command","adv","dis","includes","rollCommand","result","rolls","result2","rollString","resultText","sendMessage","newCommand","value","parseInt","replaceAll","krit","fail","formatLink","index","parts","split","formattedParts","forEach","part","codePart","linkParts","linkEntity","push","TextPart","DiscordPart","onClick","Adv","Dis","entityParts","link","Link","formatTable","textPart","newTable","table","tableEnd","tableRows","isHead","map","row","cells","cell","TableHeadProp","TableProp","formatText","indexOf","IconButton","style","backgroundColor","float","padding","faDiscord","sendEmbedMessage","styled","div","span","theme","tile","backgroundColorLink","th","input","color","td","TabBar","children","activeTab","onChange","Bar","child","Tab","e","isActive","buttons","props","Help","setTab","General","tab","HelpSection","SelectionTitle","SectionText","boxShadow"],"mappings":"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","file":"static/js/18.1e2f90d0.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { BiError, BiHistory, BiSelectMultiple } from \"react-icons/bi\";\nimport {\n  GiCrystalWand,\n  GiBackpack,\n  GiWomanElfFace,\n  GiPlagueDoctorProfile,\n  GiSwordClash,\n  GiBookmarklet,\n  GiScrollUnfurled,\n  GiSolarSystem,\n  GiDjinn,\n  GiBookshelf,\n  GiDiceTwentyFacesTwenty,\n} from \"react-icons/gi\";\nimport {\n  faMeteor,\n  faIdCard,\n  faDragon,\n  faMapMarkedAlt,\n  faTable,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { MdEvent } from \"react-icons/md\";\nimport { HiUserGroup } from \"react-icons/hi\";\nimport { recivePromiseByAttributeCount } from \"../../services/DatabaseService\";\n\ninterface $Props {\n  type: string;\n  name: string;\n}\n\nconst LinkCheck = ({ type, name }: $Props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [entitiyFound, setEntity] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (type === \"dice\") {\n      setEntity(true);\n      setLoading(false);\n    } else {\n      let newType = type + \"s\";\n      if (type === \"class\" || type === \"subclass\") newType = type + \"es\";\n      recivePromiseByAttributeCount(newType, \"name\", name).then((count: number) => {\n        setEntity(count > 0);\n        setLoading(false);\n      });\n    }\n  }, [type, name]);\n\n  const formatIcon = (type: string) => {\n    switch (type) {\n      case \"spell\":\n        return <FontAwesomeIcon icon={faMeteor} />;\n      case \"item\":\n        return <GiCrystalWand />;\n      case \"gear\":\n        return <GiBackpack />;\n      case \"race\":\n      case \"subrace\":\n        return <GiWomanElfFace />;\n      case \"class\":\n      case \"subclass\":\n        return <GiPlagueDoctorProfile />;\n      case \"selection\":\n        return <BiSelectMultiple />;\n      case \"char\":\n        return <FontAwesomeIcon icon={faIdCard} />;\n      case \"monster\":\n        return <FontAwesomeIcon icon={faDragon} />;\n      case \"encounter\":\n        return <GiSwordClash />;\n      case \"campaign\":\n        return <GiBookmarklet />;\n      case \"quest\":\n        return <GiScrollUnfurled />;\n      case \"event\":\n        return <MdEvent />;\n      case \"world\":\n        return <GiSolarSystem />;\n      case \"location\":\n        return <FontAwesomeIcon icon={faMapMarkedAlt} />;\n      case \"npc\":\n        return <GiDjinn />;\n      case \"randomTable\":\n        return <FontAwesomeIcon icon={faTable} />;\n      case \"book\":\n        return <GiBookshelf />;\n      case \"group\":\n        return <HiUserGroup />;\n      case \"dice\":\n        return <GiDiceTwentyFacesTwenty />;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      {loading && <BiHistory />}\n      {!loading && !entitiyFound && <BiError />}\n      {!loading && entitiyFound && <>{formatIcon(type)}</>}\n    </>\n  );\n};\n\nexport default LinkCheck;\n","import { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\nimport { useWebhook } from \"../../hooks/webhookHook\";\nimport { rollCommand } from \"../../services/DiceService\";\nimport { formatDiscordText, sendEmbedMessage, sendMessage } from \"../../services/DiscordService\";\nimport IconButton from \"../form_elements/IconButton\";\nimport LinkCheck from \"./LinkCheck\";\n\ninterface $Props {\n  text: string;\n}\n\nconst FormatedText = ({ text }: $Props) => {\n  let webhook = useWebhook();\n  const [json, setJson] = useState<string>(\"\");\n  const [formatedText, setFormatedText] = useState<JSX.Element[]>();\n  let history = useHistory();\n\n  useEffect(() => {\n    if (webhook !== undefined) {\n      let newText = formatDiscordText(text);\n      if (newText.length >= 2000) {\n        newText = newText.substring(0, 1997) + \"...\";\n      }\n      let newJson = {\n        username: webhook.name + \" (DnDTome)\",\n        content: newText,\n      };\n      setJson(JSON.stringify(newJson));\n    }\n  }, [text, webhook]);\n\n  const cut = (str: string, cutStart: number, cutEnd: number) => {\n    return str.substr(0, cutStart) + str.substr(cutEnd + 1);\n  };\n\n  const rollDiscord = useCallback(\n    (command: string, adv: boolean, dis: boolean) => {\n      if (!command.includes(\"d\")) {\n        let newCommand = \"d20\" + command;\n        let value = parseInt(command.replaceAll(\"+\", \"\"));\n        const { result, text, rolls } = rollCommand(newCommand);\n        const { result: result2, rolls: rolls2 } = rollCommand(newCommand);\n\n        let krit = false;\n        if (!adv && !dis && result - value === 20) krit = true;\n        else if (adv && (result - value === 20 || result2 - value === 20)) krit = true;\n        else if (dis && result - value === 20 && result2 - value === 20) krit = true;\n\n        let fail = false;\n        if (!adv && !dis && result - value === 1) fail = true;\n        else if (adv && result - value === 1 && result - value === 1) fail = true;\n        else if (dis && (result - value === 1 || result - value === 1)) fail = true;\n\n        let rollString = \"d20\" + rolls + rolls2 + command;\n        rollString += adv ? \"adv\" : \"\";\n        rollString += dis ? \"dis\" : \"\";\n\n        if (result !== undefined && webhook !== undefined) {\n          if (adv) {\n            let resultText =\n              result >= result2\n                ? \"**\" + result + \"** ~~\" + result2 + \"~~\"\n                : \"~~\" + result + \"~~ **\" + result2 + \"**\";\n            sendMessage(\n              webhook,\n              resultText +\n                \" \" +\n                text +\n                (fail ? \" :red_circle:\" : \"\") +\n                (krit ? \" :green_circle:\" : \"\") +\n                \" ||\" +\n                rollString +\n                \"||\"\n            );\n          } else if (dis) {\n            let resultText =\n              result >= result2\n                ? \"~~\" + result + \"~~ **\" + result2 + \"**\"\n                : \"**\" + result + \"** ~~\" + result2 + \"~~\";\n            sendMessage(\n              webhook,\n              resultText +\n                \" \" +\n                text +\n                (fail ? \" :red_circle:\" : \"\") +\n                (krit ? \" :green_circle:\" : \"\") +\n                \" ||\" +\n                rollString +\n                \"||\"\n            );\n          } else {\n            sendMessage(\n              webhook,\n              result +\n                \" \" +\n                text +\n                (fail ? \" :red_circle:\" : \"\") +\n                (krit ? \" :green_circle:\" : \"\") +\n                \" ||\" +\n                rollString +\n                \"||\"\n            );\n          }\n        }\n      } else {\n        const { result, text, rolls } = rollCommand(command);\n        const { result: result2, rolls: rolls2 } = rollCommand(command);\n\n        let rollString = command + rolls + rolls2;\n        rollString += adv ? \" adv\" : \"\";\n        rollString += dis ? \" dis\" : \"\";\n\n        if (result !== undefined && webhook !== undefined) {\n          if (adv) {\n            let resultText =\n              result >= result2\n                ? \"**\" + result + \"** ~~\" + result2 + \"~~\"\n                : \"~~\" + result + \"~~ **\" + result2 + \"**\";\n            sendMessage(webhook, resultText + \" \" + text + \" ||\" + rollString + \"||\");\n          } else if (dis) {\n            let resultText =\n              result >= result2\n                ? \"~~\" + result + \"~~ **\" + result2 + \"**\"\n                : \"**\" + result + \"** ~~\" + result2 + \"~~\";\n            sendMessage(webhook, resultText + \" \" + text + \" ||\" + rollString + \"||\");\n          } else {\n            sendMessage(webhook, result + \" \" + text + \" ||\" + rollString + \"||\");\n          }\n        }\n      }\n    },\n    [webhook]\n  );\n\n  const formatLink = useCallback(\n    (text: string, index: number): JSX.Element => {\n      if (text !== undefined) {\n        if (text.includes(\"[[\") && text.includes(\"]]\")) {\n          const parts = text.split(\"[[\");\n          let formattedParts: any[] = [];\n          parts.forEach((part: string, index: number) => {\n            if (part.includes(\"]]\")) {\n              const codePart: string[] = part.split(\"]]\");\n              const linkParts: string[] = codePart[0].split(\".\");\n              let linkEntity = linkParts[0];\n              if (linkEntity === \"dice\") {\n                formattedParts.push(\n                  <TextPart key={\"TextPart\" + index}>\n                    <DiscordPart onClick={() => rollDiscord(linkParts[1], false, false)}>\n                      <LinkCheck type={linkParts[0]} name={linkParts[1]} /> {linkParts[1]}\n                    </DiscordPart>\n                    <Adv onClick={() => rollDiscord(linkParts[1], true, false)}>Adv</Adv>\n                    <Dis onClick={() => rollDiscord(linkParts[1], false, true)}>Dis</Dis>\n                    <TextPart>{codePart[1]}</TextPart>\n                  </TextPart>\n                );\n              } else {\n                if (linkEntity === \"class\" || linkEntity === \"subclass\") linkEntity += \"e\";\n                if (linkParts[1].includes(\"|\")) {\n                  const entityParts = linkParts[1].split(\"|\");\n                  const link: string =\n                    \"/\" + linkEntity + \"-detail/name/\" + entityParts[0] + \"|\" + entityParts[1];\n                  formattedParts.push(\n                    <TextPart key={\"TextPart\" + index}>\n                      <Link onClick={() => history.push(link)}>\n                        <LinkCheck type={linkParts[0]} name={entityParts[0]} /> {entityParts[0]} (\n                        {entityParts[1]})\n                      </Link>\n                      <TextPart>{codePart[1]}</TextPart>\n                    </TextPart>\n                  );\n                } else {\n                  const link: string = \"/\" + linkEntity + \"-detail/name/\" + linkParts[1];\n                  formattedParts.push(\n                    <TextPart key={\"TextPart\" + index}>\n                      <Link onClick={() => history.push(link)}>\n                        <LinkCheck type={linkParts[0]} name={linkParts[1]} /> {linkParts[1]}\n                      </Link>\n                      <TextPart>{codePart[1]}</TextPart>\n                    </TextPart>\n                  );\n                }\n              }\n            } else {\n              if (part !== \"\") formattedParts.push(<TextPart key={index}>{part}</TextPart>);\n            }\n          });\n          return <>{formattedParts}</>;\n        } else if (text.length > 0) {\n          return <TextPart key={\"TextPart\" + index}>{text}</TextPart>;\n        }\n      }\n      return <></>;\n    },\n    // eslint-disable-next-line\n    [history]\n  );\n\n  const formatTable = useCallback(\n    (textPart: string): JSX.Element[] => {\n      if (textPart.includes(\"||tableStart||\")) {\n        let newTable: JSX.Element[] = [];\n        const table: string[] = text.split(\"||tableStart||\");\n\n        table.forEach((textPart: string, index: number) => {\n          if (textPart.includes(\"||tableEnd||\")) {\n            const tableEnd = textPart.split(\"||tableEnd||\");\n            const tableRows: string[] = tableEnd[0].split(\"||\");\n            let isHead = true;\n            newTable.push(\n              <table key={\"table\" + index}>\n                <tbody key={\"tbody\" + index}>\n                  {tableRows.map((row: string, index: number) => {\n                    if (row.includes(\"|\")) {\n                      if (isHead) {\n                        isHead = false;\n                        const cells = row.split(\"|\");\n                        return (\n                          <tr key={index}>\n                            {cells.map((cell: string, index: number) => {\n                              return <TableHeadProp key={index}>{cell}</TableHeadProp>;\n                            })}\n                          </tr>\n                        );\n                      } else {\n                        const cells = row.split(\"|\");\n                        return (\n                          <tr key={index}>\n                            {cells.map((cell: string, index: number) => {\n                              return <TableProp key={index}>{formatLink(cell, index)}</TableProp>;\n                            })}\n                          </tr>\n                        );\n                      }\n                    } else {\n                      return <></>;\n                    }\n                  })}\n                </tbody>\n              </table>\n            );\n            newTable.push(formatLink(tableEnd[1], index));\n          } else {\n            newTable.push(formatLink(table[0], index));\n          }\n        });\n        return newTable;\n      }\n      return [formatLink(textPart, 0)];\n    },\n    [text, formatLink]\n  );\n\n  const formatText = useCallback(\n    (textPart: string) => {\n      while (textPart.includes(\"{{\")) {\n        const cutStart = textPart.indexOf(\"{{\");\n        const cutEnd = textPart.indexOf(\"}}\") + 1;\n        textPart = cut(textPart, cutStart, cutEnd);\n      }\n      return formatTable(textPart);\n    },\n    [formatTable]\n  );\n\n  useEffect(() => {\n    if (text !== undefined) {\n      let formatedText = formatText(text);\n      setFormatedText(formatedText);\n    }\n  }, [text, history, formatText]);\n\n  return (\n    <FormatedTextContainer>\n      {webhook !== undefined && text !== \"\" && (\n        <IconButton\n          style={{\n            backgroundColor: \"#7289da\",\n            float: \"right\",\n            padding: \"5px\",\n          }}\n          icon={faDiscord}\n          onClick={() => sendEmbedMessage(webhook, json)}\n        />\n      )}\n      {formatedText}\n    </FormatedTextContainer>\n  );\n};\n\nexport default FormatedText;\n\nconst FormatedTextContainer = styled.div`\n  line-height: 20px;\n`;\n\nconst Link = styled.span`\n  display: inline-block;\n  background-color: ${({ theme }) => theme.tile.backgroundColorLink};\n  border-radius: 5px;\n  text-decoration: none;\n  color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 14px;\n  padding: 0px 5px 0px 5px;\n  margin: 1px;\n  cursor: pointer;\n  white-space: pre;\n`;\n\nconst DiscordPart = styled(Link)`\n  background-color: #7289da;\n  color: white;\n  border-top-right-radius: 0px;\n  border-bottom-right-radius: 0px;\n`;\nconst Adv = styled(Link)`\n  background-color: #7289da;\n  color: white;\n  border-radius: 0px;\n`;\nconst Dis = styled(Link)`\n  background-color: #7289da;\n  color: white;\n  border-top-left-radius: 0px;\n  border-bottom-left-radius: 0px;\n`;\n\nconst TextPart = styled.span`\n  white-space: pre-line;\n`;\n\nconst TableHeadProp = styled.th`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 2px 5px 2px 5px;\n`;\n\nconst TableProp = styled.td`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 5px;\n  text-align: center;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface $Props {\n  children: string[];\n  activeTab?: string;\n  onChange: (name: string) => void;\n}\n\nconst TabBar = ({ children, activeTab, onChange }: $Props) => {\n  return (\n    <Bar>\n      {children.map((child, index) => {\n        return (\n          <Tab key={index} onClick={(e) => onChange(child)} isActive={child === activeTab}>\n            {child}\n          </Tab>\n        );\n      })}\n    </Bar>\n  );\n};\n\nexport default TabBar;\n\nconst Bar = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  min-width: calc(100% - 20px);\n  flex: 1 1 auto;\n  padding: 3px;\n  margin: 5px;\n  border-radius: 10px;\n  position: relative;\n  z-index: 100;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: baseline;\n`;\n\ntype ActiveType = {\n  isActive?: boolean;\n};\n\nconst Tab = styled.div<ActiveType>`\n  flex: 3 1 auto;\n  height: 30px;\n  line-height: 20px;\n  padding: 5px;\n  box-sizing: border-box;\n  text-align: center;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin: 2px;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.buttons.backgroundColor};\n    color: ${({ theme }) => theme.buttons.color};\n  }\n\n  ${(props) => {\n    if (props.isActive) {\n      return `background-color: ${props.theme.buttons.backgroundColor}; \n      color: ${props.theme.buttons.color};`;\n    }\n  }}\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport FormatedText from \"../general_elements/FormatedText\";\nimport TabBar from \"../general_elements/TabBar\";\n\nconst Help = () => {\n  const [activeTab, setTab] = useState<string>(\"Install\");\n\n  return (\n    <>\n      <General>\n        <TabBar\n          children={[\"Install\", \"Create\", \"Import\", \"Export\", \"Text Formating\", \"Modifiers\"]}\n          onChange={(tab: string) => setTab(tab)}\n          activeTab={activeTab}\n        />\n        {activeTab === \"Install\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>How to install DnDTome on desktop</SelectionTitle>\n              <SectionText>\n                To install this webapp as an app use chrome and click on the plus in your navigation\n                bar right next to the favorite star icon.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to install DnDTome on mobile</SelectionTitle>\n              <SectionText>\n                To install this webapp as an app on mobile find and click the \"Add to home screen\"\n                option in your firefox, chrome or safari.\n              </SectionText>\n            </HelpSection>\n          </>\n        )}\n        {activeTab === \"Create\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>How to create Entitys</SelectionTitle>\n              <SectionText>\n                To create a new Spell for example go to Spells and hit \"Add Spell\" in the top\n                middle.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to create Sub-Entitys</SelectionTitle>\n              <SectionText>\n                For subclasses/subraces you need to visit a class/race and click the little circled\n                + in the subclass/subrace section of the class/race.\n              </SectionText>\n            </HelpSection>\n          </>\n        )}\n        {activeTab === \"Import\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>How to import Entitiys via .json files</SelectionTitle>\n              <SectionText>\n                Go to options and select a file in the top left file select dialog titled \"Import\".\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to import Entitiys via the send functionallity</SelectionTitle>\n              <SectionText>\n                Go to options and navigate to recive. Add the ID of the sender to the filed and\n                accept sended entities.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to import 5eTools files</SelectionTitle>\n              <SectionText>\n                Go to options and navigate to \"Other Import\" and select the file dialog suited for\n                the entity you want to import.\n              </SectionText>\n              <SectionText>Your entity is not listed there?</SectionText>\n              <SectionText>Those will be updated and added gradually.</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to import from other sources</SelectionTitle>\n              <SectionText>\n                As of now only dndtome and 5eTools .json files are supported.\n              </SectionText>\n            </HelpSection>\n          </>\n        )}\n        {activeTab === \"Export\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>How to export Entitiys to .json files</SelectionTitle>\n              <SectionText>\n                Go to options and click the \"export\"-Button located in the top right section titled\n                \"Export\". This will export your hole collection to one big file! (Excluding your pdf\n                library)\n              </SectionText>\n              <SectionText>\n                Or go to options and navigate to the entities you want to send for example \"Spells\".\n                There you can export all your spells to one file.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to send Entitiys via the send functionallity</SelectionTitle>\n              <SectionText>\n                Go to options and navigate to the entities you want to send for example \"Spells\".\n                Click the \"Send all Spells\"-Button and copy the ID.\n              </SectionText>\n              <SectionText>\n                Or go to the entities overview and choose a single entity for example a spell called\n                \"Heal\". Click the \"Send Heal\"-Button and copy the ID.\n              </SectionText>\n              <SectionText>You can now send the ID to the reciver.</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to export 5eTools files</SelectionTitle>\n              <SectionText>Not supported as of now.</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to export to other sources</SelectionTitle>\n              <SectionText>As of now you can only export to dndtome .json files.</SectionText>\n            </HelpSection>\n          </>\n        )}\n        {activeTab === \"Text Formating\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>How to create a hyper-link</SelectionTitle>\n              <SectionText>You can add a hyper-link in every textarea.</SectionText>\n              <SectionText>\n                To do so write: [[spell.Heal Me]] to link to the spell with the name \"Heal Me\".\n              </SectionText>\n              <SectionText>\n                Result: <FormatedText text={\"[[spell.Heal Me]]\"} />\n              </SectionText>\n              <SectionText>\n                You can also write: [[spell.Heal Me|ABC]] to link to the spell with the name \"Heal\n                Me\" from the source \"ABC\".\n              </SectionText>\n              <SectionText>\n                Result: <FormatedText text={\"[[spell.Heal Me|ABC]]\"} />\n              </SectionText>\n              <SectionText>This works for all entities.</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to create a table</SelectionTitle>\n              <SectionText>You can add a table in every textarea.</SectionText>\n              <SectionText>\n                To do so write: <br />\n                ||tableStart||\n                <br />\n                ||\"Header1\"|\"Header2\"|\"Header3\"|...||\n                <br />\n                ||\"Cell1\"|\"Cell2\"|\"Cell3\"|...||\n                <br />\n                ||...||\n                <br />\n                ||tableEnd||\n              </SectionText>\n              <SectionText>\n                Result:{\" \"}\n                <FormatedText\n                  text={`||tableStart||||Header1|Header2|Header3|...||||Cell1|Cell2|Cell3|...||||tableEnd||`}\n                />\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to create a discord \"Link\" to roll dice</SelectionTitle>\n              <SectionText>You can add a discord-link in every textarea.</SectionText>\n              <SectionText>\n                To do so write: [[dice.+2 to hit]] to roll a d20+2 in discord.\n              </SectionText>\n              <SectionText>\n                Result: <FormatedText text={`[[dice.+2 to hit]]`} />\n              </SectionText>\n              <SectionText>\n                Or write: [[dice.2d12+6 radiant damage]] to roll a \"2d12+6 radiant damage\" in\n                discord.\n              </SectionText>\n              <SectionText>\n                Result: <FormatedText text={`[[dice.2d12+6 radiant damage]]`} />\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>How to create a table with links in it</SelectionTitle>\n              <SectionText>\n                You can add a link to every cell of a table in every textarea.\n              </SectionText>\n              <SectionText>\n                To do so write: <br />\n                ||tableStart||\n                <br />\n                ||\"Header1\"|\"Header2\"|\"Header3\"|...||\n                <br />\n                ||\"[[spell.Heal Me]]\"|\"Cell2\"|\"Cell3\"|...||\n                <br />\n                ||...||\n                <br />\n                ||tableEnd||\n              </SectionText>\n              <SectionText>\n                Result:{\" \"}\n                <FormatedText\n                  text={`||tableStart||||Header1|Header2|Header|...||||[[spell.Heal Me]]|Cell2|Cell3|...||||tableEnd||`}\n                />\n              </SectionText>\n            </HelpSection>\n          </>\n        )}\n        {activeTab === \"Modifiers\" && (\n          <>\n            <HelpSection>\n              <SelectionTitle>What are modifiers?</SelectionTitle>\n              <SectionText>\n                Modifiers enable you to give class-, subclass-, race-, subracefeatures and magic\n                items (for now) spezial modifiers that will directly modify the character using\n                those things.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Equal modifiers</SelectionTitle>\n              <SectionText>Add {\"{{'target'='value'}}\"} to a feature.</SectionText>\n              <SectionText>\n                For example: {\"{{ac=15}}\"} or {'{{alignment=\"Real Evil\"}'}\n              </SectionText>\n              <SectionText>\n                You can even alter deeper values like: {\"{{saves.chaSaveProf=1}}\"}\n              </SectionText>\n              <SectionText>\n                Complex example: {'{{ac=\"10+(([dex]-10)/2)+(([con]-10)/2)\"}}'} where{\" \"}\n                {\"(([dex]-10)/2)\"} gives you the bonus for the stat.\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Add modifiers</SelectionTitle>\n              <SectionText>Add {\"{{'target'+'value'}}\"} to a feature.</SectionText>\n              <SectionText>\n                For example: {\"{{ac+3}}\"} or {'{{profs+\"Thiefs tools\"}'}\n              </SectionText>\n              <SectionText>Deep example: {\"{{skills.natureProf+1}}\"}</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Substract modifiers</SelectionTitle>\n              <SectionText>Add {\"{{'target'-'value'}}\"} to a feature.</SectionText>\n              <SectionText>For example: {\"{{ac-3}}\"}</SectionText>\n              <SectionText>Deep example: {\"{{money.gold-100}}\"}</SectionText>\n              <SectionText>No option for removing something from a text yet!</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Add modifiers</SelectionTitle>\n              <SectionText>Add {\"{{'target'.add='value'}}\"} to a feature.</SectionText>\n              <SectionText>For example: {'{{spells.add=\"Acid Splash\"}}'}</SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Character fields that can be accessed</SelectionTitle>\n              <SectionText>\n                name: text\n                <br /> player: text\n                <br /> pic: text\n                <br /> background: text\n                <br /> ac: number\n                <br /> hp: number\n                <br /> currentHp: number\n                <br /> init: number\n                <br /> speed: text\n                <br /> str: number\n                <br /> dex: number\n                <br /> con: number\n                <br /> int: number\n                <br /> wis: number\n                <br /> cha: number\n                <br /> actions: text\n                <br /> profsLangs: text\n                <br /> senses: text\n                <br /> alignment: text\n                <br /> inspiration: number\n                <br /> castingHit: number\n                <br /> castingDC: number\n                <br /> money: Money\n                <br /> skills: Skills\n                <br /> saves: Saves\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Money fields that can be accessed</SelectionTitle>\n              <SectionText>\n                copper: number\n                <br /> silver: number\n                <br /> electrum: number\n                <br /> gold: number\n                <br /> platinum: number\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Saves fields that can be accessed</SelectionTitle>\n              <SectionText>\n                strSaveProf: number\n                <br /> dexSaveProf: number\n                <br /> conSaveProf: number\n                <br /> intSaveProf: number\n                <br /> wisSaveProf: number\n                <br /> chaSaveProf: number\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Skills fields that can be accessed</SelectionTitle>\n              <SectionText>\n                acrobaticsProf: number\n                <br /> animalHandlingProf: number\n                <br /> arcanaProf: number\n                <br /> athleticsProf: number\n                <br /> deceptionProf: number\n                <br /> historyProf: number\n                <br /> insightProf: number\n                <br /> intimidationProf: number\n                <br /> investigationProf: number\n                <br /> medicineProf: number\n                <br /> natureProf: number\n                <br /> perceptionProf: number\n                <br /> performanceProf: number\n                <br /> persuasionProf: number\n                <br /> religionProf: number\n                <br /> sleightOfHandProf: number\n                <br /> stealthProf: number\n                <br /> survivalProf: number\n              </SectionText>\n            </HelpSection>\n            <HelpSection>\n              <SelectionTitle>Fields you can add something to</SelectionTitle>\n              <SectionText>\n                monsters\n                <br /> spells\n              </SectionText>\n            </HelpSection>\n          </>\n        )}\n      </General>\n    </>\n  );\n};\n\nexport default Help;\n\nconst General = styled.div`\n  flex: 1 1 auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst HelpSection = styled.div`\n  flex: 1 1 20em;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 3px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n\nconst SectionText = styled.div`\n  flex: 1 1 auto;\n  width: calc(100% - 10px);\n  padding: 5px;\n`;\n"],"sourceRoot":""}