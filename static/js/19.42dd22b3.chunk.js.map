{"version":3,"sources":["components/statistics/gear/CostRatioChart.tsx","components/statistics/gear/DamageRatioChart.tsx","components/statistics/gear/GearTypeRatioChart.tsx","components/statistics/gear/WeightVsCostsChart.tsx","components/statistics/gear/WeightRatioChart.tsx","components/statistics/general/AmountOfEntitiesChart.tsx","components/statistics/items/AttunmentRatioChart.tsx","components/statistics/items/BaseRatioChart.tsx","components/statistics/items/ItemTypeRatioChart.tsx","components/statistics/items/MagicBonusRatioChart.tsx","components/statistics/items/RarityRatioChart.tsx","components/statistics/monsters/CrRatioChart.tsx","components/statistics/monsters/LegendaryRatioChart.tsx","components/statistics/monsters/MonsterTypeRatioChart.tsx","components/statistics/spells/ActionsRatioChart.tsx","components/statistics/spells/LevelRatioChart.tsx","components/statistics/spells/LevelVsSchoolChart.tsx","components/statistics/spells/LevelVsTimeChart.tsx","components/statistics/spells/RitualRatioChart.tsx","components/statistics/spells/SchoolsRatioChart.tsx","components/statistics/spells/SchoolVsTimeChart.tsx","components/statistics/items/RarityVsAttunmentChart.tsx","components/statistics/items/RarityVsMagicBonusChart.tsx","components/statistics/Statistics.tsx","components/general_elements/TabBar.tsx"],"names":["CostRatioChart","useState","loading","setLoading","generalCounts","setGeneralCounts","useEffect","makeSchoolsData","a","reciveAttributeSelectionPromise","costs","promList","cost","recivePromiseByAttributeCount","toString","count","push","name","names","counts","colors","sort","b","forEach","Math","floor","random","labels","datasets","data","backgroundColor","OptionSection","SelectionTitle","style","width","paddingBottom","styled","div","theme","tile","color","boxShadow","input","DamageRatioChart","types","type","GearTypeRatioChart","undefined","WeightVsCostsChart","xLabels","setXLabels","yLabels","setYLabels","reciveAllPromise","gears","filter","gear","trim","weight","map","weights","x","indexOf","y","prom","index","r","length","options","scales","xAxes","ticks","callback","value","values","yAxes","tooltips","callbacks","label","tooltipItem","xLabel","yLabel","legend","display","WeightRatioChart","AmountOfEntitiesChart","makeGeneralCountsData","reciveCountPromise","AttunmentRatioChart","attunments","attunment","BaseRatioChart","bases","base","ItemTypeRatioChart","MagicBonusRatioChart","magicBoni","magicBonus","RarityRatioChart","rarities","rarity","position","responsive","CrRatioChart","crs","cr","LegendaryRatioChart","leg","noleg","MonsterTypeRatioChart","ActionsRatioChart","times","newTimes","time","startsWith","LevelRatioChart","levels","level","LevelVsSchoolChart","spells","parseInt","schools","school","spell","LevelVsTimeChart","RitualRatioChart","rituals","ritual","SchoolsRatioChart","SchoolVsTimeChart","RarityVsAttunmentChart","items","item","countsA","Array","countsB","RarityVsMagicBonusChart","magicBonis","Statistics","activeTab","setTab","TabBar","children","onChange","tab","OptionTab","Bar","child","Tab","key","onClick","e","isActive","buttons","props"],"mappings":"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","file":"static/js/19.42dd22b3.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst CostRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const costs = await reciveAttributeSelectionPromise(\"gears\", \"cost\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const cost of costs) {\n      if (cost !== \"\") {\n        const count = await recivePromiseByAttributeCount(\"gears\", \"cost\", cost.toString());\n        promList.push({\n          name: cost.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Cost Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default CostRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst DamageRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const types = await reciveAttributeSelectionPromise(\"gears\", \"damage\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const type of types) {\n      if (type !== \"\") {\n        const count = await recivePromiseByAttributeCount(\"gears\", \"damage\", type.toString());\n        promList.push({\n          name: type.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Damage Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default DamageRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst GearTypeRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const types = await reciveAttributeSelectionPromise(\"gears\", \"type\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const type of types) {\n      if (type !== undefined) {\n        const count = await recivePromiseByAttributeCount(\"gears\", \"type\", type as number);\n        promList.push({\n          name: type.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Type Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default GearTypeRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bubble } from \"react-chartjs-2\";\nimport {\n  reciveAllPromise,\n  reciveAttributeSelectionPromise,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\nimport Gear from \"../../../data/Gear\";\n\nconst WeightVsCostsChart = () => {\n  const [xLabels, setXLabels] = useState<string[]>([]);\n  const [yLabels, setYLabels] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    datasets: { data: { x: number; y: number }[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    let gears: Gear[] = (await reciveAllPromise(\"gears\")).filter(\n      (gear) =>\n        gear.cost !== undefined &&\n        gear.cost.trim() !== \"\" &&\n        gear.weight !== undefined &&\n        gear.weight.trim() !== \"\"\n    );\n    const costs = (await reciveAttributeSelectionPromise(\"gears\", \"cost\"))\n      .map((cost) => cost.toString())\n      .filter((cost) => cost !== undefined && cost.trim() !== \"\");\n    const weights = (await reciveAttributeSelectionPromise(\"gears\", \"weight\"))\n      .map((weight) => weight.toString())\n      .filter((weight) => weight !== undefined && weight.trim() !== \"\");\n\n    setXLabels(costs);\n    setYLabels(weights);\n\n    let promList: { x: number; y: number; r: number }[] = [];\n    let colors: string[] = [];\n    gears.forEach((gear: Gear) => {\n      if (\n        gear.cost !== undefined &&\n        gear.cost.trim() !== \"\" &&\n        gear.weight !== undefined &&\n        gear.weight.trim() !== \"\"\n      ) {\n        let x = costs.indexOf(gear.cost);\n        let y = weights.indexOf(gear.weight);\n        let prom: { x: number; y: number; r: number } = promList.filter(\n          (prom) => prom.x === x && prom.y === y\n        )[0];\n        let index = promList.indexOf(prom);\n\n        if (prom !== undefined) {\n          promList[index] = { ...promList[index], r: promList[index].r + 1 };\n        } else {\n          promList.push({\n            x: x,\n            y: y,\n            r: 1,\n          });\n          colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n        }\n      }\n    });\n\n    promList = promList.map((prom) => {\n      return { ...prom, r: (prom.r / gears.length) * 500 };\n    });\n\n    setGeneralCounts({\n      datasets: [\n        {\n          data: promList,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Weight x Costs Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bubble\n            data={generalCounts}\n            options={{\n              scales: {\n                xAxes: [\n                  {\n                    ticks: {\n                      // Include a dollar sign in the ticks\n                      callback: function (value: number, index: any, values: any) {\n                        return xLabels[value];\n                      },\n                    },\n                  },\n                ],\n                yAxes: [\n                  {\n                    ticks: {\n                      // Include a dollar sign in the ticks\n                      callback: function (value: number, index: any, values: any) {\n                        return yLabels[value];\n                      },\n                    },\n                  },\n                ],\n              },\n              tooltips: {\n                callbacks: {\n                  label: function (tooltipItem: any, data: any) {\n                    return xLabels[tooltipItem.xLabel] + \" x \" + yLabels[tooltipItem.yLabel];\n                  },\n                },\n              },\n            }}\n            legend={{ display: false }}\n          />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default WeightVsCostsChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst WeightRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const weights = await reciveAttributeSelectionPromise(\"gears\", \"weight\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const weight of weights) {\n      if (weight !== \"\") {\n        const count = await recivePromiseByAttributeCount(\"gears\", \"weight\", weight.toString());\n        promList.push({\n          name: weight.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Weight Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default WeightRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport { reciveCountPromise } from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst AmountOfEntitiesChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeGeneralCountsData();\n  }, []);\n\n  const makeGeneralCountsData = async () => {\n    let promList: { name: string; count: number }[] = [];\n    promList.push({\n      name: \"spells\",\n      count: await reciveCountPromise(\"spells\"),\n    });\n    promList.push({ name: \"gears\", count: await reciveCountPromise(\"gears\") });\n    promList.push({ name: \"items\", count: await reciveCountPromise(\"items\") });\n    promList.push({\n      name: \"monsters\",\n      count: await reciveCountPromise(\"monsters\"),\n    });\n    promList.push({ name: \"races\", count: await reciveCountPromise(\"races\") });\n    promList.push({\n      name: \"subraces\",\n      count: await reciveCountPromise(\"subraces\"),\n    });\n    promList.push({\n      name: \"classes\",\n      count: await reciveCountPromise(\"classes\"),\n    });\n    promList.push({\n      name: \"subclasses\",\n      count: await reciveCountPromise(\"subclasses\"),\n    });\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Amount of Entities</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default AmountOfEntitiesChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 20em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst AttunmentRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const attunments = await reciveAttributeSelectionPromise(\"items\", \"attunment\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const attunment of attunments) {\n      if (attunment !== undefined) {\n        const count = await recivePromiseByAttributeCount(\n          \"items\",\n          \"attunment\",\n          attunment as number\n        );\n        promList.push({\n          name: attunment.toString() === \"0\" ? \"no attunment\" : \"attunment\",\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Attunment Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default AttunmentRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 15em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst BaseRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const bases = await reciveAttributeSelectionPromise(\"items\", \"base\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const base of bases) {\n      if (base !== \"\") {\n        const count = await recivePromiseByAttributeCount(\"items\", \"base\", base.toString());\n        promList.push({\n          name: base.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Base Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} legend={{ display: false }} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default BaseRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst ItemTypeRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const types = await reciveAttributeSelectionPromise(\"items\", \"type\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const type of types) {\n      if (type !== undefined) {\n        const count = await recivePromiseByAttributeCount(\"items\", \"type\", type.toString());\n        promList.push({\n          name: type.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Type Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} legend={{ display: false }} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default ItemTypeRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst MagicBonusRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const magicBoni = await reciveAttributeSelectionPromise(\n      \"items\",\n      \"magicBonus\"\n    );\n\n    let promList: { name: string; count: number }[] = [];\n    for (const magicBonus of magicBoni) {\n      if (magicBonus !== undefined) {\n        const count = await recivePromiseByAttributeCount(\n          \"items\",\n          \"magicBonus\",\n          magicBonus as number\n        );\n        promList.push({\n          name: \"+\" + magicBonus.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Rarity Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default MagicBonusRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 15em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst RarityRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const rarities = await reciveAttributeSelectionPromise(\"items\", \"rarity\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const rarity of rarities) {\n      if (rarity !== undefined) {\n        const count = await recivePromiseByAttributeCount(\"items\", \"rarity\", rarity.toString());\n        promList.push({\n          name: rarity.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Rarity Ratio</SelectionTitle>\n      {!loading && (\n        <div\n          style={{\n            position: \"relative\",\n            width: \"100%\",\n            paddingBottom: \"10px\",\n          }}\n        >\n          <Doughnut\n            data={generalCounts}\n            options={{\n              responsive: true,\n              legend: {\n                position: \"top\",\n              },\n            }}\n          />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default RarityRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 auto;\n  max-width: 30em;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst CrRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const crs = await reciveAttributeSelectionPromise(\"monsters\", \"cr\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const cr of crs) {\n      if (cr !== undefined) {\n        const count = await recivePromiseByAttributeCount(\"monsters\", \"cr\", cr as number);\n        promList.push({\n          name: cr.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Cr Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default CrRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst LegendaryRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const rarities = await reciveAttributeSelectionPromise(\n      \"monsters\",\n      \"lAblt\"\n    );\n\n    let leg = 0;\n    let noleg = 0;\n\n    let promList: { name: string; count: number }[] = [];\n    for (const rarity of rarities) {\n      if (rarity !== \"\") {\n        const count = await recivePromiseByAttributeCount(\n          \"monsters\",\n          \"lAblt\",\n          rarity.toString()\n        );\n        leg += count;\n      } else {\n        const count = await recivePromiseByAttributeCount(\n          \"monsters\",\n          \"lAblt\",\n          rarity.toString()\n        );\n        noleg += count;\n      }\n    }\n\n    promList.push({\n      name: \"Legendary\",\n      count: leg,\n    });\n    promList.push({\n      name: \"no Legendary\",\n      count: noleg,\n    });\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Legendary Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default LegendaryRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 15em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst MonsterTypeRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const types = await reciveAttributeSelectionPromise(\"monsters\", \"type\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const type of types) {\n      if (type !== undefined) {\n        const count = await recivePromiseByAttributeCount(\"monsters\", \"type\", type.toString());\n        promList.push({\n          name: type.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Type Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default MonsterTypeRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst ActionsRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    let times = await reciveAttributeSelectionPromise(\"spells\", \"time\");\n\n    let newTimes: string[] = [];\n    times.forEach((time) => {\n      if (!time.toString().startsWith(\"1 reaction\")) {\n        newTimes.push(time.toString());\n      }\n    });\n\n    let promList: { name: string; count: number }[] = [];\n    for (const time of newTimes) {\n      if (time !== \"\") {\n        const count = await recivePromiseByAttributeCount(\"spells\", \"time\", time.toString());\n        promList.push({\n          name: time.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList\n      .sort((a, b) => b.count - a.count)\n      .forEach((count) => {\n        names.push(count.name);\n        counts.push(count.count);\n        colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n      });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Time Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} legend={{ display: false }} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default ActionsRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst LevelRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const levels = await reciveAttributeSelectionPromise(\"spells\", \"level\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const level of levels) {\n      if (level !== undefined) {\n        const count = await recivePromiseByAttributeCount(\"spells\", \"level\", level as number);\n        promList.push({\n          name: \"Level \" + level.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Level Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default LevelRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 auto;\n  max-width: 30em;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bubble } from \"react-chartjs-2\";\nimport {\n  reciveAllPromise,\n  reciveAttributeSelectionPromise,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\nimport Spell from \"../../../data/Spell\";\n\nconst LevelVsSchoolChart = () => {\n  const [xLabels, setXLabels] = useState<string[]>([]);\n  const [yLabels, setYLabels] = useState<number[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    datasets: { data: { x: number; y: number }[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    let spells: Spell[] = await reciveAllPromise(\"spells\");\n    const levels = (await reciveAttributeSelectionPromise(\"spells\", \"level\")).map((level) =>\n      parseInt(level.toString())\n    );\n    const schools = (await reciveAttributeSelectionPromise(\"spells\", \"school\")).map((school) =>\n      school.toString()\n    );\n\n    setXLabels(schools);\n    setYLabels(levels);\n\n    let promList: { x: number; y: number; r: number }[] = [];\n    let colors: string[] = [];\n    spells.forEach((spell: Spell) => {\n      if (!spell.time.startsWith(\"1 reaction\")) {\n        let x = schools.indexOf(spell.school);\n        let y = levels.indexOf(spell.level);\n        let prom: { x: number; y: number; r: number } = promList.filter(\n          (prom) => prom.x === x && prom.y === y\n        )[0];\n        let index = promList.indexOf(prom);\n\n        if (prom !== undefined) {\n          promList[index] = { ...promList[index], r: promList[index].r + 1 };\n        } else {\n          promList.push({\n            x: x,\n            y: y,\n            r: 1,\n          });\n          colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n        }\n      }\n    });\n\n    promList = promList.map((prom) => {\n      return { ...prom, r: (prom.r / spells.length) * 500 };\n    });\n\n    setGeneralCounts({\n      datasets: [\n        {\n          data: promList,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>School x Level Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bubble\n            data={generalCounts}\n            options={{\n              scales: {\n                xAxes: [\n                  {\n                    ticks: {\n                      // Include a dollar sign in the ticks\n                      callback: function (value: number, index: any, values: any) {\n                        return xLabels[value];\n                      },\n                    },\n                  },\n                ],\n                yAxes: [\n                  {\n                    ticks: {\n                      // Include a dollar sign in the ticks\n                      callback: function (value: number, index: any, values: any) {\n                        return yLabels[value];\n                      },\n                    },\n                  },\n                ],\n              },\n              tooltips: {\n                callbacks: {\n                  label: function (tooltipItem: any, data: any) {\n                    return xLabels[tooltipItem.xLabel] + \" x \" + yLabels[tooltipItem.yLabel];\n                  },\n                },\n              },\n            }}\n            legend={{ display: false }}\n          />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default LevelVsSchoolChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bubble } from \"react-chartjs-2\";\nimport {\n  reciveAllPromise,\n  reciveAttributeSelectionPromise,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\nimport Spell from \"../../../data/Spell\";\n\nconst LevelVsTimeChart = () => {\n  const [xLabels, setXLabels] = useState<string[]>([]);\n  const [yLabels, setYLabels] = useState<number[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    datasets: { data: { x: number; y: number }[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    let spells: Spell[] = await reciveAllPromise(\"spells\");\n    const levels = (await reciveAttributeSelectionPromise(\"spells\", \"level\")).map((level) =>\n      parseInt(level.toString())\n    );\n    const times = (await reciveAttributeSelectionPromise(\"spells\", \"time\"))\n      .map((time) => time.toString())\n      .filter((time) => !time.startsWith(\"1 reaction\"));\n\n    setXLabels(times);\n    setYLabels(levels);\n\n    let promList: { x: number; y: number; r: number }[] = [];\n    let colors: string[] = [];\n    spells.forEach((spell: Spell) => {\n      if (!spell.time.startsWith(\"1 reaction\")) {\n        let x = times.indexOf(spell.time);\n        let y = levels.indexOf(spell.level);\n        let prom: { x: number; y: number; r: number } = promList.filter(\n          (prom) => prom.x === x && prom.y === y\n        )[0];\n        let index = promList.indexOf(prom);\n\n        if (prom !== undefined) {\n          promList[index] = { ...promList[index], r: promList[index].r + 1 };\n        } else {\n          promList.push({\n            x: x,\n            y: y,\n            r: 1,\n          });\n          colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n        }\n      }\n    });\n\n    promList = promList.map((prom) => {\n      return { ...prom, r: (prom.r / spells.length) * 200 };\n    });\n\n    setGeneralCounts({\n      datasets: [\n        {\n          data: promList,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Time x Level Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bubble\n            data={generalCounts}\n            options={{\n              scales: {\n                xAxes: [\n                  {\n                    ticks: {\n                      // Include a dollar sign in the ticks\n                      callback: function (value: number, index: any, values: any) {\n                        return xLabels[value];\n                      },\n                    },\n                  },\n                ],\n                yAxes: [\n                  {\n                    ticks: {\n                      // Include a dollar sign in the ticks\n                      callback: function (value: number, index: any, values: any) {\n                        return yLabels[value];\n                      },\n                    },\n                  },\n                ],\n              },\n              tooltips: {\n                callbacks: {\n                  label: function (tooltipItem: any, data: any) {\n                    return xLabels[tooltipItem.xLabel] + \" x \" + yLabels[tooltipItem.yLabel];\n                  },\n                },\n              },\n            }}\n            legend={{ display: false }}\n          />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default LevelVsTimeChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst RitualRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const rituals = await reciveAttributeSelectionPromise(\"spells\", \"ritual\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const ritual of rituals) {\n      if (ritual !== undefined) {\n        const count = await recivePromiseByAttributeCount(\"spells\", \"ritual\", ritual as number);\n        promList.push({\n          name: ritual.toString() === \"0\" ? \"no Ritual\" : \"Ritual\",\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Ritual Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default RitualRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 auto;\n  max-width: 30em;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst SchoolsRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const schools = await reciveAttributeSelectionPromise(\"spells\", \"school\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const school of schools) {\n      if (school !== \"\")\n        promList.push({\n          name: school.toString(),\n          count: await recivePromiseByAttributeCount(\"spells\", \"school\", school.toString()),\n        });\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>School Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default SchoolsRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 auto;\n  max-width: 30em;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bubble } from \"react-chartjs-2\";\nimport {\n  reciveAllPromise,\n  reciveAttributeSelectionPromise,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\nimport Spell from \"../../../data/Spell\";\n\nconst SchoolVsTimeChart = () => {\n  const [xLabels, setXLabels] = useState<string[]>([]);\n  const [yLabels, setYLabels] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    datasets: { data: { x: number; y: number }[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    let spells: Spell[] = await reciveAllPromise(\"spells\");\n    const schools = (await reciveAttributeSelectionPromise(\"spells\", \"school\")).map((school) =>\n      school.toString()\n    );\n    const times = (await reciveAttributeSelectionPromise(\"spells\", \"time\"))\n      .map((time) => time.toString())\n      .filter((time) => !time.startsWith(\"1 reaction\"));\n\n    setXLabels(times);\n    setYLabels(schools);\n\n    let promList: { x: number; y: number; r: number }[] = [];\n    let colors: string[] = [];\n    spells.forEach((spell: Spell) => {\n      if (!spell.time.startsWith(\"1 reaction\")) {\n        let x = times.indexOf(spell.time);\n        let y = schools.indexOf(spell.school);\n        let prom: { x: number; y: number; r: number } = promList.filter(\n          (prom) => prom.x === x && prom.y === y\n        )[0];\n        let index = promList.indexOf(prom);\n\n        if (prom !== undefined) {\n          promList[index] = { ...promList[index], r: promList[index].r + 1 };\n        } else {\n          promList.push({\n            x: x,\n            y: y,\n            r: 1,\n          });\n          colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n        }\n      }\n    });\n\n    promList = promList.map((prom) => {\n      return { ...prom, r: (prom.r / spells.length) * 200 };\n    });\n\n    setGeneralCounts({\n      datasets: [\n        {\n          data: promList,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle> School x Time Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bubble\n            data={generalCounts}\n            options={{\n              scales: {\n                xAxes: [\n                  {\n                    ticks: {\n                      // Include a dollar sign in the ticks\n                      callback: function (value: number, index: any, values: any) {\n                        return xLabels[value];\n                      },\n                    },\n                  },\n                ],\n                yAxes: [\n                  {\n                    ticks: {\n                      // Include a dollar sign in the ticks\n                      callback: function (value: number, index: any, values: any) {\n                        return yLabels[value];\n                      },\n                    },\n                  },\n                ],\n              },\n              tooltips: {\n                callbacks: {\n                  label: function (tooltipItem: any, data: any) {\n                    return xLabels[tooltipItem.xLabel] + \" x \" + yLabels[tooltipItem.yLabel];\n                  },\n                },\n              },\n            }}\n            legend={{ display: false }}\n          />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default SchoolVsTimeChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAllPromise,\n  reciveAttributeSelectionPromise,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\nimport Item from \"../../../data/Item\";\n\nconst RarityVsAttunmentChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { label: string; data: number[]; backgroundColor: string }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    let items: Item[] = (await reciveAllPromise(\"items\")).filter(\n      (item) =>\n        item.rarity !== undefined && item.rarity.trim() !== \"\" && item.attunment !== undefined\n    );\n    const rarities = (await reciveAttributeSelectionPromise(\"items\", \"rarity\"))\n      .map((rarity) => rarity.toString())\n      .filter((rarity) => rarity !== undefined && rarity.trim() !== \"\");\n    const attunments = (await reciveAttributeSelectionPromise(\"items\", \"attunment\"))\n      .map((attunment) => attunment.toString())\n      .filter((attunment) => attunment !== undefined);\n\n    let promList: { x: string; attunment: number; value: number }[] = [];\n    items.forEach((item: Item) => {\n      if (item.rarity !== undefined && item.rarity.trim() !== \"\" && item.attunment !== undefined) {\n        let x = item.rarity;\n        let y = attunments.indexOf(item.attunment.toString());\n        let prom: { x: string; attunment: number; value: number } = promList.filter(\n          (prom) => prom.x === x && prom.attunment === y\n        )[0];\n        let index = promList.indexOf(prom);\n\n        if (prom !== undefined) {\n          promList[index] = { ...promList[index], value: promList[index].value + 1 };\n        } else {\n          promList.push({\n            x: x,\n            attunment: y,\n            value: 1,\n          });\n        }\n      }\n    });\n\n    let countsA: number[] = new Array(rarities.length);\n    let countsB: number[] = new Array(rarities.length);\n    promList.forEach((count) => {\n      if (count.attunment) countsA[rarities.indexOf(count.x)] = count.value;\n      else countsB[rarities.indexOf(count.x)] = count.value;\n    });\n\n    setGeneralCounts({\n      labels: rarities,\n      datasets: [\n        {\n          label: \"Attunment\",\n          data: countsA,\n          backgroundColor: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\n        },\n        {\n          label: \"No Attunment\",\n          data: countsB,\n          backgroundColor: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Rarity x Attunment Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} legend={{ display: false }} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default RarityVsAttunmentChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAllPromise,\n  reciveAttributeSelectionPromise,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\nimport Item from \"../../../data/Item\";\n\nconst RarityVsMagicBonusChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { label: string; data: number[]; backgroundColor: string }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    let items: Item[] = (await reciveAllPromise(\"items\")).filter(\n      (item) =>\n        item.rarity !== undefined && item.rarity.trim() !== \"\" && item.magicBonus !== undefined\n    );\n    const rarities = (await reciveAttributeSelectionPromise(\"items\", \"rarity\"))\n      .map((rarity) => rarity.toString())\n      .filter((rarity) => rarity !== undefined && rarity.trim() !== \"\");\n    const magicBoni = (await reciveAttributeSelectionPromise(\"items\", \"magicBonus\"))\n      .map((attunment) => attunment.toString())\n      .filter((attunment) => attunment !== undefined);\n\n    let promList: { x: string; y: number; value: number }[] = [];\n    items.forEach((item: Item) => {\n      if (item.rarity !== undefined && item.rarity.trim() !== \"\" && item.magicBonus !== undefined) {\n        let x = item.rarity;\n        let y = magicBoni.indexOf(item.magicBonus.toString());\n        let prom: { x: string; y: number; value: number } = promList.filter(\n          (prom) => prom.x === x && prom.y === y\n        )[0];\n        let index = promList.indexOf(prom);\n\n        if (prom !== undefined) {\n          promList[index] = { ...promList[index], value: promList[index].value + 1 };\n        } else {\n          promList.push({\n            x: x,\n            y: y,\n            value: 1,\n          });\n        }\n      }\n    });\n\n    let counts: { label: string; data: number[]; backgroundColor: string }[] = [];\n    magicBoni.forEach((magicBonis) => {\n      counts.push({\n        label: \"+\" + magicBonis,\n        data: new Array(rarities.length),\n        backgroundColor: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\n      });\n    });\n    promList.forEach((count) => {\n      counts[count.y].data[rarities.indexOf(count.x)] = count.value;\n    });\n\n    setGeneralCounts({\n      labels: rarities,\n      datasets: counts,\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Rarity x Magic Bonus Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} legend={{ display: false }} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default RarityVsMagicBonusChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport TabBar from \"../general_elements/TabBar\";\nimport CostRatioChart from \"./gear/CostRatioChart\";\nimport DamageRatioChart from \"./gear/DamageRatioChart\";\nimport GearTypeRatioChart from \"./gear/GearTypeRatioChart\";\nimport WeightVsCostsChart from \"./gear/WeightVsCostsChart\";\nimport WeightRatioChart from \"./gear/WeightRatioChart\";\nimport AmountOfEntitiesChart from \"./general/AmountOfEntitiesChart\";\nimport AttunmentRatioChart from \"./items/AttunmentRatioChart\";\nimport BaseRatioChart from \"./items/BaseRatioChart\";\nimport ItemTypeRatioChart from \"./items/ItemTypeRatioChart\";\nimport MagicBonusRatioChart from \"./items/MagicBonusRatioChart\";\nimport RarityRatioChart from \"./items/RarityRatioChart\";\nimport CrRatioChart from \"./monsters/CrRatioChart\";\nimport LegendaryRatioChart from \"./monsters/LegendaryRatioChart\";\nimport MonsterTypeRatioChart from \"./monsters/MonsterTypeRatioChart\";\nimport ActionsRatioChart from \"./spells/ActionsRatioChart\";\nimport LevelRatioChart from \"./spells/LevelRatioChart\";\nimport LevelVsSchoolChart from \"./spells/LevelVsSchoolChart\";\nimport LevelVsTimeChart from \"./spells/LevelVsTimeChart\";\nimport RitualRatioChart from \"./spells/RitualRatioChart\";\nimport SchoolsRatioChart from \"./spells/SchoolsRatioChart\";\nimport SchoolVsTimeChart from \"./spells/SchoolVsTimeChart\";\nimport RarityVsAttunmentChart from \"./items/RarityVsAttunmentChart\";\nimport RarityVsMagicBonusChart from \"./items/RarityVsMagicBonusChart\";\n\nconst Statistics = () => {\n  const [activeTab, setTab] = useState<string>(\"General\");\n\n  return (\n    <>\n      <TabBar\n        children={[\"General\", \"Spells\", \"Gears\", \"Magic Items\", \"Monsters\"]}\n        onChange={(tab: string) => setTab(tab)}\n        activeTab={activeTab}\n      />\n      {activeTab === \"General\" && (\n        <OptionTab>\n          <AmountOfEntitiesChart />\n        </OptionTab>\n      )}\n      {activeTab === \"Spells\" && (\n        <OptionTab>\n          <SchoolsRatioChart />\n          <LevelRatioChart />\n          <RitualRatioChart />\n          <ActionsRatioChart />\n          <SchoolVsTimeChart />\n          <LevelVsSchoolChart />\n          <LevelVsTimeChart />\n        </OptionTab>\n      )}\n      {activeTab === \"Gears\" && (\n        <OptionTab>\n          <GearTypeRatioChart />\n          <DamageRatioChart />\n          <CostRatioChart />\n          <WeightRatioChart />\n          <WeightVsCostsChart />\n        </OptionTab>\n      )}\n      {activeTab === \"Magic Items\" && (\n        <OptionTab>\n          <RarityRatioChart />\n          <AttunmentRatioChart />\n          <MagicBonusRatioChart />\n          <BaseRatioChart />\n          <ItemTypeRatioChart />\n          <RarityVsAttunmentChart />\n          <RarityVsMagicBonusChart />\n        </OptionTab>\n      )}\n      {activeTab === \"Monsters\" && (\n        <OptionTab>\n          <LegendaryRatioChart />\n          <MonsterTypeRatioChart />\n          <CrRatioChart />\n        </OptionTab>\n      )}\n    </>\n  );\n};\n\nexport default Statistics;\n\nconst OptionTab = styled.div`\n  flex: 1 1 auto;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface $Props {\n  children: string[];\n  activeTab?: string;\n  onChange: (name: string) => void;\n}\n\nconst TabBar = ({ children, activeTab, onChange }: $Props) => {\n  return (\n    <Bar>\n      {children.map((child, index) => {\n        return (\n          <Tab key={index} onClick={(e) => onChange(child)} isActive={child === activeTab}>\n            {child}\n          </Tab>\n        );\n      })}\n    </Bar>\n  );\n};\n\nexport default TabBar;\n\nconst Bar = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  min-width: calc(100% - 20px);\n  flex: 1 1 auto;\n  padding: 3px;\n  margin: 5px;\n  border-radius: 10px;\n  position: relative;\n  z-index: 100;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: baseline;\n`;\n\ntype ActiveType = {\n  isActive?: boolean;\n};\n\nconst Tab = styled.div<ActiveType>`\n  flex: 3 1 auto;\n  height: 30px;\n  line-height: 20px;\n  padding: 5px;\n  box-sizing: border-box;\n  text-align: center;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin: 2px;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.buttons.backgroundColor};\n    color: ${({ theme }) => theme.buttons.color};\n  }\n\n  ${(props) => {\n    if (props.isActive) {\n      return `background-color: ${props.theme.buttons.backgroundColor}; \n      color: ${props.theme.buttons.color};`;\n    }\n  }}\n`;\n"],"sourceRoot":""}