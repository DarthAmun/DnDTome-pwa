{"version":3,"sources":["components/entities/events/details/EventView.tsx","components/entities/events/details/EventEditView.tsx","components/entities/events/details/EventDetail.tsx","components/form_elements/IconButton.tsx","components/form_elements/TextButton.tsx","components/form_elements/StringField.tsx","components/general_elements/LinkCheck.tsx","components/general_elements/FormatedText.tsx","components/entities/events/details/link_wrapper/IdToEvent.tsx","hooks/DexieHooks.tsx","components/form_elements/BackButton.tsx","components/general_elements/ToggleStyle.tsx","components/p2p/P2PSender.tsx","services/PeerIdService.tsx","components/general_elements/Dialog.tsx","components/form_elements/TextField.tsx","../node_modules/peerjs/dist sync"],"names":["EventView","event","useState","send","setSend","CenterWrapper","View","Name","name","PropWrapper","Prop","Icon","icon","faCalendarAlt","date","faLink","sources","Text","PropTitle","FormatedText","text","description","TextButton","faPaperPlane","onClick","P2PSender","data","mode","styled","div","theme","tile","color","backgroundColor","span","backgroundColorLink","FontAwesomeIcon","main","highlight","EventEditView","onEdit","StringField","value","label","onChange","TextField","faBookOpen","EventDetail","isNew","editMode","setMode","eventObj","editEvent","showAlert","setAlert","showDeleteDialog","setDeleteDialog","message","setMessage","unsavedChanges","setUnsavedChanges","history","useHistory","useEffect","Dialog","faExclamationTriangle","confirmeText","confirmeClick","remove","id","goBack","abortText","abortClick","TopBar","BackButton","faArrowLeft","action","toString","title","IconButton","tableName","updateWithCallback","result","setTimeout","updateEvent","faSave","faTrash","Message","floatLeft","disabled","transform","SimpleButton","left","DisabledSimpleButton","buttons","height","button","hoverColor","placeholder","Field","LabelText","Input","type","e","target","input","LinkCheck","loading","setLoading","entitiyFound","setEntity","recivePromiseByAttributeCount","then","count","faMeteor","faIdCard","faDragon","faMapMarkedAlt","faTable","formatIcon","formatedText","setFormatedText","cut","str","cutStart","cutEnd","substr","formatLink","useCallback","undefined","includes","parts","split","formattedParts","forEach","part","index","codePart","linkParts","link","push","TextPart","key","Link","formatTable","textPart","table","tableRows","isHead","map","row","cells","cell","TableHeadProp","TableProp","formatText","indexOf","th","td","IdToEvent","match","db","MyAppDatabase","useItem","events","params","error","effect","setEffect","reducer","state","useReducer","dispatch","get","catch","useItemByAttr","attr","attrValue","where","equalsIgnoreCase","first","Back","ToggleLeft","ToggleRight","EditToggle","props","setName","peer","setPeer","setError","brokerId","min","max","password","characters","i","length","Math","floor","random","generateBrokerId","newPeer","Peer","host","secure","console","log","on","conn","errorData","disconnected","destroyed","reconnect","reciveAllPromise","results","faExclamationCircle","DialogWrapper","ButtonBar","textarea","webpackEmptyContext","req","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/40.ebbdbb16.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLink, faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport Event from \"../../../../data/world/Event\";\nimport FormatedText from \"../../../general_elements/FormatedText\";\nimport P2PSender from \"../../../p2p/P2PSender\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport { faCalendarAlt } from \"@fortawesome/free-regular-svg-icons\";\n\ninterface $Props {\n  event: Event;\n}\n\nconst EventView = ({ event }: $Props) => {\n  const [send, setSend] = useState<boolean>(false);\n\n  return (\n    <CenterWrapper>\n      <View>\n        <Name>\n          <b>{event.name}</b>\n        </Name>\n\n        <PropWrapper>\n          <Prop>\n            <Icon icon={faCalendarAlt} />\n            {event.date}\n          </Prop>\n          <Prop>\n            <Icon icon={faLink} />\n            {event.sources}\n          </Prop>\n        </PropWrapper>\n        <Text>\n          <PropTitle>Description</PropTitle>\n          <FormatedText text={event.description} />\n        </Text>\n        <PropWrapper>\n          {!send && (\n            <TextButton\n              text={`Send ${event.name}`}\n              icon={faPaperPlane}\n              onClick={() => setSend(true)}\n            />\n          )}\n          {!!send && <P2PSender data={event} mode={\"THIS\"} />}\n        </PropWrapper>\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default EventView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: var(--card-title-color);\n  text-align: center;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.tile.backgroundColorLink};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Prop = styled.div`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px;\n  float: left;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: calc(100% - 30px);\n  margin: 10px 5px 5px 5px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Event from \"../../../../data/world/Event\";\n\nimport StringField from \"../../../form_elements/StringField\";\nimport TextField from \"../../../form_elements/TextField\";\n\nimport { faBookOpen } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface $Props {\n  event: Event;\n  onEdit: (value: Event) => void;\n}\n\nconst EventEditView = ({ event, onEdit }: $Props) => {\n  return (\n    <CenterWrapper>\n      <View>\n        <StringField\n          value={event.name}\n          label=\"Name\"\n          onChange={(name) => onEdit({ ...event, name: name })}\n        />\n        <StringField\n          value={event.date}\n          label=\"Date\"\n          onChange={(date) => onEdit({ ...event, date: date })}\n        />\n        <StringField\n          value={event.sources}\n          label=\"Sources\"\n          onChange={(sources) => onEdit({ ...event, sources: sources })}\n        />\n        <TextField\n          value={event.description}\n          label=\"Description\"\n          icon={faBookOpen}\n          onChange={(description) => onEdit({ ...event, description: description })}\n        />\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default EventEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  padding: 5px;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\n\nimport {\n  faArrowLeft,\n  faSave,\n  faTrash,\n  faExclamationTriangle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport EventView from \"./EventView\";\nimport EventEditView from \"./EventEditView\";\nimport BackButton from \"../../../form_elements/BackButton\";\nimport Event from \"../../../../data/world/Event\";\nimport IconButton from \"../../../form_elements/IconButton\";\nimport { remove, updateWithCallback } from \"../../../../services/DatabaseService\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Dialog from \"../../../general_elements/Dialog\";\nimport { EditToggle, ToggleLeft, ToggleRight } from \"../../../general_elements/ToggleStyle\";\n\ninterface $Props {\n  event: Event;\n  isNew: boolean;\n}\n\nconst EventDetail = ({ event, isNew }: $Props) => {\n  const [editMode, setMode] = useState<boolean>(isNew);\n  const [eventObj, editEvent] = useState<Event>(event);\n  const [showAlert, setAlert] = useState<boolean>(false);\n  const [showDeleteDialog, setDeleteDialog] = useState<boolean>(false);\n  const [message, setMessage] = useState<string>(\"\");\n  const [unsavedChanges, setUnsavedChanges] = useState<boolean>(false);\n  let history = useHistory();\n\n  const deleteEvent = () => {\n    setDeleteDialog(true);\n  };\n\n  useEffect(() => {\n    if (eventObj !== event) {\n      setUnsavedChanges(true);\n    }\n  }, [eventObj, event]);\n\n  const updateEvent = (tableName: string, eventObj: Event) => {\n    updateWithCallback(tableName, eventObj, (result) => {\n      if (result > 0) {\n        setUnsavedChanges(false);\n        setMessage(\"Saved successful!\");\n        setAlert(true);\n      } else {\n        setMessage(\"Something went wrong!\");\n        setAlert(true);\n      }\n      setTimeout(() => {\n        setAlert(false);\n      }, 3000);\n    });\n  };\n\n  return (\n    <>\n      {showDeleteDialog && (\n        <Dialog\n          message={`Delete ${event.name}?`}\n          icon={faExclamationTriangle}\n          confirmeText={\"Delete\"}\n          confirmeClick={() => {\n            remove(\"events\", event.id);\n            history.goBack();\n          }}\n          abortText={\"Back\"}\n          abortClick={() => {\n            setDeleteDialog(false);\n          }}\n        />\n      )}\n      <TopBar>\n        <BackButton icon={faArrowLeft} action={() => history.goBack()} />\n        <EditToggle mode={editMode.toString()}>\n          <ToggleLeft onClick={() => setMode(false)}>View</ToggleLeft>\n          <ToggleRight onClick={() => setMode(true)}>Edit</ToggleRight>\n        </EditToggle>\n        {unsavedChanges && <Icon icon={faExclamationTriangle} title={\"Unsaved changes!\"} />}\n        {editMode && (\n          <>\n            <IconButton onClick={() => updateEvent(\"events\", eventObj)} icon={faSave} />\n            <IconButton onClick={() => deleteEvent()} icon={faTrash} />\n            {message && showAlert && <Message>{message}</Message>}\n          </>\n        )}\n      </TopBar>\n      {editMode ? (\n        <EventEditView event={eventObj} onEdit={(value) => editEvent(value)} />\n      ) : (\n        <EventView event={eventObj} />\n      )}\n    </>\n  );\n};\n\nexport default EventDetail;\n\nconst TopBar = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  overflow: hidden;\n  flex: 1 1;\n  min-width: calc(100% - 20px);\n  height: 45px;\n  padding: 10px;\n`;\n\nconst Message = styled.div`\n  padding: 5px;\n  width: 150px;\n  height: 30px;\n  line-height: 30px;\n  border-radius: 5px;\n  float: right;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  float: right;\n  line-height: 30px;\n  display: block;\n  height: 30px;\n  padding: 10px;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  icon: IconDefinition;\n  floatLeft?: boolean;\n  disabled?: boolean;\n  transform?: string | Transform;\n  onClick: (() => void) | ((e: any) => void);\n}\n\nconst IconButton = ({ icon, floatLeft, disabled, transform, onClick }: $Props) => {\n  return (\n    <>\n      {!disabled && (\n        <SimpleButton left={floatLeft} onClick={onClick}>\n          <Icon icon={icon} transform={transform} />\n        </SimpleButton>\n      )}\n      {disabled && (\n        <DisabledSimpleButton>\n          <Icon icon={icon} transform={transform} />\n        </DisabledSimpleButton>\n      )}\n    </>\n  );\n};\n\nexport default IconButton;\n\ntype FloatMpde = {\n  left?: boolean;\n};\n\nconst SimpleButton = styled.div<FloatMpde>`\n  color: ${({ theme }) => theme.buttons.color};\n  background-color: ${({ theme }) => theme.buttons.backgroundColor};\n  cursor: pointer;\n\n  font-size: 16px;\n  overflow: hidden;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: ${({ left }) => (left ? \"left\" : \"right\")};\n  padding: 10px;\n  margin: 5px;\n  border-radius: 10px;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n\n  transition: color 0.2s;\n\n  &:hover {\n    color: white;\n  }\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst DisabledSimpleButton = styled(SimpleButton)`\n  color: ${({ theme }) => theme.buttons.backgroundColor};\n  background-color: ${({ theme }) => theme.buttons.color};\n  cursor: not-allowed;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  text: string;\n  disabled?: boolean;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onClick: () => void;\n}\n\nconst TextButton = ({ text, icon, transform, disabled, onClick }: $Props) => {\n  return (\n    <SimpleButton onClick={onClick} disabled={disabled}>\n      {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {text}\n    </SimpleButton>\n  );\n};\n\nexport default TextButton;\n\nconst SimpleButton = styled.button`\n  color: ${({ theme }) => theme.buttons.color};\n  background-color: ${({ theme }) => theme.buttons.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: right;\n  padding: 10px;\n  margin: 5px;\n  border-radius: 10px;\n  cursor: pointer;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n  box-sizing: content-box;\n  border: none;\n\n  transition: color 0.2s;\n\n  &:hover {\n    color: ${({ theme }) => theme.buttons.hoverColor};\n  }\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.buttons.disabled};\n  }\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n  margin-right: 5px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: string;\n  label: string;\n  placeholder?: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: string) => void;\n}\n\nconst StringField = ({ value, label, placeholder, icon, transform, onChange }: $Props) => (\n  <Field>\n    <LabelText>\n      {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n    </LabelText>\n    <Input\n      type=\"text\"\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      placeholder={placeholder}\n    ></Input>\n  </Field>\n);\n\nexport default StringField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: 38px;\n  line-height: 30px;\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1 auto;\n`;\n\nconst Input = styled.input`\n  flex: 3 1 auto;\n  height: 38px;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin-left: 5px;\n  border-radius: 5px;\n  width: 0;\n  min-width: 100px;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { BiError, BiHistory, BiSelectMultiple } from \"react-icons/bi\";\nimport {\n  GiCrystalWand,\n  GiBackpack,\n  GiWomanElfFace,\n  GiPlagueDoctorProfile,\n  GiSwordClash,\n  GiBookmarklet,\n  GiScrollUnfurled,\n  GiSolarSystem,\n  GiDjinn,\n  GiBookshelf,\n} from \"react-icons/gi\";\nimport {\n  faMeteor,\n  faIdCard,\n  faDragon,\n  faMapMarkedAlt,\n  faTable,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { MdEvent } from \"react-icons/md\";\nimport { HiUserGroup } from \"react-icons/hi\";\nimport { recivePromiseByAttributeCount } from \"../../services/DatabaseService\";\n\ninterface $Props {\n  type: string;\n  name: string;\n}\n\nconst LinkCheck = ({ type, name }: $Props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [entitiyFound, setEntity] = useState<boolean>(false);\n\n  useEffect(() => {\n    recivePromiseByAttributeCount(type + \"s\", \"name\", name).then((count: number) => {\n      setEntity(count > 0);\n      setLoading(false);\n    });\n  }, [type, name]);\n\n  const formatIcon = (type: string) => {\n    switch (type) {\n      case \"spell\":\n        return <FontAwesomeIcon icon={faMeteor} />;\n      case \"item\":\n        return <GiCrystalWand />;\n      case \"gear\":\n        return <GiBackpack />;\n      case \"race\":\n        return <GiWomanElfFace />;\n      case \"class\":\n        return <GiPlagueDoctorProfile />;\n      case \"selection\":\n        return <BiSelectMultiple />;\n      case \"char\":\n        return <FontAwesomeIcon icon={faIdCard} />;\n      case \"monster\":\n        return <FontAwesomeIcon icon={faDragon} />;\n      case \"encounter\":\n        return <GiSwordClash />;\n      case \"campaign\":\n        return <GiBookmarklet />;\n      case \"quest\":\n        return <GiScrollUnfurled />;\n      case \"event\":\n        return <MdEvent />;\n      case \"world\":\n        return <GiSolarSystem />;\n      case \"location\":\n        return <FontAwesomeIcon icon={faMapMarkedAlt} />;\n      case \"npc\":\n        return <GiDjinn />;\n      case \"randomTable\":\n        return <FontAwesomeIcon icon={faTable} />;\n      case \"book\":\n        return <GiBookshelf />;\n        case \"group\":\n          return <HiUserGroup />;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      {loading && <BiHistory />}\n      {!loading && !entitiyFound && <BiError />}\n      {!loading && entitiyFound && <>{formatIcon(type)}</>}\n    </>\n  );\n};\n\nexport default LinkCheck;\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\nimport LinkCheck from \"./LinkCheck\";\n\ninterface $Props {\n  text: string;\n}\n\nconst FormatedText = ({ text }: $Props) => {\n  const [formatedText, setFormatedText] = useState<JSX.Element>();\n  let history = useHistory();\n\n  const cut = (str: string, cutStart: number, cutEnd: number) => {\n    return str.substr(0, cutStart) + str.substr(cutEnd + 1);\n  };\n\n  const formatLink = useCallback(\n    (text: string) => {\n      if (text !== undefined) {\n        if (text.includes(\"[[\") && text.includes(\"]]\")) {\n          const parts = text.split(\"[[\");\n          let formattedParts: any[] = [];\n          parts.forEach((part: string, index: number) => {\n            if (part.includes(\"]]\")) {\n              const codePart: string[] = part.split(\"]]\");\n              const linkParts: string[] = codePart[0].split(\".\");\n              const link: string = \"/\" + linkParts[0] + \"-detail/name/\" + linkParts[1];\n              formattedParts.push(\n                <TextPart key={index}>\n                  <Link onClick={() => history.push(link)}>\n                    <LinkCheck type={linkParts[0]} name={linkParts[1]} /> {linkParts[1]}\n                  </Link>\n                  <TextPart>{codePart[1]}</TextPart>\n                </TextPart>\n              );\n            } else {\n              if (part !== \"\") formattedParts.push(<TextPart key={index}>{part}</TextPart>);\n            }\n          });\n          return <>{formattedParts}</>;\n        } else {\n          return <TextPart>{text}</TextPart>;\n        }\n      }\n    },\n    [history]\n  );\n\n  const formatTable = useCallback(\n    (textPart: string) => {\n      if (textPart.includes(\"||table||\")) {\n        const table: string[] = text.split(\"||table||\");\n        const tableRows: string[] = table[1].split(\"||\");\n        let isHead = true;\n        return (\n          <>\n            {formatLink(table[0])}\n            <table>\n              <tbody>\n                {tableRows.map((row: string, index: number) => {\n                  if (row.includes(\"|\")) {\n                    if (isHead) {\n                      isHead = false;\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableHeadProp key={index}>{cell}</TableHeadProp>;\n                          })}\n                        </tr>\n                      );\n                    } else {\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableProp key={index}>{formatLink(cell)}</TableProp>;\n                          })}\n                        </tr>\n                      );\n                    }\n                  } else {\n                    return <></>;\n                  }\n                })}\n              </tbody>\n            </table>\n            {formatLink(table[2])}\n          </>\n        );\n      } else {\n        return formatLink(textPart);\n      }\n    },\n    [text, formatLink]\n  );\n\n  const formatText = useCallback(\n    (textPart: string) => {\n      while (textPart.includes(\"{{\")) {\n        const cutStart = textPart.indexOf(\"{{\");\n        const cutEnd = textPart.indexOf(\"}}\") + 1;\n        textPart = cut(textPart, cutStart, cutEnd);\n      }\n      return formatTable(textPart);\n    },\n    [formatTable]\n  );\n\n  useEffect(() => {\n    if (text !== undefined) {\n      let formatedText = formatText(text);\n      setFormatedText(formatedText);\n    }\n  }, [text, history, formatText]);\n\n  return <>{formatedText}</>;\n};\n\nexport default FormatedText;\n\nconst Link = styled.span`\n  display: inline-block;\n  background-color: ${({ theme }) => theme.tile.backgroundColorLink};\n  border-radius: 5px;\n  text-decoration: none;\n  color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 14px;\n  padding: 0px 5px 0px 5px;\n  cursor: pointer;\n  white-space: pre;\n`;\n\nconst TextPart = styled.span`\n  white-space: pre-line;\n`;\n\nconst TableHeadProp = styled.th`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 2px 5px 2px 5px;\n`;\n\nconst TableProp = styled.td`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 5px;\n  text-align: center;\n`;\n","import React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { MyAppDatabase } from \"../../../../../database/MyDatabase\";\nimport { useItem } from \"../../../../../hooks/DexieHooks\";\nimport { LoadingSpinner } from \"../../../../Loading\";\nimport EventDetail from \"../EventDetail\";\n\ntype TParams = { id: string };\n\nconst IdToEvent = ({ match }: RouteComponentProps<TParams>) => {\n  const db = new MyAppDatabase();\n  const [event, loading, error] = useItem(db.events, +match.params.id);\n\n  return (\n    <>\n      {!error && loading && <LoadingSpinner />}\n      {error && !loading && <>Fail by Id</>}\n      {!error && !loading && event !== undefined && (\n        <EventDetail event={event} isNew={event.name === \"\" ? true : false} />\n      )}\n    </>\n  );\n};\n\nexport default IdToEvent;\n","import Dexie from \"dexie\";\nimport { useReducer, useEffect, useCallback, useState } from \"react\";\nimport Filter from \"../data/Filter\";\nimport ReactDOM from \"react-dom\";\n\ntype TableState<T> = [T[] | undefined, boolean, Dexie.DexieError | undefined];\ntype TableAction<T> =\n  | { type: \"resolved\"; data: T[] }\n  | { type: \"empty\" }\n  | { type: \"reset\" }\n  | { type: \"error\"; error: Dexie.DexieError };\n\ntype ItemState<T> = [T | undefined, boolean, Dexie.DexieError | undefined];\ntype ItemAction<T> =\n  | { type: \"resolved\"; data: T }\n  | { type: \"empty\" }\n  | { type: \"reset\" }\n  | { type: \"error\"; error: Dexie.DexieError };\n\nexport const useTable = <T, U>(table: Dexie.Table<T, U>): TableState<T> => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const reducer = useCallback((state: TableState<T>, action: TableAction<T>): TableState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () =>\n        table\n          .toArray()\n          .then((data) => {\n            dispatch({\n              type: \"resolved\",\n              data,\n            });\n          })\n          .catch((error) => {\n            dispatch({\n              type: \"error\",\n              error,\n            });\n          });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, effect]);\n\n  return state;\n};\n\nexport const useTableByFilter = <T, U>(\n  table: Dexie.Table<T, U>,\n  filters: Filter[]\n): TableState<T> => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const [filter, setFilter] = useState<Filter[]>(filters);\n  const reducer = useCallback((state: TableState<T>, action: TableAction<T>): TableState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      case \"reset\":\n        return [undefined, true, undefined];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (filter !== filters) {\n      ReactDOM.unstable_batchedUpdates(() => {\n        dispatch({ type: \"reset\" });\n        setFilter(filters);\n        setEffect(true);\n      });\n    }\n  }, [filter, filters, setEffect]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () => console.time(\"filtered get all\");\n      table\n        .filter((obj: T) => {\n          let test: boolean[] = [];\n          filters.forEach((filter) => {\n            if (typeof filter.value === \"string\") {\n              test.push(\n                // @ts-ignore\n                obj[filter.fieldName].toLowerCase().includes(filter.value.toLowerCase())\n              );\n            } else if (typeof filter.value === \"number\") {\n              // @ts-ignore\n              test.push(obj[filter.fieldName] === filter.value);\n            } else if (typeof filter.value === \"boolean\") {\n              // @ts-ignore\n              test.push(obj[filter.fieldName] === filter.value);\n            } else if (filter.value instanceof Array) {\n              let arrayTest: boolean = false;\n              filter.value.forEach((filterPart: string | boolean | number) => {\n                if (typeof filterPart === \"string\") {\n                  if (\n                    // @ts-ignore\n                    obj[filter.fieldName].toLowerCase().includes(filterPart.toLowerCase())\n                  )\n                    arrayTest = true;\n                } else if (typeof filterPart === \"number\") {\n                  // @ts-ignore\n                  if (obj[filter.fieldName] === filterPart) arrayTest = true;\n                } else if (typeof filterPart === \"boolean\") {\n                  // @ts-ignore\n                  if (obj[filter.fieldName] === filterPart) arrayTest = true;\n                }\n              });\n              test.push(arrayTest);\n            }\n          });\n\n          let result = true;\n          test.forEach((val) => {\n            if (!val) result = false;\n          });\n          return result;\n        })\n        .sortBy(\"name\")\n        .then((data) => {\n          console.timeEnd(\"filtered get all\");\n          dispatch({\n            type: \"resolved\",\n            data,\n          });\n        })\n        .catch((error) => {\n          dispatch({\n            type: \"error\",\n            error,\n          });\n        });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, effect, filters]);\n\n  return state;\n};\n\nexport const useItem = <T, U>(table: Dexie.Table<T, U>, id: U) => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const reducer = useCallback((state: ItemState<T>, action: ItemAction<T>): ItemState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"empty\":\n        return [undefined, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () =>\n        table\n          .get(id)\n          .then((data) => {\n            if (data !== undefined) {\n              dispatch({\n                type: \"resolved\",\n                data,\n              });\n            } else {\n              dispatch({\n                type: \"empty\",\n              });\n            }\n          })\n          .catch((error) => {\n            dispatch({\n              type: \"error\",\n              error,\n            });\n          });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, id, effect]);\n\n  return state;\n};\n\nexport const useItemByAttr = <T, U>(table: Dexie.Table<T, U>, attr: string, attrValue: string) => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const reducer = useCallback((state: ItemState<T>, action: ItemAction<T>): ItemState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"empty\":\n        return [undefined, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () =>\n        table\n          .where(attr)\n          .equalsIgnoreCase(attrValue)\n          .first()\n          .then((data) => {\n            if (data !== undefined) {\n              dispatch({\n                type: \"resolved\",\n                data,\n              });\n            } else {\n              dispatch({\n                type: \"empty\",\n              });\n            }\n          })\n          .catch((error) => {\n            dispatch({\n              type: \"error\",\n              error,\n            });\n          });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, attr, attrValue, effect]);\n\n  return state;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  icon: IconDefinition;\n  transform?: string | Transform;\n  action: () => void;\n}\n\nconst BackButton = ({ icon, transform, action }: $Props) => {\n  return (\n    <Back onClick={action}>\n      <Icon icon={icon} transform={transform} />\n    </Back>\n  );\n};\n\nexport default BackButton;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n  &:hover {\n    color: ${({ theme }) => theme.buttons.color};\n  }\n`;\n\nconst Back = styled.div`\n  float: left;\n  font-size: calc(${({ theme }) => theme.buttons.height} + 10px);\n  margin: 10px 0px 0px 10px;\n  cursor: pointer;\n`;\n","import styled from \"styled-components\";\n\nexport const ToggleLeft = styled.div`\n  width: auto;\n  padding: 10px;\n  margin: 5px 0px 5px 5px;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: left;\n  cursor: pointer;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n  border-radius: 5px 0px 0px 5px;\n\n  transition: color 0.2s, background-color 0.2s;\n\n  &:hover {\n    color: ${({ theme }) => theme.buttons.hoverColor};\n  }\n`;\n\nexport const ToggleRight = styled(ToggleLeft)`\n  margin: 5px 5px 5px 0px;\n\n  border-radius: 0px 5px 5px 0px;\n`;\n\ntype EditMode = {\n  mode: string;\n};\n\nexport const EditToggle = styled.div<EditMode>`\n  width: auto;\n  height: ${({ theme }) => theme.buttons.height};\n  float: right;\n  color: ${({ theme }) => theme.buttons.color};\n\n  ${ToggleLeft} {\n    background-color: ${(props) => {\n      if (props.mode !== \"true\") {\n        return ({ theme }) => theme.buttons.backgroundColor;\n      } else {\n        return ({ theme }) => theme.tile.backgroundColor;\n      }\n    }};\n  }\n\n  ${ToggleRight} {\n    background-color: ${(props) => {\n      if (props.mode === \"true\") {\n        return ({ theme }) => theme.buttons.backgroundColor;\n      } else {\n        return ({ theme }) => theme.tile.backgroundColor;\n      }\n    }};\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Peer from \"peerjs\";\nimport { reciveAllPromise } from \"../../services/DatabaseService\";\nimport IEntity from \"../../data/IEntity\";\nimport { generateBrokerId } from \"../../services/PeerIdService\";\n\nimport { faExclamationCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport StringField from \"../form_elements/StringField\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\ninterface $Props {\n  data: string | IEntity;\n  mode: \"ALL\" | \"THIS\";\n}\n\nconst P2PSender = ({ data, mode }: $Props) => {\n  const [name, setName] = useState<string>(\"\");\n  const [peer, setPeer] = useState<Peer>();\n  const [error, setError] = useState<any>();\n\n  useEffect(() => {\n    if (peer === undefined) {\n      const brokerId = generateBrokerId();\n      const newPeer = new Peer(brokerId, {\n        host: \"peerjs.thedndtome.com\",\n        secure: true,\n      });\n      console.log(newPeer);\n      newPeer.on(\"connection\", function (conn) {\n        conn.on(\"error\", function (errorData) {\n          setError(errorData);\n        });\n        conn.on(\"open\", function () {\n          conn.send(data);\n        });\n      });\n      setPeer(newPeer);\n    }\n  }, [data, peer]);\n\n  useEffect(() => {\n    if (peer !== undefined) {\n      if (peer.disconnected && !peer.destroyed) {\n        peer.reconnect();\n      }\n      if (mode === \"ALL\" && typeof data === \"string\") {\n        reciveAllPromise(data).then((results) => {\n          console.log(results);\n          setName(data);\n          peer.on(\"connection\", function (conn) {\n            conn.on(\"error\", function (errorData) {\n              setError(errorData);\n            });\n            conn.on(\"open\", function () {\n              conn.send(results);\n            });\n          });\n        });\n      } else if (mode === \"THIS\" && typeof data !== \"string\") {\n        setName(data.name);\n        peer.on(\"connection\", function (conn) {\n          conn.on(\"error\", function (errorData) {\n            setError(errorData);\n          });\n          conn.on(\"open\", function () {\n            conn.send(data);\n          });\n        });\n      }\n    }\n  }, [data, mode, peer]);\n\n  return (\n    <>\n      {peer !== undefined && peer.id !== null && (\n        <>\n          <StringField value={peer.id} label={`Your ${name} ID:`} onChange={() => {}} />\n        </>\n      )}\n      {error && <Icon icon={faExclamationCircle} />}\n    </>\n  );\n};\n\nexport default P2PSender;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n","const getRandomInteger = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nexport const generateBrokerId = () => {\n  let password = \"\";\n  const characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  for (let i = 0; i < 13; i++) {\n    password += characters[getRandomInteger(0, characters.length - 1)];\n  }\n  return password;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport TextButton from \"../form_elements/TextButton\";\n\ninterface $Props {\n  message: string;\n  icon?: IconDefinition;\n  confirmeText: string;\n  confirmeClick: () => void;\n  abortText: string;\n  abortClick: () => void;\n}\n\nconst Dialog = ({\n  message,\n  icon,\n  confirmeText,\n  confirmeClick,\n  abortText,\n  abortClick,\n}: $Props) => {\n  return (\n    <DialogWrapper>\n      <Message>\n        {icon ? <Icon icon={icon} /> : \"\"} {message}\n      </Message>\n      <ButtonBar>\n        <TextButton text={abortText} onClick={abortClick} />\n        <TextButton text={confirmeText} onClick={confirmeClick} />\n      </ButtonBar>\n    </DialogWrapper>\n  );\n};\n\nexport default Dialog;\n\nconst DialogWrapper = styled.div`\n  width: 180px;\n  position: absolute;\n  z-index: 1010;\n  top: 10px;\n  left: calc(50% - 100px);\n  padding: 10px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  color: ${({ theme }) => theme.tile.color};\n`;\n\nconst Message = styled.div`\n  width: 100%;\n  text-align: center;\n`;\n\nconst ButtonBar = styled.div`\n  width: 100%;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n  margin-right: 5px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: string;\n  label: string;\n  height?: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: string) => void;\n}\n\nconst TextField = ({ value, label, height, icon, transform, onChange }: $Props) => {\n  return (\n    <Field>\n      <LabelText>\n        {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n      </LabelText>\n      <Input height={height} value={value} onChange={(e) => onChange(e.target.value)}></Input>\n    </Field>\n  );\n};\n\nexport default TextField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  min-width: calc(100% - 20px);\n  flex: 3 3 auto;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1;\n  min-width: 100%;\n  height: 30px;\n  line-height: 30px;\n`;\n\ntype TextProps = {\n  height?: string;\n};\n\nconst Input = styled.textarea<TextProps>`\n  flex: 1 1;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  height: ${({ height }) => (height !== undefined ? height : \"auto\")};\n  min-height: ${({ height }) => (height !== undefined ? height : \"22vh\")};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n`;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 98;"],"sourceRoot":""}