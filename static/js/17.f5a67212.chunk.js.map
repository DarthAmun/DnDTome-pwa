{"version":3,"sources":["components/form_elements/IconButton.tsx","components/form_elements/TextButton.tsx","components/form_elements/StringField.tsx","components/entities/npc/details/NpcView.tsx","components/entities/npc/details/NpcEditView.tsx","components/entities/npc/details/NpcDetail.tsx","components/general_elements/LinkCheck.tsx","components/general_elements/FormatedText.tsx","hooks/DexieHooks.tsx","components/form_elements/BackButton.tsx","components/general_elements/ToggleStyle.tsx","components/p2p/P2PSender.tsx","services/PeerIdService.tsx","components/general_elements/Dialog.tsx","components/form_elements/TextField.tsx","../node_modules/peerjs/dist sync"],"names":["IconButton","icon","floatLeft","disabled","transform","onClick","SimpleButton","left","Icon","DisabledSimpleButton","styled","div","theme","buttons","color","backgroundColor","height","FontAwesomeIcon","TextButton","text","button","hoverColor","StringField","value","label","placeholder","onChange","Field","LabelText","Input","type","e","target","tile","main","highlight","input","NpcView","npc","useState","send","setSend","getPicture","useCallback","undefined","pic","CenterWrapper","View","ImageName","name","Name","PropWrapper","Text","FormatedText","description","PropTitle","traits","faPaperPlane","P2PSender","data","mode","span","backgroundColorLink","Image","style","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","ImageElm","Empty","NpcEditView","onEdit","faImage","sources","faLink","TextField","faBookOpen","NpcDetail","isNew","editMode","setMode","npcObj","editNpc","showAlert","setAlert","showDeleteDialog","setDeleteDialog","message","setMessage","unsavedChanges","setUnsavedChanges","history","useHistory","useEffect","Dialog","faExclamationTriangle","confirmeText","confirmeClick","remove","id","goBack","abortText","abortClick","TopBar","BackButton","faArrowLeft","action","toString","title","tableName","updateWithCallback","result","setTimeout","updateNpc","faSave","faTrash","Message","LinkCheck","loading","setLoading","entitiyFound","setEntity","recivePromiseByAttributeCount","then","count","faMeteor","faIdCard","faDragon","faMapMarkedAlt","faTable","formatIcon","formatedText","setFormatedText","cut","str","cutStart","cutEnd","substr","formatLink","includes","parts","split","formattedParts","forEach","part","index","codePart","linkParts","link","push","TextPart","key","Link","formatTable","textPart","table","tableRows","isHead","map","row","cells","cell","TableHeadProp","TableProp","formatText","indexOf","th","td","useItem","effect","setEffect","reducer","state","error","useReducer","dispatch","get","catch","useItemByAttr","attr","attrValue","where","equals","first","Back","ToggleLeft","ToggleRight","EditToggle","props","setName","peer","setPeer","setError","brokerId","min","max","password","characters","i","length","Math","floor","random","generateBrokerId","newPeer","Peer","host","secure","console","log","on","conn","errorData","disconnected","destroyed","reconnect","reciveAllPromise","results","faExclamationCircle","DialogWrapper","ButtonBar","textarea","webpackEmptyContext","req","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/17.f5a67212.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  icon: IconDefinition;\n  floatLeft?: boolean;\n  disabled?: boolean;\n  transform?: string | Transform;\n  onClick: (() => void) | ((e: any) => void);\n}\n\nconst IconButton = ({ icon, floatLeft, disabled, transform, onClick }: $Props) => {\n  return (\n    <>\n      {!disabled && (\n        <SimpleButton left={floatLeft} onClick={onClick}>\n          <Icon icon={icon} transform={transform} />\n        </SimpleButton>\n      )}\n      {disabled && (\n        <DisabledSimpleButton>\n          <Icon icon={icon} transform={transform} />\n        </DisabledSimpleButton>\n      )}\n    </>\n  );\n};\n\nexport default IconButton;\n\ntype FloatMpde = {\n  left?: boolean;\n};\n\nconst SimpleButton = styled.div<FloatMpde>`\n  color: ${({ theme }) => theme.buttons.color};\n  background-color: ${({ theme }) => theme.buttons.backgroundColor};\n  cursor: pointer;\n\n  font-size: 16px;\n  overflow: hidden;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: ${({ left }) => (left ? \"left\" : \"right\")};\n  padding: 10px;\n  margin: 5px;\n  border-radius: 10px;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n\n  transition: color 0.2s;\n\n  &:hover {\n    color: white;\n  }\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst DisabledSimpleButton = styled(SimpleButton)`\n  color: ${({ theme }) => theme.buttons.backgroundColor};\n  background-color: ${({ theme }) => theme.buttons.color};\n  cursor: not-allowed;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  text: string;\n  disabled?: boolean;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onClick: () => void;\n}\n\nconst TextButton = ({ text, icon, transform, disabled, onClick }: $Props) => {\n  return (\n    <SimpleButton onClick={onClick} disabled={disabled}>\n      {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {text}\n    </SimpleButton>\n  );\n};\n\nexport default TextButton;\n\nconst SimpleButton = styled.button`\n  color: ${({ theme }) => theme.buttons.color};\n  background-color: ${({ theme }) => theme.buttons.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: right;\n  padding: 10px;\n  margin: 5px;\n  border-radius: 10px;\n  cursor: pointer;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n  box-sizing: content-box;\n  border: none;\n\n  transition: color 0.2s;\n\n  &:hover {\n    color: ${({ theme }) => theme.buttons.hoverColor};\n  }\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.buttons.disabled};\n  }\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n  margin-right: 5px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: string;\n  label: string;\n  placeholder?: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: string) => void;\n}\n\nconst StringField = ({ value, label, placeholder, icon, transform, onChange }: $Props) => (\n  <Field>\n    <LabelText>\n      {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n    </LabelText>\n    <Input\n      type=\"text\"\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      placeholder={placeholder}\n    ></Input>\n  </Field>\n);\n\nexport default StringField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: 38px;\n  line-height: 30px;\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1 auto;\n`;\n\nconst Input = styled.input`\n  flex: 3 1 auto;\n  height: 38px;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin-left: 5px;\n  border-radius: 5px;\n  width: 0;\n  min-width: 100px;\n`;\n","import React, { useCallback, useState } from \"react\";\nimport Npc from \"../../../../data/campaign/Npc\";\nimport styled from \"styled-components\";\n\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport FormatedText from \"../../../general_elements/FormatedText\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport P2PSender from \"../../../p2p/P2PSender\";\n\ninterface $Props {\n  npc: Npc;\n}\n\nconst NpcView = ({ npc }: $Props) => {\n  const [send, setSend] = useState<boolean>(false);\n\n  const getPicture = useCallback(() => {\n    if (npc !== undefined) {\n      if (npc.pic === \"\" || npc.pic === null) {\n        return \"\";\n      }\n      return npc.pic;\n    }\n    return \"\";\n  }, [npc]);\n\n  return (\n    <CenterWrapper>\n      <View>\n        {getPicture() !== \"\" ? (\n          <ImageName>\n            <Image pic={getPicture()}></Image>\n            <b>{npc.name}</b>\n          </ImageName>\n        ) : (\n          <Name>\n            <b>{npc.name}</b>\n          </Name>\n        )}\n\n        <PropWrapper>\n          <Text>\n            <FormatedText text={npc.description} />\n          </Text>\n          <Text>\n            <PropTitle>Traits: </PropTitle>\n            <FormatedText text={npc.traits} />\n          </Text>\n        </PropWrapper>\n        <PropWrapper>\n          {!send && (\n            <TextButton\n              text={`Send ${npc.name}`}\n              icon={faPaperPlane}\n              onClick={() => setSend(true)}\n            />\n          )}\n          {!!send && <P2PSender data={npc} mode={\"THIS\"} />}\n        </PropWrapper>\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default NpcView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: var(--card-title-color);\n  text-align: center;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst ImageName = styled.div`\n  height: 30px;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: var(--card-title-color);\n  text-align: center;\n  border-radius: 50px 5px 5px 50px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: 100%;\n  margin: 2px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.tile.backgroundColorLink};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\ninterface $ImageProps {\n  pic: string;\n}\n\nconst Image = ({ pic }: $ImageProps) => {\n  const style = {\n    backgroundImage: `url(${pic})`,\n    backgroundPosition: \"center\",\n    backgroundSize: \"cover\",\n    backgroundRepeat: \"no-repeat\",\n  };\n\n  if (pic !== \"\") {\n    return <ImageElm style={style}></ImageElm>;\n  } else {\n    return <Empty />;\n  }\n};\n\nconst ImageElm = styled.div`\n  margin: -10px 5px -10px -10px;\n  height: 47px;\n  width: 47px;\n  float: left;\n  border-radius: 100px;\n  border: 3px solid ${({ theme }) => theme.main.highlight};\n  background-color: white;\n  overflow: hidden;\n`;\nconst Empty = styled.div``;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Npc from \"../../../../data/campaign/Npc\";\n\nimport StringField from \"../../../form_elements/StringField\";\nimport TextField from \"../../../form_elements/TextField\";\n\nimport { faLink, faBookOpen, faImage } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface $Props {\n  npc: Npc;\n  onEdit: (value: Npc) => void;\n}\n\nconst NpcEditView = ({ npc, onEdit }: $Props) => {\n  return (\n    <CenterWrapper>\n      <View>\n        <StringField\n          value={npc.name}\n          label=\"Name\"\n          onChange={(name) => onEdit({ ...npc, name: name })}\n        />\n        <StringField\n          value={npc.pic}\n          label=\"Picture\"\n          icon={faImage}\n          onChange={(pic) => onEdit({ ...npc, pic: pic })}\n        />\n        <StringField\n          value={npc.sources}\n          label=\"Sources\"\n          icon={faLink}\n          onChange={(sources) => onEdit({ ...npc, sources: sources })}\n        />\n        <TextField\n          value={npc.description}\n          label=\"Text\"\n          icon={faBookOpen}\n          onChange={(description) => onEdit({ ...npc, description: description })}\n        />\n        <TextField\n          value={npc.traits}\n          label=\"Traits\"\n          icon={faBookOpen}\n          onChange={(traits) => onEdit({ ...npc, traits: traits })}\n        />\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default NpcEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  padding: 5px;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\n\nimport {\n  faArrowLeft,\n  faSave,\n  faTrash,\n  faExclamationTriangle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport NpcView from \"./NpcView\";\nimport NpcEditView from \"./NpcEditView\";\nimport BackButton from \"../../../form_elements/BackButton\";\nimport Npc from \"../../../../data/campaign/Npc\";\nimport IconButton from \"../../../form_elements/IconButton\";\nimport { remove, updateWithCallback } from \"../../../../services/DatabaseService\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Dialog from \"../../../general_elements/Dialog\";\nimport { EditToggle, ToggleLeft, ToggleRight } from \"../../../general_elements/ToggleStyle\";\n\ninterface $Props {\n  npc: Npc;\n  isNew: boolean;\n}\n\nconst NpcDetail = ({ npc, isNew }: $Props) => {\n  const [editMode, setMode] = useState<boolean>(isNew);\n  const [npcObj, editNpc] = useState<Npc>(npc);\n  const [showAlert, setAlert] = useState<boolean>(false);\n  const [showDeleteDialog, setDeleteDialog] = useState<boolean>(false);\n  const [message, setMessage] = useState<string>(\"\");\n  const [unsavedChanges, setUnsavedChanges] = useState<boolean>(false);\n  let history = useHistory();\n\n  const deleteNpc = () => {\n    setDeleteDialog(true);\n  };\n\n  useEffect(() => {\n    if (npcObj !== npc) {\n      setUnsavedChanges(true);\n    }\n  }, [npcObj, npc]);\n\n  const updateNpc = (tableName: string, npcObj: Npc) => {\n    updateWithCallback(tableName, npcObj, (result) => {\n      if (result > 0) {\n        setUnsavedChanges(false);\n        setMessage(\"Saved successful!\");\n        setAlert(true);\n      } else {\n        setMessage(\"Something went wrong!\");\n        setAlert(true);\n      }\n      setTimeout(() => {\n        setAlert(false);\n      }, 3000);\n    });\n  };\n\n  return (\n    <>\n      {showDeleteDialog && (\n        <Dialog\n          message={`Delete ${npc.name}?`}\n          icon={faExclamationTriangle}\n          confirmeText={\"Delete\"}\n          confirmeClick={() => {\n            remove(\"npcs\", npc.id);\n            history.goBack();\n          }}\n          abortText={\"Back\"}\n          abortClick={() => {\n            setDeleteDialog(false);\n          }}\n        />\n      )}\n      <TopBar>\n        <BackButton icon={faArrowLeft} action={() => history.goBack()} />\n        <EditToggle mode={editMode.toString()}>\n          <ToggleLeft onClick={() => setMode(false)}>View</ToggleLeft>\n          <ToggleRight onClick={() => setMode(true)}>Edit</ToggleRight>\n        </EditToggle>\n        {unsavedChanges && <Icon icon={faExclamationTriangle} title={\"Unsaved changes!\"} />}\n        {editMode && (\n          <>\n            <IconButton onClick={() => updateNpc(\"npcs\", npcObj)} icon={faSave} />\n            <IconButton onClick={() => deleteNpc()} icon={faTrash} />\n            {message && showAlert && <Message>{message}</Message>}\n          </>\n        )}\n      </TopBar>\n      {editMode ? (\n        <NpcEditView npc={npcObj} onEdit={(value) => editNpc(value)} />\n      ) : (\n        <NpcView npc={npcObj} />\n      )}\n    </>\n  );\n};\n\nexport default NpcDetail;\n\nconst TopBar = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  overflow: hidden;\n  flex: 1 1;\n  min-width: calc(100% - 20px);\n  height: 45px;\n  padding: 10px;\n`;\n\nconst Message = styled.div`\n  padding: 5px;\n  width: 150px;\n  height: 30px;\n  line-height: 30px;\n  border-radius: 5px;\n  float: right;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  float: right;\n  line-height: 30px;\n  display: block;\n  height: 30px;\n  padding: 10px;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { BiError, BiHistory, BiSelectMultiple } from \"react-icons/bi\";\nimport {\n  GiCrystalWand,\n  GiBackpack,\n  GiWomanElfFace,\n  GiPlagueDoctorProfile,\n  GiSwordClash,\n  GiBookmarklet,\n  GiScrollUnfurled,\n  GiSolarSystem,\n  GiDjinn,\n  GiBookshelf,\n} from \"react-icons/gi\";\nimport {\n  faMeteor,\n  faIdCard,\n  faDragon,\n  faMapMarkedAlt,\n  faTable,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { MdEvent } from \"react-icons/md\";\nimport { HiUserGroup } from \"react-icons/hi\";\nimport { recivePromiseByAttributeCount } from \"../../services/DatabaseService\";\n\ninterface $Props {\n  type: string;\n  name: string;\n}\n\nconst LinkCheck = ({ type, name }: $Props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [entitiyFound, setEntity] = useState<boolean>(false);\n\n  useEffect(() => {\n    recivePromiseByAttributeCount(type + \"s\", \"name\", name).then((count: number) => {\n      setEntity(count > 0);\n      setLoading(false);\n    });\n  }, [type, name]);\n\n  const formatIcon = (type: string) => {\n    switch (type) {\n      case \"spell\":\n        return <FontAwesomeIcon icon={faMeteor} />;\n      case \"item\":\n        return <GiCrystalWand />;\n      case \"gear\":\n        return <GiBackpack />;\n      case \"race\":\n        return <GiWomanElfFace />;\n      case \"class\":\n        return <GiPlagueDoctorProfile />;\n      case \"selection\":\n        return <BiSelectMultiple />;\n      case \"char\":\n        return <FontAwesomeIcon icon={faIdCard} />;\n      case \"monster\":\n        return <FontAwesomeIcon icon={faDragon} />;\n      case \"encounter\":\n        return <GiSwordClash />;\n      case \"campaign\":\n        return <GiBookmarklet />;\n      case \"quest\":\n        return <GiScrollUnfurled />;\n      case \"event\":\n        return <MdEvent />;\n      case \"world\":\n        return <GiSolarSystem />;\n      case \"location\":\n        return <FontAwesomeIcon icon={faMapMarkedAlt} />;\n      case \"npc\":\n        return <GiDjinn />;\n      case \"randomTable\":\n        return <FontAwesomeIcon icon={faTable} />;\n      case \"book\":\n        return <GiBookshelf />;\n        case \"group\":\n          return <HiUserGroup />;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      {loading && <BiHistory />}\n      {!loading && !entitiyFound && <BiError />}\n      {!loading && entitiyFound && <>{formatIcon(type)}</>}\n    </>\n  );\n};\n\nexport default LinkCheck;\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\nimport LinkCheck from \"./LinkCheck\";\n\ninterface $Props {\n  text: string;\n}\n\nconst FormatedText = ({ text }: $Props) => {\n  const [formatedText, setFormatedText] = useState<JSX.Element>();\n  let history = useHistory();\n\n  const cut = (str: string, cutStart: number, cutEnd: number) => {\n    return str.substr(0, cutStart) + str.substr(cutEnd + 1);\n  };\n\n  const formatLink = useCallback(\n    (text: string) => {\n      if (text !== undefined) {\n        if (text.includes(\"[[\") && text.includes(\"]]\")) {\n          const parts = text.split(\"[[\");\n          let formattedParts: any[] = [];\n          parts.forEach((part: string, index: number) => {\n            if (part.includes(\"]]\")) {\n              const codePart: string[] = part.split(\"]]\");\n              const linkParts: string[] = codePart[0].split(\".\");\n              const link: string = \"/\" + linkParts[0] + \"-detail/name/\" + linkParts[1];\n              formattedParts.push(\n                <TextPart key={index}>\n                  <Link onClick={() => history.push(link)}>\n                    <LinkCheck type={linkParts[0]} name={linkParts[1]} /> {linkParts[1]}\n                  </Link>\n                  <TextPart>{codePart[1]}</TextPart>\n                </TextPart>\n              );\n            } else {\n              if (part !== \"\") formattedParts.push(<TextPart key={index}>{part}</TextPart>);\n            }\n          });\n          return <>{formattedParts}</>;\n        } else {\n          return <TextPart>{text}</TextPart>;\n        }\n      }\n    },\n    [history]\n  );\n\n  const formatTable = useCallback(\n    (textPart: string) => {\n      if (textPart.includes(\"||table||\")) {\n        const table: string[] = text.split(\"||table||\");\n        const tableRows: string[] = table[1].split(\"||\");\n        let isHead = true;\n        return (\n          <>\n            {formatLink(table[0])}\n            <table>\n              <tbody>\n                {tableRows.map((row: string, index: number) => {\n                  if (row.includes(\"|\")) {\n                    if (isHead) {\n                      isHead = false;\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableHeadProp key={index}>{cell}</TableHeadProp>;\n                          })}\n                        </tr>\n                      );\n                    } else {\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableProp key={index}>{formatLink(cell)}</TableProp>;\n                          })}\n                        </tr>\n                      );\n                    }\n                  } else {\n                    return <></>;\n                  }\n                })}\n              </tbody>\n            </table>\n            {formatLink(table[2])}\n          </>\n        );\n      } else {\n        return formatLink(textPart);\n      }\n    },\n    [text, formatLink]\n  );\n\n  const formatText = useCallback(\n    (textPart: string) => {\n      while (textPart.includes(\"{{\")) {\n        const cutStart = textPart.indexOf(\"{{\");\n        const cutEnd = textPart.indexOf(\"}}\") + 1;\n        textPart = cut(textPart, cutStart, cutEnd);\n      }\n      return formatTable(textPart);\n    },\n    [formatTable]\n  );\n\n  useEffect(() => {\n    if (text !== undefined) {\n      let formatedText = formatText(text);\n      setFormatedText(formatedText);\n    }\n  }, [text, history, formatText]);\n\n  return <>{formatedText}</>;\n};\n\nexport default FormatedText;\n\nconst Link = styled.span`\n  display: inline-block;\n  background-color: ${({ theme }) => theme.tile.backgroundColorLink};\n  border-radius: 5px;\n  text-decoration: none;\n  color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 14px;\n  padding: 0px 5px 0px 5px;\n  cursor: pointer;\n  white-space: pre;\n`;\n\nconst TextPart = styled.span`\n  white-space: pre-line;\n`;\n\nconst TableHeadProp = styled.th`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 2px 5px 2px 5px;\n`;\n\nconst TableProp = styled.td`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 5px;\n  text-align: center;\n`;\n","import Dexie from \"dexie\";\nimport { useReducer, useEffect, useCallback, useState } from \"react\";\nimport Filter from \"../data/Filter\";\nimport ReactDOM from \"react-dom\";\n\ntype TableState<T> = [T[] | undefined, boolean, Dexie.DexieError | undefined];\ntype TableAction<T> =\n  | { type: \"resolved\"; data: T[] }\n  | { type: \"empty\" }\n  | { type: \"reset\" }\n  | { type: \"error\"; error: Dexie.DexieError };\n\ntype ItemState<T> = [T | undefined, boolean, Dexie.DexieError | undefined];\ntype ItemAction<T> =\n  | { type: \"resolved\"; data: T }\n  | { type: \"empty\" }\n  | { type: \"reset\" }\n  | { type: \"error\"; error: Dexie.DexieError };\n\nexport const useTable = <T, U>(table: Dexie.Table<T, U>): TableState<T> => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const reducer = useCallback((state: TableState<T>, action: TableAction<T>): TableState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () =>\n        table\n          .toArray()\n          .then((data) => {\n            dispatch({\n              type: \"resolved\",\n              data,\n            });\n          })\n          .catch((error) => {\n            dispatch({\n              type: \"error\",\n              error,\n            });\n          });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, effect]);\n\n  return state;\n};\n\nexport const useTableByFilter = <T, U>(\n  table: Dexie.Table<T, U>,\n  filters: Filter[]\n): TableState<T> => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const [filter, setFilter] = useState<Filter[]>(filters);\n  const reducer = useCallback((state: TableState<T>, action: TableAction<T>): TableState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      case \"reset\":\n        return [undefined, true, undefined];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (filter !== filters) {\n      ReactDOM.unstable_batchedUpdates(() => {\n        dispatch({ type: \"reset\" });\n        setFilter(filters);\n        setEffect(true);\n      });\n    }\n  }, [filter, filters, setEffect]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () => console.time(\"filtered get all\");\n      table\n        .filter((obj: T) => {\n          let test: boolean[] = [];\n          filters.forEach((filter) => {\n            if (typeof filter.value === \"string\") {\n              test.push(\n                // @ts-ignore\n                obj[filter.fieldName].toLowerCase().includes(filter.value.toLowerCase())\n              );\n            } else if (typeof filter.value === \"number\") {\n              // @ts-ignore\n              test.push(obj[filter.fieldName] === filter.value);\n            } else if (typeof filter.value === \"boolean\") {\n              // @ts-ignore\n              test.push(obj[filter.fieldName] === filter.value);\n            } else if (filter.value instanceof Array) {\n              let arrayTest: boolean = false;\n              filter.value.forEach((filterPart: string | boolean | number) => {\n                if (typeof filterPart === \"string\") {\n                  if (\n                    // @ts-ignore\n                    obj[filter.fieldName].toLowerCase().includes(filterPart.toLowerCase())\n                  )\n                    arrayTest = true;\n                } else if (typeof filterPart === \"number\") {\n                  // @ts-ignore\n                  if (obj[filter.fieldName] === filterPart) arrayTest = true;\n                } else if (typeof filterPart === \"boolean\") {\n                  // @ts-ignore\n                  if (obj[filter.fieldName] === filterPart) arrayTest = true;\n                }\n              });\n              test.push(arrayTest);\n            }\n          });\n\n          let result = true;\n          test.forEach((val) => {\n            if (!val) result = false;\n          });\n          return result;\n        })\n        .sortBy(\"name\")\n        .then((data) => {\n          console.timeEnd(\"filtered get all\");\n          dispatch({\n            type: \"resolved\",\n            data,\n          });\n        })\n        .catch((error) => {\n          dispatch({\n            type: \"error\",\n            error,\n          });\n        });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, effect, filters]);\n\n  return state;\n};\n\nexport const useItem = <T, U>(table: Dexie.Table<T, U>, id: U) => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const reducer = useCallback((state: ItemState<T>, action: ItemAction<T>): ItemState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"empty\":\n        return [undefined, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () =>\n        table\n          .get(id)\n          .then((data) => {\n            if (data !== undefined) {\n              dispatch({\n                type: \"resolved\",\n                data,\n              });\n            } else {\n              dispatch({\n                type: \"empty\",\n              });\n            }\n          })\n          .catch((error) => {\n            dispatch({\n              type: \"error\",\n              error,\n            });\n          });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, id, effect]);\n\n  return state;\n};\n\nexport const useItemByAttr = <T, U>(table: Dexie.Table<T, U>, attr: string, attrValue: string) => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const reducer = useCallback((state: ItemState<T>, action: ItemAction<T>): ItemState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"empty\":\n        return [undefined, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () =>\n        table\n          .where(attr)\n          .equals(attrValue)\n          .first()\n          .then((data) => {\n            if (data !== undefined) {\n              dispatch({\n                type: \"resolved\",\n                data,\n              });\n            } else {\n              dispatch({\n                type: \"empty\",\n              });\n            }\n          })\n          .catch((error) => {\n            dispatch({\n              type: \"error\",\n              error,\n            });\n          });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, attr, attrValue, effect]);\n\n  return state;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  icon: IconDefinition;\n  transform?: string | Transform;\n  action: () => void;\n}\n\nconst BackButton = ({ icon, transform, action }: $Props) => {\n  return (\n    <Back onClick={action}>\n      <Icon icon={icon} transform={transform} />\n    </Back>\n  );\n};\n\nexport default BackButton;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n  &:hover {\n    color: ${({ theme }) => theme.buttons.color};\n  }\n`;\n\nconst Back = styled.div`\n  float: left;\n  font-size: calc(${({ theme }) => theme.buttons.height} + 10px);\n  margin: 10px 0px 0px 10px;\n  cursor: pointer;\n`;\n","import styled from \"styled-components\";\n\nexport const ToggleLeft = styled.div`\n  width: auto;\n  padding: 10px;\n  margin: 5px 0px 5px 5px;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: left;\n  cursor: pointer;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n  border-radius: 5px 0px 0px 5px;\n\n  transition: color 0.2s, background-color 0.2s;\n\n  &:hover {\n    color: ${({ theme }) => theme.buttons.hoverColor};\n  }\n`;\n\nexport const ToggleRight = styled(ToggleLeft)`\n  margin: 5px 5px 5px 0px;\n\n  border-radius: 0px 5px 5px 0px;\n`;\n\ntype EditMode = {\n  mode: string;\n};\n\nexport const EditToggle = styled.div<EditMode>`\n  width: auto;\n  height: ${({ theme }) => theme.buttons.height};\n  float: right;\n  color: ${({ theme }) => theme.buttons.color};\n\n  ${ToggleLeft} {\n    background-color: ${(props) => {\n      if (props.mode !== \"true\") {\n        return ({ theme }) => theme.buttons.backgroundColor;\n      } else {\n        return ({ theme }) => theme.tile.backgroundColor;\n      }\n    }};\n  }\n\n  ${ToggleRight} {\n    background-color: ${(props) => {\n      if (props.mode === \"true\") {\n        return ({ theme }) => theme.buttons.backgroundColor;\n      } else {\n        return ({ theme }) => theme.tile.backgroundColor;\n      }\n    }};\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Peer from \"peerjs\";\nimport { reciveAllPromise } from \"../../services/DatabaseService\";\nimport IEntity from \"../../data/IEntity\";\nimport { generateBrokerId } from \"../../services/PeerIdService\";\n\nimport { faExclamationCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport StringField from \"../form_elements/StringField\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\ninterface $Props {\n  data: string | IEntity;\n  mode: \"ALL\" | \"THIS\";\n}\n\nconst P2PSender = ({ data, mode }: $Props) => {\n  const [name, setName] = useState<string>(\"\");\n  const [peer, setPeer] = useState<Peer>();\n  const [error, setError] = useState<any>();\n\n  useEffect(() => {\n    if (peer === undefined) {\n      const brokerId = generateBrokerId();\n      const newPeer = new Peer(brokerId, {\n        host: \"peerjs.thedndtome.com\",\n        secure: true,\n      });\n      console.log(newPeer);\n      newPeer.on(\"connection\", function (conn) {\n        conn.on(\"error\", function (errorData) {\n          setError(errorData);\n        });\n        conn.on(\"open\", function () {\n          conn.send(data);\n        });\n      });\n      setPeer(newPeer);\n    }\n  }, [data, peer]);\n\n  useEffect(() => {\n    if (peer !== undefined) {\n      if (peer.disconnected && !peer.destroyed) {\n        peer.reconnect();\n      }\n      if (mode === \"ALL\" && typeof data === \"string\") {\n        reciveAllPromise(data).then((results) => {\n          console.log(results);\n          setName(data);\n          peer.on(\"connection\", function (conn) {\n            conn.on(\"error\", function (errorData) {\n              setError(errorData);\n            });\n            conn.on(\"open\", function () {\n              conn.send(results);\n            });\n          });\n        });\n      } else if (mode === \"THIS\" && typeof data !== \"string\") {\n        setName(data.name);\n        peer.on(\"connection\", function (conn) {\n          conn.on(\"error\", function (errorData) {\n            setError(errorData);\n          });\n          conn.on(\"open\", function () {\n            conn.send(data);\n          });\n        });\n      }\n    }\n  }, [data, mode, peer]);\n\n  return (\n    <>\n      {peer !== undefined && peer.id !== null && (\n        <>\n          <StringField value={peer.id} label={`Your ${name} ID:`} onChange={() => {}} />\n        </>\n      )}\n      {error && <Icon icon={faExclamationCircle} />}\n    </>\n  );\n};\n\nexport default P2PSender;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n","const getRandomInteger = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nexport const generateBrokerId = () => {\n  let password = \"\";\n  const characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  for (let i = 0; i < 13; i++) {\n    password += characters[getRandomInteger(0, characters.length - 1)];\n  }\n  return password;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport TextButton from \"../form_elements/TextButton\";\n\ninterface $Props {\n  message: string;\n  icon?: IconDefinition;\n  confirmeText: string;\n  confirmeClick: () => void;\n  abortText: string;\n  abortClick: () => void;\n}\n\nconst Dialog = ({\n  message,\n  icon,\n  confirmeText,\n  confirmeClick,\n  abortText,\n  abortClick,\n}: $Props) => {\n  return (\n    <DialogWrapper>\n      <Message>\n        {icon ? <Icon icon={icon} /> : \"\"} {message}\n      </Message>\n      <ButtonBar>\n        <TextButton text={abortText} onClick={abortClick} />\n        <TextButton text={confirmeText} onClick={confirmeClick} />\n      </ButtonBar>\n    </DialogWrapper>\n  );\n};\n\nexport default Dialog;\n\nconst DialogWrapper = styled.div`\n  width: 180px;\n  position: absolute;\n  z-index: 1010;\n  top: 10px;\n  left: calc(50% - 100px);\n  padding: 10px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  color: ${({ theme }) => theme.tile.color};\n`;\n\nconst Message = styled.div`\n  width: 100%;\n  text-align: center;\n`;\n\nconst ButtonBar = styled.div`\n  width: 100%;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n  margin-right: 5px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: string;\n  label: string;\n  height?: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: string) => void;\n}\n\nconst TextField = ({ value, label, height, icon, transform, onChange }: $Props) => {\n  return (\n    <Field>\n      <LabelText>\n        {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n      </LabelText>\n      <Input height={height} value={value} onChange={(e) => onChange(e.target.value)}></Input>\n    </Field>\n  );\n};\n\nexport default TextField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  min-width: calc(100% - 20px);\n  flex: 3 3 auto;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1;\n  min-width: 100%;\n  height: 30px;\n  line-height: 30px;\n`;\n\ntype TextProps = {\n  height?: string;\n};\n\nconst Input = styled.textarea<TextProps>`\n  flex: 1 1;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  height: ${({ height }) => (height !== undefined ? height : \"auto\")};\n  min-height: ${({ height }) => (height !== undefined ? height : \"22vh\")};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n`;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 95;"],"sourceRoot":""}