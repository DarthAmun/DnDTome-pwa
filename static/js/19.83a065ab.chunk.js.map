{"version":3,"sources":["components/statistics/gear/CostRatioChart.tsx","components/statistics/gear/DamageRatioChart.tsx","components/statistics/gear/GearTypeRatioChart.tsx","components/statistics/gear/WeightRatioChart.tsx","components/statistics/general/AmountOfEntitiesChart.tsx","components/statistics/items/AttunmentRatioChart.tsx","components/statistics/items/BaseRatioChart.tsx","components/statistics/items/ItemTypeRatioChart.tsx","components/statistics/items/MagicBonusRatioChart.tsx","components/statistics/items/RarityRatioChart.tsx","components/statistics/monsters/CrRatioChart.tsx","components/statistics/monsters/LegendaryRatioChart.tsx","components/statistics/monsters/MonsterTypeRatioChart.tsx","components/statistics/spells/ActionsRatioChart.tsx","components/statistics/spells/LevelRatioChart.tsx","components/statistics/spells/RitualRatioChart.tsx","components/statistics/spells/SchoolsRatioChart.tsx","components/statistics/Statistics.tsx","components/general_elements/TabBar.tsx"],"names":["CostRatioChart","useState","loading","setLoading","generalCounts","setGeneralCounts","useEffect","makeSchoolsData","a","reciveAttributeSelectionPromise","costs","promList","cost","recivePromiseByAttributeCount","toString","count","push","name","names","counts","colors","forEach","Math","floor","random","labels","datasets","data","backgroundColor","OptionSection","SelectionTitle","style","width","paddingBottom","styled","div","theme","tile","color","boxShadow","input","DamageRatioChart","types","type","GearTypeRatioChart","undefined","WeightRatioChart","weights","weight","AmountOfEntitiesChart","makeGeneralCountsData","reciveCountPromise","AttunmentRatioChart","attunments","attunment","BaseRatioChart","bases","base","ItemTypeRatioChart","MagicBonusRatioChart","magicBoni","magicBonus","RarityRatioChart","rarities","rarity","CrRatioChart","crs","cr","LegendaryRatioChart","leg","noleg","MonsterTypeRatioChart","ActionsRatioChart","times","newTimes","time","startsWith","LevelRatioChart","levels","level","RitualRatioChart","rituals","ritual","SchoolsRatioChart","schools","school","Statistics","activeTab","setTab","TabBar","children","onChange","tab","OptionTab","Bar","map","child","index","Tab","key","onClick","e","isActive","buttons","props"],"mappings":"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","file":"static/js/19.83a065ab.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst CostRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const costs = await reciveAttributeSelectionPromise(\"gears\", \"cost\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const cost of costs) {\n      if (cost !== \"\") {\n        const count = await recivePromiseByAttributeCount(\n          \"gears\",\n          \"cost\",\n          cost.toString()\n        );\n        promList.push({\n          name: cost.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Cost Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default CostRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius:  10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst DamageRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const types = await reciveAttributeSelectionPromise(\"gears\", \"damage\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const type of types) {\n      if (type !== \"\") {\n        const count = await recivePromiseByAttributeCount(\n          \"gears\",\n          \"damage\",\n          type.toString()\n        );\n        promList.push({\n          name: type.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Damage Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default DamageRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst GearTypeRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const types = await reciveAttributeSelectionPromise(\"gears\", \"type\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const type of types) {\n      if (type !== undefined) {\n        const count = await recivePromiseByAttributeCount(\n          \"gears\",\n          \"type\",\n          type as number\n        );\n        promList.push({\n          name: type.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Type Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default GearTypeRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst WeightRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const weights = await reciveAttributeSelectionPromise(\"gears\", \"weight\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const weight of weights) {\n      if (weight !== \"\") {\n        const count = await recivePromiseByAttributeCount(\n          \"gears\",\n          \"weight\",\n          weight.toString()\n        );\n        promList.push({\n          name: weight.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Weight Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default WeightRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport { reciveCountPromise } from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst AmountOfEntitiesChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeGeneralCountsData();\n  }, []);\n\n  const makeGeneralCountsData = async () => {\n    let promList: { name: string; count: number }[] = [];\n    promList.push({\n      name: \"spells\",\n      count: await reciveCountPromise(\"spells\"),\n    });\n    promList.push({ name: \"gears\", count: await reciveCountPromise(\"gears\") });\n    promList.push({ name: \"items\", count: await reciveCountPromise(\"items\") });\n    promList.push({\n      name: \"monsters\",\n      count: await reciveCountPromise(\"monsters\"),\n    });\n    promList.push({ name: \"races\", count: await reciveCountPromise(\"races\") });\n    promList.push({\n      name: \"subraces\",\n      count: await reciveCountPromise(\"subraces\"),\n    });\n    promList.push({\n      name: \"classes\",\n      count: await reciveCountPromise(\"classes\"),\n    });\n    promList.push({\n      name: \"subclasses\",\n      count: await reciveCountPromise(\"subclasses\"),\n    });\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Amount of Entities</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default AmountOfEntitiesChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 20em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst AttunmentRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const attunments = await reciveAttributeSelectionPromise(\"items\", \"attunment\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const attunment of attunments) {\n      if (attunment !== undefined) {\n        const count = await recivePromiseByAttributeCount(\n          \"items\",\n          \"attunment\",\n          attunment as number\n        );\n        promList.push({\n          name: attunment.toString() === \"0\" ? \"no attunment\" : \"attunment\",\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Attunment Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default AttunmentRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 15em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst BaseRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const bases = await reciveAttributeSelectionPromise(\"items\", \"base\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const base of bases) {\n      if (base !== \"\") {\n        const count = await recivePromiseByAttributeCount(\n          \"items\",\n          \"base\",\n          base.toString()\n        );\n        promList.push({\n          name: base.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Base Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default BaseRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst ItemTypeRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const types = await reciveAttributeSelectionPromise(\"items\", \"type\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const type of types) {\n      if (type !== undefined) {\n        const count = await recivePromiseByAttributeCount(\n          \"items\",\n          \"type\",\n          type.toString()\n        );\n        promList.push({\n          name: type.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Type Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default ItemTypeRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst MagicBonusRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const magicBoni = await reciveAttributeSelectionPromise(\n      \"items\",\n      \"magicBonus\"\n    );\n\n    let promList: { name: string; count: number }[] = [];\n    for (const magicBonus of magicBoni) {\n      if (magicBonus !== undefined) {\n        const count = await recivePromiseByAttributeCount(\n          \"items\",\n          \"magicBonus\",\n          magicBonus as number\n        );\n        promList.push({\n          name: \"+\" + magicBonus.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Rarity Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default MagicBonusRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 15em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst RarityRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const rarities = await reciveAttributeSelectionPromise(\"items\", \"rarity\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const rarity of rarities) {\n      if (rarity !== undefined) {\n        const count = await recivePromiseByAttributeCount(\n          \"items\",\n          \"rarity\",\n          rarity.toString()\n        );\n        promList.push({\n          name: rarity.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Rarity Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default RarityRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 15em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst CrRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const crs = await reciveAttributeSelectionPromise(\"monsters\", \"cr\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const cr of crs) {\n      if (cr !== undefined) {\n        const count = await recivePromiseByAttributeCount(\n          \"monsters\",\n          \"cr\",\n          cr as number\n        );\n        promList.push({\n          name: cr.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Cr Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default CrRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst LegendaryRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const rarities = await reciveAttributeSelectionPromise(\n      \"monsters\",\n      \"lAblt\"\n    );\n\n    let leg = 0;\n    let noleg = 0;\n\n    let promList: { name: string; count: number }[] = [];\n    for (const rarity of rarities) {\n      if (rarity !== \"\") {\n        const count = await recivePromiseByAttributeCount(\n          \"monsters\",\n          \"lAblt\",\n          rarity.toString()\n        );\n        leg += count;\n      } else {\n        const count = await recivePromiseByAttributeCount(\n          \"monsters\",\n          \"lAblt\",\n          rarity.toString()\n        );\n        noleg += count;\n      }\n    }\n\n    promList.push({\n      name: \"Legendary\",\n      count: leg,\n    });\n    promList.push({\n      name: \"no Legendary\",\n      count: noleg,\n    });\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Legendary Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default LegendaryRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 15em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst MonsterTypeRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const types = await reciveAttributeSelectionPromise(\"monsters\", \"type\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const type of types) {\n      if (type !== undefined) {\n        const count = await recivePromiseByAttributeCount(\n          \"monsters\",\n          \"type\",\n          type.toString()\n        );\n        promList.push({\n          name: type.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Type Graph</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default MonsterTypeRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800px;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst ActionsRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    let times = await reciveAttributeSelectionPromise(\"spells\", \"time\");\n\n    let newTimes:string[] = [];\n    times.forEach((time) => {\n      if(!time.toString().startsWith(\"1 reaction\")) {\n        newTimes.push(time.toString());\n      }\n    })\n\n    let promList: { name: string; count: number }[] = [];\n    for (const time of newTimes) {\n      if (time !== \"\") {\n        const count = await recivePromiseByAttributeCount(\n          \"spells\",\n          \"time\",\n          time.toString()\n        );\n        promList.push({\n          name: time.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Time Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Bar data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default ActionsRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 800em;\n  width: calc(100% - 1em);\n  max-width: 800px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst LevelRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const levels = await reciveAttributeSelectionPromise(\"spells\", \"level\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const level of levels) {\n      if (level !== undefined) {\n        const count = await recivePromiseByAttributeCount(\n          \"spells\",\n          \"level\",\n          level as number\n        );\n        promList.push({\n          name: \"Level \" + level.toString(),\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Level Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default LevelRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 15em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst RitualRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const rituals = await reciveAttributeSelectionPromise(\"spells\", \"ritual\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const ritual of rituals) {\n      if (ritual !== undefined) {\n        const count = await recivePromiseByAttributeCount(\n          \"spells\",\n          \"ritual\",\n          ritual as number\n        );\n        promList.push({\n          name: ritual.toString() === \"0\" ? \"no Ritual\" : \"Ritual\",\n          count: count,\n        });\n      }\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>Ritual Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default RitualRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 15em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Doughnut } from \"react-chartjs-2\";\nimport {\n  reciveAttributeSelectionPromise,\n  recivePromiseByAttributeCount,\n} from \"../../../services/DatabaseService\";\nimport { LocalLoadingSpinner } from \"../../Loading\";\n\nconst SchoolsRatioChart = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [generalCounts, setGeneralCounts] = useState<{\n    labels: string[];\n    datasets: { data: number[]; backgroundColor: string[] }[];\n  }>();\n\n  useEffect(() => {\n    makeSchoolsData();\n  }, []);\n\n  const makeSchoolsData = async () => {\n    const schools = await reciveAttributeSelectionPromise(\"spells\", \"school\");\n\n    let promList: { name: string; count: number }[] = [];\n    for (const school of schools) {\n      if (school !== \"\")\n        promList.push({\n          name: school.toString(),\n          count: await recivePromiseByAttributeCount(\n            \"spells\",\n            \"school\",\n            school.toString()\n          ),\n        });\n    }\n\n    let names: string[] = [];\n    let counts: number[] = [];\n    let colors: string[] = [];\n    promList.forEach((count) => {\n      names.push(count.name);\n      counts.push(count.count);\n      colors.push(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n    });\n    setGeneralCounts({\n      labels: names,\n      datasets: [\n        {\n          data: counts,\n          backgroundColor: colors,\n        },\n      ],\n    });\n    setLoading(false);\n  };\n\n  return (\n    <OptionSection>\n      <SelectionTitle>School Ratio</SelectionTitle>\n      {!loading && (\n        <div style={{ width: \"100%\", paddingBottom: \"10px\" }}>\n          <Doughnut data={generalCounts} />\n        </div>\n      )}\n      {loading && <LocalLoadingSpinner />}\n    </OptionSection>\n  );\n};\n\nexport default SchoolsRatioChart;\n\nconst OptionSection = styled.div`\n  flex: 1 1 15em;\n  width: calc(100% - 1em);\n  max-width: 400px;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst SelectionTitle = styled.div`\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  min-width: calc(100% - 20px);\n  font-weight: bold;\n  text-algin: center;\n  border-radius: 5px;\n  color: ${({ theme }) => theme.input.color};\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport TabBar from \"../general_elements/TabBar\";\nimport CostRatioChart from \"./gear/CostRatioChart\";\nimport DamageRatioChart from \"./gear/DamageRatioChart\";\nimport GearTypeRatioChart from \"./gear/GearTypeRatioChart\";\nimport WeightRatioChart from \"./gear/WeightRatioChart\";\nimport AmountOfEntitiesChart from \"./general/AmountOfEntitiesChart\";\nimport AttunmentRatioChart from \"./items/AttunmentRatioChart\";\nimport BaseRatioChart from \"./items/BaseRatioChart\";\nimport ItemTypeRatioChart from \"./items/ItemTypeRatioChart\";\nimport MagicBonusRatioChart from \"./items/MagicBonusRatioChart\";\nimport RarityRatioChart from \"./items/RarityRatioChart\";\nimport CrRatioChart from \"./monsters/CrRatioChart\";\nimport LegendaryRatioChart from \"./monsters/LegendaryRatioChart\";\nimport MonsterTypeRatioChart from \"./monsters/MonsterTypeRatioChart\";\nimport ActionsRatioChart from \"./spells/ActionsRatioChart\";\nimport LevelRatioChart from \"./spells/LevelRatioChart\";\nimport RitualRatioChart from \"./spells/RitualRatioChart\";\nimport SchoolsRatioChart from \"./spells/SchoolsRatioChart\";\n\nconst Statistics = () => {\n  const [activeTab, setTab] = useState<string>(\"General\");\n\n  return (\n    <>\n      <TabBar\n        children={[\"General\", \"Spells\", \"Gears\", \"Magic Items\", \"Monsters\"]}\n        onChange={(tab: string) => setTab(tab)}\n        activeTab={activeTab}\n      />\n      {activeTab === \"General\" && (\n        <OptionTab>\n          <AmountOfEntitiesChart />\n        </OptionTab>\n      )}\n      {activeTab === \"Spells\" && (\n        <OptionTab>\n          <SchoolsRatioChart />\n          <LevelRatioChart />\n          <RitualRatioChart />\n          <ActionsRatioChart />\n        </OptionTab>\n      )}\n      {activeTab === \"Gears\" && (\n        <OptionTab>\n          <GearTypeRatioChart />\n          <DamageRatioChart />\n          <CostRatioChart />\n          <WeightRatioChart />\n        </OptionTab>\n      )}\n      {activeTab === \"Magic Items\" && (\n        <OptionTab>\n          <RarityRatioChart />\n          <AttunmentRatioChart />\n          <MagicBonusRatioChart />\n          <BaseRatioChart />\n          <ItemTypeRatioChart />\n        </OptionTab>\n      )}\n      {activeTab === \"Monsters\" && (\n        <OptionTab>\n          <LegendaryRatioChart />\n          <MonsterTypeRatioChart />\n          <CrRatioChart />\n        </OptionTab>\n      )}\n    </>\n  );\n};\n\nexport default Statistics;\n\nconst OptionTab = styled.div`\n  flex: 1 1 auto;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface $Props {\n  children: string[];\n  activeTab?: string;\n  onChange: (name: string) => void;\n}\n\nconst TabBar = ({ children, activeTab, onChange }: $Props) => {\n  return (\n    <Bar>\n      {children.map((child, index) => {\n        return (\n          <Tab key={index} onClick={(e) => onChange(child)} isActive={child === activeTab}>\n            {child}\n          </Tab>\n        );\n      })}\n    </Bar>\n  );\n};\n\nexport default TabBar;\n\nconst Bar = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  min-width: calc(100% - 20px);\n  flex: 1 1 auto;\n  padding: 3px;\n  margin: 5px;\n  border-radius: 10px;\n  position: relative;\n  z-index: 100;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: baseline;\n`;\n\ntype ActiveType = {\n  isActive?: boolean;\n};\n\nconst Tab = styled.div<ActiveType>`\n  flex: 3 1 auto;\n  height: 30px;\n  line-height: 20px;\n  padding: 5px;\n  box-sizing: border-box;\n  text-align: center;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin: 2px;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.buttons.backgroundColor};\n    color: ${({ theme }) => theme.buttons.color};\n  }\n\n  ${(props) => {\n    if (props.isActive) {\n      return `background-color: ${props.theme.buttons.backgroundColor}; \n      color: ${props.theme.buttons.color};`;\n    }\n  }}\n`;\n"],"sourceRoot":""}