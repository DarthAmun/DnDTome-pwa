{"version":3,"sources":["components/general_elements/ErrorTile.tsx","components/entities/encounters/details/link_wrapper/NameToEncounter.tsx"],"names":["ErrorTile","text","buttonText","onButton","Tile","PropWrapper","Name","Text","PropTitle","onClick","icon","faPlusCircle","styled","div","theme","tile","color","backgroundColor","boxShadow","headerColor","span","backgroundColorLink","NameToEncounter","match","history","useHistory","db","MyAppDatabase","useItemByAttr","encounters","params","name","encounter","loading","error","undefined","newEncounter","Encounter","id","createNewWithId","push","createNewEncounter","isNew"],"mappings":"40CA6BeA,IAjBG,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,SACrC,OACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,kDAEF,kBAACC,EAAD,KACE,kBAACC,EAAD,eACCP,GAEH,kBAAC,IAAD,CAAYA,KAAMC,EAAYO,QAAS,kBAAMN,KAAYO,KAAMC,SAQvE,IAAMP,EAAOQ,IAAOC,IAAV,KAEC,qBAAGC,MAAkBC,KAAKC,SACf,qBAAGF,MAAkBC,KAAKE,mBAGhC,qBAAGH,MAAkBC,KAAKG,aAUpCZ,EAAOM,IAAOC,IAAV,KAOC,qBAAGC,MAAkBC,KAAKI,eAK/Bd,EAAcO,IAAOC,IAAV,KASXL,EAAYI,IAAOQ,KAAV,KAEJ,qBAAGN,MAAkBC,KAAKM,uBAK/Bd,EAAOK,IAAOC,IAAV,KAQY,qBAAGC,MAAkBC,KAAKE,oB,wICtCjCK,UAjCS,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MACrBC,EAAUC,cACRC,EAAK,IAAIC,IAFoD,EAG/BC,YAAcF,EAAGG,WAAY,OAAQN,EAAMO,OAAOC,MAHnB,mBAG5DC,EAH4D,KAGjDC,EAHiD,KAGxCC,EAHwC,KAanE,OACE,qCACIA,GAASD,GAAW,kBAAC,IAAD,MACrBC,IAAUD,GAAW,sDACpBC,IAAUD,QAAyBE,IAAdH,GACrB,kBAAC,IAAD,CACE/B,KAAM,0DACNC,WAAY,MACZC,SAAU,kBAhBS,WACzB,IAAIiC,EAAe,IAAIC,IAAU,EAAGd,EAAMO,OAAOC,aAC1CK,EAAaE,GACpBC,YAAgB,aAAcH,GAAc,SAACE,GAC3Cd,EAAQgB,KAAR,+BAAqCF,OAYjBG,MAGlBP,GAAUD,QAAyBE,IAAdH,EAGrB,GAFA,kBAAC,IAAD,CAAiBA,UAAWA,EAAWU,MAA0B,KAAnBV,EAAUD","file":"static/js/17.1e3bb565.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport TextButton from \"../form_elements/TextButton\";\n\ninterface $Props {\n  text: string;\n  buttonText: string;\n  onButton: () => void;\n}\n\nconst ErrorTile = ({ text, buttonText, onButton }: $Props) => {\n  return (\n    <Tile>\n      <PropWrapper>\n        <Name>\n          <b>A problem occured!</b>\n        </Name>\n        <Text>\n          <PropTitle>Text: </PropTitle>\n          {text}\n        </Text>\n        <TextButton text={buttonText} onClick={() => onButton()} icon={faPlusCircle} />\n      </PropWrapper>\n    </Tile>\n  );\n};\n\nexport default ErrorTile;\n\nconst Tile = styled.div`\n  flex: 1 1 15em;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 0 5px 5px 5px;\n  font-size: 14px;\n  width: calc(100% - 30px);\n  color: ${({ theme }) => theme.tile.headerColor};\n  text-align: center;\n  border-radius: 5px;\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 10px);\n  float: left;\n  padding: 5px 5px 0 5px;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.tile.backgroundColorLink};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: calc(100% - 30px);\n  margin: 10px 5px 5px 5px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n","import React from \"react\";\nimport { RouteComponentProps, useHistory } from \"react-router\";\nimport Encounter from \"../../../../../data/encounter/Encounter\";\nimport { MyAppDatabase } from \"../../../../../database/MyDatabase\";\nimport { useItemByAttr } from \"../../../../../hooks/DexieHooks\";\nimport { createNewWithId } from \"../../../../../services/DatabaseService\";\nimport ErrorTile from \"../../../../general_elements/ErrorTile\";\nimport { LoadingSpinner } from \"../../../../Loading\";\nimport EncounterDetail from \"../EncounterDetail\";\n\ntype TParams = { name: string };\n\nconst NameToEncounter = ({ match }: RouteComponentProps<TParams>) => {\n  let history = useHistory();\n  const db = new MyAppDatabase();\n  const [encounter, loading, error] = useItemByAttr(db.encounters, \"name\", match.params.name);\n\n  const createNewEncounter = () => {\n    let newEncounter = new Encounter(0, match.params.name);\n    delete newEncounter.id;\n    createNewWithId(\"encounters\", newEncounter, (id) => {\n      history.push(`/encounter-detail/id/${id}`);\n    });\n  };\n\n  return (\n    <>\n      {!error && loading && <LoadingSpinner />}\n      {error && !loading && <>Error occured</>}\n      {!error && !loading && encounter === undefined && (\n        <ErrorTile\n          text={\"No such encounter exists. Want to creat such encounter?\"}\n          buttonText={\"Add\"}\n          onButton={() => createNewEncounter()}\n        />\n      )}\n      {!error && !loading && encounter !== undefined ? (\n        <EncounterDetail encounter={encounter} isNew={encounter.name === \"\" ? true : false} />\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default NameToEncounter;\n"],"sourceRoot":""}