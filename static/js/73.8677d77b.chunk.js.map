{"version":3,"sources":["data/RandomTable.tsx","components/entities/random_tables/details/link_wrapper/NameToRandomTable.tsx","components/general_elements/ErrorTile.tsx"],"names":["RandomTable","id","name","filename","header","rows","this","NameToRandomTable","match","history","useHistory","db","MyAppDatabase","useItemByAttr","randomTables","params","randomTable","loading","error","undefined","text","buttonText","onButton","newRandomTable","createNewWithId","push","createNewRandomTable","isNew","ErrorTile","Tile","PropWrapper","Name","Text","PropTitle","onClick","icon","faPlusCircle","styled","div","theme","tile","color","backgroundColor","boxShadow","headerColor","span","backgroundColorLink"],"mappings":"mJAEqBA,EAOnB,WACEC,EACAC,EACAC,EACAC,EACAC,GACC,yBAZHJ,QAYE,OAXFC,UAWE,OAVFE,YAUE,OATFC,UASE,OARFF,cAQE,EACAG,KAAKL,GAAKA,EACVK,KAAKH,SAAWA,GAAY,GAC5BG,KAAKJ,KAAOA,GAAQ,GACpBI,KAAKF,OAASA,GAAU,GACxBE,KAAKD,KAAOA,GAAQ,K,qIC0BTE,UAlCW,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MACvBC,EAAUC,cACRC,EAAK,IAAIC,IAFsD,EAG/BC,YAAcF,EAAGG,aAAc,OAAQN,EAAMO,OAAOb,MAHrB,mBAG9Dc,EAH8D,KAGjDC,EAHiD,KAGxCC,EAHwC,KAarE,OACE,qCACIA,GAASD,GAAW,kBAAC,IAAD,MACrBC,IAAUD,GAAW,sDACpBC,IAAUD,QAA2BE,IAAhBH,GACrB,kBAAC,IAAD,CACEI,KAAM,8DACNC,WAAY,MACZC,SAAU,kBAhBW,WAC3B,IAAIC,EAAiB,IAAIvB,IAAY,EAAGQ,EAAMO,OAAOb,aAC9CqB,EAAetB,GACtBuB,YAAgB,eAAgBD,GAAgB,SAACtB,GAC/CQ,EAAQgB,KAAR,iCAAuCxB,OAYnByB,OAGlBR,IAAUD,QAA2BE,IAAhBH,GACrB,kBAAC,IAAD,CACEA,YAAaA,EACbW,MAA4B,KAArBX,EAAYd,U,swCCVd0B,IAjBG,SAAC,GAA4C,IAA1CR,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,SACrC,OACE,kBAACO,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,kDAEF,kBAACC,EAAD,KACE,kBAACC,EAAD,eACCb,GAEH,kBAAC,IAAD,CAAYA,KAAMC,EAAYa,QAAS,kBAAMZ,KAAYa,KAAMC,SAQvE,IAAMP,EAAOQ,IAAOC,IAAV,KAEC,qBAAGC,MAAkBC,KAAKC,SACf,qBAAGF,MAAkBC,KAAKE,mBAGhC,qBAAGH,MAAkBC,KAAKG,aAUpCZ,EAAOM,IAAOC,IAAV,KAOC,qBAAGC,MAAkBC,KAAKI,eAK/Bd,EAAcO,IAAOC,IAAV,KASXL,EAAYI,IAAOQ,KAAV,KAEJ,qBAAGN,MAAkBC,KAAKM,uBAK/Bd,EAAOK,IAAOC,IAAV,KAQY,qBAAGC,MAAkBC,KAAKE","file":"static/js/73.8677d77b.chunk.js","sourcesContent":["import IEntity from \"./IEntity\";\n\nexport default class RandomTable implements IEntity {\n  id?: number;\n  name: string;\n  header: string;\n  rows: { value: string; cells: string }[];\n  filename?: string;\n\n  constructor(\n    id?: number,\n    name?: string,\n    filename?: string,\n    header?: string,\n    rows?: { value: string; cells: string }[]\n  ) {\n    this.id = id;\n    this.filename = filename || \"\";\n    this.name = name || \"\";\n    this.header = header || \"\";\n    this.rows = rows || [];\n  }\n}\n\nexport function isRandomTable(arg: any): arg is RandomTable {\n  const nameCheck = arg.name !== undefined && typeof arg.name == \"string\";\n  const headerCheck = arg.header !== undefined && typeof arg.header == \"string\";\n  const rowsCheck = arg.rows !== undefined && Array.isArray(arg.rows);\n\n  return arg && nameCheck && headerCheck && rowsCheck;\n}\n\nexport function findRandomTableFormattError(\n  arg: any\n): {\n  nameCheck: boolean;\n  headerCheck: boolean;\n  rowsCheck: boolean;\n} {\n  const nameCheck = arg.name !== undefined && typeof arg.name == \"string\";\n  const headerCheck = arg.header !== undefined && typeof arg.header == \"string\";\n  const rowsCheck = arg.rows !== undefined && Array.isArray(arg.rows);\n\n  return {\n    nameCheck: nameCheck,\n    headerCheck: headerCheck,\n    rowsCheck: rowsCheck,\n  };\n}\n","import React from \"react\";\nimport { RouteComponentProps, useHistory } from \"react-router\";\nimport RandomTable from \"../../../../../data/RandomTable\";\nimport { MyAppDatabase } from \"../../../../../database/MyDatabase\";\nimport { useItemByAttr } from \"../../../../../hooks/DexieHooks\";\nimport { createNewWithId } from \"../../../../../services/DatabaseService\";\nimport ErrorTile from \"../../../../general_elements/ErrorTile\";\nimport { LoadingSpinner } from \"../../../../Loading\";\nimport RandomTableDetail from \"../RandomTableDetail\";\n\ntype TParams = { name: string };\n\nconst NameToRandomTable = ({ match }: RouteComponentProps<TParams>) => {\n  let history = useHistory();\n  const db = new MyAppDatabase();\n  const [randomTable, loading, error] = useItemByAttr(db.randomTables, \"name\", match.params.name);\n\n  const createNewRandomTable = () => {\n    let newRandomTable = new RandomTable(0, match.params.name);\n    delete newRandomTable.id;\n    createNewWithId(\"randomTables\", newRandomTable, (id) => {\n      history.push(`/randomTable-detail/id/${id}`);\n    });\n  };\n\n  return (\n    <>\n      {!error && loading && <LoadingSpinner />}\n      {error && !loading && <>Error occured</>}\n      {!error && !loading && randomTable === undefined && (\n        <ErrorTile\n          text={\"No such randomTable exists. Want to creat such randomTable?\"}\n          buttonText={\"Add\"}\n          onButton={() => createNewRandomTable()}\n        />\n      )}\n      {!error && !loading && randomTable !== undefined && (\n        <RandomTableDetail\n          randomTable={randomTable}\n          isNew={randomTable.name === \"\" ? true : false}\n        />\n      )}\n    </>\n  );\n};\n\nexport default NameToRandomTable;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport TextButton from \"../form_elements/TextButton\";\n\ninterface $Props {\n  text: string;\n  buttonText: string;\n  onButton: () => void;\n}\n\nconst ErrorTile = ({ text, buttonText, onButton }: $Props) => {\n  return (\n    <Tile>\n      <PropWrapper>\n        <Name>\n          <b>A problem occured!</b>\n        </Name>\n        <Text>\n          <PropTitle>Text: </PropTitle>\n          {text}\n        </Text>\n        <TextButton text={buttonText} onClick={() => onButton()} icon={faPlusCircle} />\n      </PropWrapper>\n    </Tile>\n  );\n};\n\nexport default ErrorTile;\n\nconst Tile = styled.div`\n  flex: 1 1 15em;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 0 5px 5px 5px;\n  font-size: 14px;\n  width: calc(100% - 30px);\n  color: ${({ theme }) => theme.tile.headerColor};\n  text-align: center;\n  border-radius: 5px;\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 10px);\n  float: left;\n  padding: 5px 5px 0 5px;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.tile.backgroundColorLink};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: calc(100% - 30px);\n  margin: 10px 5px 5px 5px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n"],"sourceRoot":""}