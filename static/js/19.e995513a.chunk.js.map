{"version":3,"sources":["components/entities/random_tables/details/RandomTableView.tsx","components/entities/random_tables/details/RandomTableEditView.tsx","components/entities/random_tables/details/RandomTableDetail.tsx","components/form_elements/IconButton.tsx","components/form_elements/TextButton.tsx","components/form_elements/StringField.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/general_elements/LinkCheck.tsx","components/general_elements/FormatedText.tsx","hooks/DexieHooks.tsx","components/form_elements/BackButton.tsx","components/general_elements/ToggleStyle.tsx","components/general_elements/Dialog.tsx"],"names":["RandomTableView","randomTable","useState","rand","setRand","CenterWrapper","Name","name","View","TextButton","text","icon","faDice","onClick","max","lastRowValues","rows","length","value","includes","trim","split","Math","round","random","rollForRandom","Prop","Icon","faArrowRight","map","row","range","min","FormatedText","cells","TableHeadProp","header","cell","index","key","TableProp","styled","div","theme","tile","color","backgroundColor","th","input","td","buttons","height","FontAwesomeIcon","main","highlight","RandomTableEditView","onEdit","onRowChange","field","StringField","label","onChange","placeholder","RowWrapper","RowCount","IconButton","faTrash","splice","removeRow","faPlus","RandomTableDetail","isNew","editMode","setMode","randomTableObj","editRandomTable","showAlert","setAlert","showDeleteDialog","setDeleteDialog","message","setMessage","unsavedChanges","setUnsavedChanges","history","useHistory","useEffect","Dialog","faExclamationTriangle","confirmeText","confirmeClick","remove","id","goBack","abortText","abortClick","TopBar","BackButton","faArrowLeft","action","mode","toString","title","tableName","updateWithCallback","result","setTimeout","updateRandomTable","faSave","Message","floatLeft","disabled","transform","SimpleButton","left","DisabledSimpleButton","button","hoverColor","Field","LabelText","Input","type","e","target","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","LinkCheck","loading","setLoading","entitiyFound","setEntity","recivePromiseByAttributeCount","then","count","faMeteor","faIdCard","faDragon","faMapMarkedAlt","faTable","formatIcon","formatedText","setFormatedText","cut","str","cutStart","cutEnd","substr","formatLink","useCallback","undefined","parts","formattedParts","forEach","part","codePart","linkParts","link","push","TextPart","Link","formatTable","textPart","table","tableRows","isHead","formatText","indexOf","span","backgroundColorLink","useItem","effect","setEffect","reducer","state","data","error","useReducer","dispatch","get","catch","useItemByAttr","attr","attrValue","where","equalsIgnoreCase","first","Back","ToggleLeft","ToggleRight","EditToggle","props","DialogWrapper","ButtonBar"],"mappings":"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","file":"static/js/19.e995513a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport RandomTable from \"../../../../data/RandomTable\";\n\nimport { faArrowRight, faDice } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport FormatedText from \"../../../general_elements/FormatedText\";\n\ninterface $Props {\n  randomTable: RandomTable;\n}\n\nconst RandomTableView = ({ randomTable }: $Props) => {\n  const [rand, setRand] = useState<number>(-1);\n\n  const rollForRandom = () => {\n    const min = 1;\n    let max = 10;\n    const lastRowValues = randomTable.rows[randomTable.rows.length - 1].value;\n    if (lastRowValues.includes(\"-\")) {\n      let range = lastRowValues.trim().split(\"-\");\n      max = +range[1];\n    } else if (lastRowValues.includes(\"–\")) {\n      let range = lastRowValues.trim().split(\"–\");\n      max = +range[1];\n    } else {\n      max = +lastRowValues;\n    }\n    const rand = Math.round(min + Math.random() * (max - min));\n    setRand(rand);\n  };\n\n  return (\n    <CenterWrapper>\n      <Name>\n        <b>{randomTable.name}</b>\n      </Name>\n      <View>\n        <TextButton\n          text={\"Roll\"}\n          icon={faDice}\n          onClick={() => rollForRandom()}\n        />\n        {rand >= 0 && (\n          <Prop>\n            {rand} <Icon icon={faArrowRight} />\n            {randomTable.rows.map((row: { value: string; cells: string }) => {\n              if (row.value.includes(\"-\")) { // normal -\n                let range = row.value.trim().split(\"-\");\n                const min: number = +range[0];\n                const max: number = +range[1];\n                if (min <= rand && rand <= max)\n                  return <FormatedText text={row.cells} />;\n              } else if (row.value.includes(\"–\")) { // – used by DnDBeyond \n                let range = row.value.trim().split(\"–\");\n                const min: number = +range[0];\n                const max: number = +range[1];\n                if (min <= rand && rand <= max)\n                  return <FormatedText text={row.cells} />;\n              } else {\n                const valueNumber = +row.value;\n                if (valueNumber === rand)\n                  return <FormatedText text={row.cells} />;\n              }\n              return <></>;\n            })}\n          </Prop>\n        )}\n      </View>\n      <View>\n        <table>\n          <tbody>\n            <tr>\n              <TableHeadProp>Number</TableHeadProp>\n              {randomTable.header &&\n                randomTable.header\n                  .split(\",\")\n                  .map((cell: string, index: number) => {\n                    return <TableHeadProp key={index}>{cell}</TableHeadProp>;\n                  })}\n            </tr>\n            {randomTable.rows &&\n              randomTable.rows.map(\n                (row: { value: string; cells: string }, index: number) => {\n                  return (\n                    <tr key={index}>\n                      <TableProp key={index}>{row.value}</TableProp>\n                      {row.cells\n                        .split(\"|\")\n                        .map((cell: string, index: number) => {\n                          return (\n                            <TableProp key={index}>\n                              <FormatedText text={cell} />\n                            </TableProp>\n                          );\n                        })}\n                    </tr>\n                  );\n                }\n              )}\n          </tbody>\n        </table>\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default RandomTableView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  flex: 1 1 600px;\n  padding: 5px;\n  margin: 5px;\n  height: 100%;\n  max-width: calc(100% - 20px);\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: ${({ theme }) => theme.tile.color};\n  text-align: center;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst TableHeadProp = styled.th`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 10px;\n`;\n\nconst TableProp = styled.td`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 5px;\n  text-align: left;\n`;\n\nconst Prop = styled.div`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  padding: 10px;\n  margin: 5px;\n  border-radius: 5px;\n  box-sizing: content-box;\n  text-align: center;\n\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};s\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport RandomTable from \"../../../../data/RandomTable\";\n\nimport { faPlus, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport IconButton from \"../../../form_elements/IconButton\";\nimport StringField from \"../../../form_elements/StringField\";\n\ninterface $Props {\n  randomTable: RandomTable;\n  onEdit: (value: RandomTable) => void;\n}\n\nconst RandomTableEditView = ({ randomTable, onEdit }: $Props) => {\n  const onRowChange = (field: string, value: string, index: number) => {\n    let rows = randomTable.rows;\n    rows[index] = { ...rows[index], [field]: value };\n    onEdit({ ...randomTable, rows: rows });\n  };\n\n  const addNewRow = () => {\n    onEdit({\n      ...randomTable,\n      rows: [...randomTable.rows, { value: \"\", cells: \"\" }],\n    });\n  };\n\n  const removeRow = (index: number) => {\n    let rows = randomTable.rows;\n    if (index !== -1) {\n      rows.splice(index, 1);\n      onEdit({ ...randomTable, rows: rows });\n    }\n  };\n\n  return (\n    <CenterWrapper>\n      <RandomTableView>\n        <StringField\n          value={randomTable.name}\n          label=\"Name\"\n          onChange={(name) => onEdit({ ...randomTable, name: name })}\n        />\n        <StringField\n          value={randomTable.header}\n          label=\"Header\"\n          onChange={(name) => onEdit({ ...randomTable, header: name })}\n          placeholder={\"Items, Description,...\"}\n        />\n      </RandomTableView>\n      <RandomTableView>\n        {randomTable.rows.map(\n          (row: { value: string; cells: string }, index: number) => {\n            return (\n              <RowWrapper key={index}>\n                <RowCount>{index}</RowCount>\n                <StringField\n                  value={row.value}\n                  label={\"Row values \" + index}\n                  onChange={(text) => onRowChange(\"value\", text, index)}\n                  placeholder={`${index + 1} or 0-5`}\n                />\n                <StringField\n                  value={row.cells}\n                  label={\"Row \" + index}\n                  onChange={(text) => onRowChange(\"cells\", text, index)}\n                  placeholder={`Item ${index}, Description ${index},...`}\n                />\n                <IconButton icon={faTrash} onClick={() => removeRow(index)} />\n              </RowWrapper>\n            );\n          }\n        )}\n        <RowWrapper>\n          <IconButton icon={faPlus} onClick={() => addNewRow()} />\n        </RowWrapper>\n      </RandomTableView>\n    </CenterWrapper>\n  );\n};\n\nexport default RandomTableEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst RandomTableView = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  flex: 1 1 600px;\n  padding: 5px;\n  margin: 5px;\n  height: 100%;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: flex-start;\n  align-content: flex-start;\n`;\n\nconst RowWrapper = styled.div`\n  flex: 1 1 600px;\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst RowCount = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: 38px;\n  line-height: 38px;\n  flex: 1 1 20px;\n  max-width: 20px;\n  text-algin: center;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\nimport RandomTable from \"../../../../data/RandomTable\";\nimport { remove, updateWithCallback } from \"../../../../services/DatabaseService\";\n\nimport {\n  faArrowLeft,\n  faSave,\n  faTrash,\n  faExclamationTriangle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport RandomTableView from \"./RandomTableView\";\nimport RandomTableEditView from \"./RandomTableEditView\";\nimport BackButton from \"../../../form_elements/BackButton\";\nimport IconButton from \"../../../form_elements/IconButton\";\nimport Dialog from \"../../../general_elements/Dialog\";\nimport { EditToggle, ToggleLeft, ToggleRight } from \"../../../general_elements/ToggleStyle\";\n\ninterface $Props {\n  randomTable: RandomTable;\n  isNew: boolean;\n}\n\nconst RandomTableDetail = ({ randomTable, isNew }: $Props) => {\n  const [editMode, setMode] = useState<boolean>(isNew);\n  const [randomTableObj, editRandomTable] = useState<RandomTable>(randomTable);\n  const [showAlert, setAlert] = useState<boolean>(false);\n  const [showDeleteDialog, setDeleteDialog] = useState<boolean>(false);\n  const [message, setMessage] = useState<string>(\"\");\n  const [unsavedChanges, setUnsavedChanges] = useState<boolean>(false);\n  let history = useHistory();\n\n  const deleteRandomTable = () => {\n    setDeleteDialog(true);\n  };\n\n  useEffect(() => {\n    if (randomTableObj !== randomTable) {\n      setUnsavedChanges(true);\n    }\n  }, [randomTableObj, randomTable]);\n\n  const updateRandomTable = (tableName: string, randomTableObj: RandomTable) => {\n    updateWithCallback(tableName, randomTableObj, (result) => {\n      if (result > 0) {\n        setUnsavedChanges(false);\n        setMessage(\"Saved successful!\");\n        setAlert(true);\n      } else {\n        setMessage(\"Something went wrong!\");\n        setAlert(true);\n      }\n      setTimeout(() => {\n        setAlert(false);\n      }, 3000);\n    });\n  };\n\n  return (\n    <>\n      {showDeleteDialog && (\n        <Dialog\n          message={`Delete ${randomTable.name}?`}\n          icon={faExclamationTriangle}\n          confirmeText={\"Delete\"}\n          confirmeClick={() => {\n            remove(\"randomTables\", randomTable.id);\n            history.goBack();\n          }}\n          abortText={\"Back\"}\n          abortClick={() => {\n            setDeleteDialog(false);\n          }}\n        />\n      )}\n      <TopBar>\n        <BackButton icon={faArrowLeft} action={() => history.goBack()} />\n        <EditToggle mode={editMode.toString()}>\n          <ToggleLeft onClick={() => setMode(false)}>View</ToggleLeft>\n          <ToggleRight onClick={() => setMode(true)}>Edit</ToggleRight>\n        </EditToggle>\n        {unsavedChanges && <Icon icon={faExclamationTriangle} title={\"Unsaved changes!\"} />}\n        {editMode && (\n          <>\n            <IconButton\n              onClick={() => updateRandomTable(\"randomTables\", randomTableObj)}\n              icon={faSave}\n            />\n            <IconButton onClick={() => deleteRandomTable()} icon={faTrash} />\n            {message && showAlert && <Message>{message}</Message>}\n          </>\n        )}\n      </TopBar>\n      {editMode ? (\n        <RandomTableEditView\n          randomTable={randomTableObj}\n          onEdit={(value) => editRandomTable(value)}\n        />\n      ) : (\n        <RandomTableView randomTable={randomTableObj} />\n      )}\n    </>\n  );\n};\n\nexport default RandomTableDetail;\n\nconst TopBar = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  overflow: hidden;\n  flex: 1 1;\n  min-width: calc(100% - 20px);\n  height: 45px;\n  padding: 10px;\n`;\n\nconst Message = styled.div`\n  padding: 5px;\n  width: 150px;\n  height: 30px;\n  line-height: 30px;\n  border-radius: 5px;\n  float: right;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  float: right;\n  line-height: 30px;\n  display: block;\n  height: 30px;\n  padding: 10px;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  icon: IconDefinition;\n  floatLeft?: boolean;\n  disabled?: boolean;\n  transform?: string | Transform;\n  onClick: (() => void) | ((e: any) => void);\n}\n\nconst IconButton = ({ icon, floatLeft, disabled, transform, onClick }: $Props) => {\n  return (\n    <>\n      {!disabled && (\n        <SimpleButton left={floatLeft} onClick={onClick}>\n          <Icon icon={icon} transform={transform} />\n        </SimpleButton>\n      )}\n      {disabled && (\n        <DisabledSimpleButton>\n          <Icon icon={icon} transform={transform} />\n        </DisabledSimpleButton>\n      )}\n    </>\n  );\n};\n\nexport default IconButton;\n\ntype FloatMpde = {\n  left?: boolean;\n};\n\nconst SimpleButton = styled.div<FloatMpde>`\n  color: ${({ theme }) => theme.buttons.color};\n  background-color: ${({ theme }) => theme.buttons.backgroundColor};\n  cursor: pointer;\n\n  font-size: 16px;\n  overflow: hidden;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: ${({ left }) => (left ? \"left\" : \"right\")};\n  padding: 10px;\n  margin: 5px;\n  border-radius: 10px;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n\n  transition: color 0.2s;\n\n  &:hover {\n    color: white;\n  }\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst DisabledSimpleButton = styled(SimpleButton)`\n  color: ${({ theme }) => theme.buttons.backgroundColor};\n  background-color: ${({ theme }) => theme.buttons.color};\n  cursor: not-allowed;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  text: string;\n  disabled?: boolean;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onClick: () => void;\n}\n\nconst TextButton = ({ text, icon, transform, disabled, onClick }: $Props) => {\n  return (\n    <SimpleButton onClick={onClick} disabled={disabled}>\n      {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {text}\n    </SimpleButton>\n  );\n};\n\nexport default TextButton;\n\nconst SimpleButton = styled.button`\n  color: ${({ theme }) => theme.buttons.color};\n  background-color: ${({ theme }) => theme.buttons.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: right;\n  padding: 10px;\n  margin: 5px;\n  border-radius: 10px;\n  cursor: pointer;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n  box-sizing: content-box;\n  border: none;\n\n  transition: color 0.2s;\n\n  &:hover {\n    color: ${({ theme }) => theme.buttons.hoverColor};\n  }\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.buttons.disabled};\n  }\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n  margin-right: 5px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  value: string;\n  label: string;\n  placeholder?: string;\n  icon?: IconDefinition;\n  transform?: string | Transform;\n  onChange: (value: string) => void;\n}\n\nconst StringField = ({ value, label, placeholder, icon, transform, onChange }: $Props) => (\n  <Field>\n    <LabelText>\n      {icon ? <Icon icon={icon} transform={transform} /> : \"\"} {label}\n    </LabelText>\n    <Input\n      type=\"text\"\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      placeholder={placeholder}\n    ></Input>\n  </Field>\n);\n\nexport default StringField;\n\nconst Field = styled.label`\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 16px;\n  overflow: hidden;\n  height: 38px;\n  line-height: 30px;\n  flex: 1 1 auto;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 5px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n\nconst LabelText = styled.div`\n  flex: 1 1 auto;\n`;\n\nconst Input = styled.input`\n  flex: 3 1 auto;\n  height: 38px;\n  padding: 5px;\n  box-sizing: border-box;\n  border: none;\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  margin-left: 5px;\n  border-radius: 5px;\n  width: 0;\n  min-width: 100px;\n`;\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useEffect, useState } from \"react\";\nimport { BiError, BiHistory, BiSelectMultiple } from \"react-icons/bi\";\nimport {\n  GiCrystalWand,\n  GiBackpack,\n  GiWomanElfFace,\n  GiPlagueDoctorProfile,\n  GiSwordClash,\n  GiBookmarklet,\n  GiScrollUnfurled,\n  GiSolarSystem,\n  GiDjinn,\n  GiBookshelf,\n} from \"react-icons/gi\";\nimport {\n  faMeteor,\n  faIdCard,\n  faDragon,\n  faMapMarkedAlt,\n  faTable,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { MdEvent } from \"react-icons/md\";\nimport { HiUserGroup } from \"react-icons/hi\";\nimport { recivePromiseByAttributeCount } from \"../../services/DatabaseService\";\n\ninterface $Props {\n  type: string;\n  name: string;\n}\n\nconst LinkCheck = ({ type, name }: $Props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [entitiyFound, setEntity] = useState<boolean>(false);\n\n  useEffect(() => {\n    recivePromiseByAttributeCount(type + \"s\", \"name\", name).then((count: number) => {\n      setEntity(count > 0);\n      setLoading(false);\n    });\n  }, [type, name]);\n\n  const formatIcon = (type: string) => {\n    switch (type) {\n      case \"spell\":\n        return <FontAwesomeIcon icon={faMeteor} />;\n      case \"item\":\n        return <GiCrystalWand />;\n      case \"gear\":\n        return <GiBackpack />;\n      case \"race\":\n        return <GiWomanElfFace />;\n      case \"class\":\n        return <GiPlagueDoctorProfile />;\n      case \"selection\":\n        return <BiSelectMultiple />;\n      case \"char\":\n        return <FontAwesomeIcon icon={faIdCard} />;\n      case \"monster\":\n        return <FontAwesomeIcon icon={faDragon} />;\n      case \"encounter\":\n        return <GiSwordClash />;\n      case \"campaign\":\n        return <GiBookmarklet />;\n      case \"quest\":\n        return <GiScrollUnfurled />;\n      case \"event\":\n        return <MdEvent />;\n      case \"world\":\n        return <GiSolarSystem />;\n      case \"location\":\n        return <FontAwesomeIcon icon={faMapMarkedAlt} />;\n      case \"npc\":\n        return <GiDjinn />;\n      case \"randomTable\":\n        return <FontAwesomeIcon icon={faTable} />;\n      case \"book\":\n        return <GiBookshelf />;\n        case \"group\":\n          return <HiUserGroup />;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      {loading && <BiHistory />}\n      {!loading && !entitiyFound && <BiError />}\n      {!loading && entitiyFound && <>{formatIcon(type)}</>}\n    </>\n  );\n};\n\nexport default LinkCheck;\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\nimport LinkCheck from \"./LinkCheck\";\n\ninterface $Props {\n  text: string;\n}\n\nconst FormatedText = ({ text }: $Props) => {\n  const [formatedText, setFormatedText] = useState<JSX.Element>();\n  let history = useHistory();\n\n  const cut = (str: string, cutStart: number, cutEnd: number) => {\n    return str.substr(0, cutStart) + str.substr(cutEnd + 1);\n  };\n\n  const formatLink = useCallback(\n    (text: string) => {\n      if (text !== undefined) {\n        if (text.includes(\"[[\") && text.includes(\"]]\")) {\n          const parts = text.split(\"[[\");\n          let formattedParts: any[] = [];\n          parts.forEach((part: string, index: number) => {\n            if (part.includes(\"]]\")) {\n              const codePart: string[] = part.split(\"]]\");\n              const linkParts: string[] = codePart[0].split(\".\");\n              const link: string = \"/\" + linkParts[0] + \"-detail/name/\" + linkParts[1];\n              formattedParts.push(\n                <TextPart key={index}>\n                  <Link onClick={() => history.push(link)}>\n                    <LinkCheck type={linkParts[0]} name={linkParts[1]} /> {linkParts[1]}\n                  </Link>\n                  <TextPart>{codePart[1]}</TextPart>\n                </TextPart>\n              );\n            } else {\n              if (part !== \"\") formattedParts.push(<TextPart key={index}>{part}</TextPart>);\n            }\n          });\n          return <>{formattedParts}</>;\n        } else {\n          return <TextPart>{text}</TextPart>;\n        }\n      }\n    },\n    [history]\n  );\n\n  const formatTable = useCallback(\n    (textPart: string) => {\n      if (textPart.includes(\"||table||\")) {\n        const table: string[] = text.split(\"||table||\");\n        const tableRows: string[] = table[1].split(\"||\");\n        let isHead = true;\n        return (\n          <>\n            {formatLink(table[0])}\n            <table>\n              <tbody>\n                {tableRows.map((row: string, index: number) => {\n                  if (row.includes(\"|\")) {\n                    if (isHead) {\n                      isHead = false;\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableHeadProp key={index}>{cell}</TableHeadProp>;\n                          })}\n                        </tr>\n                      );\n                    } else {\n                      const cells = row.split(\"|\");\n                      return (\n                        <tr key={index}>\n                          {cells.map((cell: string, index: number) => {\n                            return <TableProp key={index}>{formatLink(cell)}</TableProp>;\n                          })}\n                        </tr>\n                      );\n                    }\n                  } else {\n                    return <></>;\n                  }\n                })}\n              </tbody>\n            </table>\n            {formatLink(table[2])}\n          </>\n        );\n      } else {\n        return formatLink(textPart);\n      }\n    },\n    [text, formatLink]\n  );\n\n  const formatText = useCallback(\n    (textPart: string) => {\n      while (textPart.includes(\"{{\")) {\n        const cutStart = textPart.indexOf(\"{{\");\n        const cutEnd = textPart.indexOf(\"}}\") + 1;\n        textPart = cut(textPart, cutStart, cutEnd);\n      }\n      return formatTable(textPart);\n    },\n    [formatTable]\n  );\n\n  useEffect(() => {\n    if (text !== undefined) {\n      let formatedText = formatText(text);\n      setFormatedText(formatedText);\n    }\n  }, [text, history, formatText]);\n\n  return <>{formatedText}</>;\n};\n\nexport default FormatedText;\n\nconst Link = styled.span`\n  display: inline-block;\n  background-color: ${({ theme }) => theme.tile.backgroundColorLink};\n  border-radius: 5px;\n  text-decoration: none;\n  color: ${({ theme }) => theme.tile.backgroundColor};\n  font-size: 14px;\n  padding: 0px 5px 0px 5px;\n  cursor: pointer;\n  white-space: pre;\n`;\n\nconst TextPart = styled.span`\n  white-space: pre-line;\n`;\n\nconst TableHeadProp = styled.th`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 2px 5px 2px 5px;\n`;\n\nconst TableProp = styled.td`\n  background-color: ${({ theme }) => theme.input.backgroundColor};\n  color: ${({ theme }) => theme.input.color};\n  border-radius: 5px;\n  padding: 5px;\n  text-align: center;\n`;\n","import Dexie from \"dexie\";\nimport { useReducer, useEffect, useCallback, useState } from \"react\";\nimport Filter from \"../data/Filter\";\nimport ReactDOM from \"react-dom\";\n\ntype TableState<T> = [T[] | undefined, boolean, Dexie.DexieError | undefined];\ntype TableAction<T> =\n  | { type: \"resolved\"; data: T[] }\n  | { type: \"empty\" }\n  | { type: \"reset\" }\n  | { type: \"error\"; error: Dexie.DexieError };\n\ntype ItemState<T> = [T | undefined, boolean, Dexie.DexieError | undefined];\ntype ItemAction<T> =\n  | { type: \"resolved\"; data: T }\n  | { type: \"empty\" }\n  | { type: \"reset\" }\n  | { type: \"error\"; error: Dexie.DexieError };\n\nexport const useTable = <T, U>(table: Dexie.Table<T, U>): TableState<T> => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const reducer = useCallback((state: TableState<T>, action: TableAction<T>): TableState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () =>\n        table\n          .toArray()\n          .then((data) => {\n            dispatch({\n              type: \"resolved\",\n              data,\n            });\n          })\n          .catch((error) => {\n            dispatch({\n              type: \"error\",\n              error,\n            });\n          });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, effect]);\n\n  return state;\n};\n\nexport const useTableByFilter = <T, U>(\n  table: Dexie.Table<T, U>,\n  filters: Filter[]\n): TableState<T> => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const [filter, setFilter] = useState<Filter[]>(filters);\n  const reducer = useCallback((state: TableState<T>, action: TableAction<T>): TableState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      case \"reset\":\n        return [undefined, true, undefined];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (filter !== filters) {\n      ReactDOM.unstable_batchedUpdates(() => {\n        dispatch({ type: \"reset\" });\n        setFilter(filters);\n        setEffect(true);\n      });\n    }\n  }, [filter, filters, setEffect]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () => console.time(\"filtered get all\");\n      table\n        .filter((obj: T) => {\n          let test: boolean[] = [];\n          filters.forEach((filter) => {\n            if (typeof filter.value === \"string\") {\n              test.push(\n                // @ts-ignore\n                obj[filter.fieldName].toLowerCase().includes(filter.value.toLowerCase())\n              );\n            } else if (typeof filter.value === \"number\") {\n              // @ts-ignore\n              test.push(obj[filter.fieldName] === filter.value);\n            } else if (typeof filter.value === \"boolean\") {\n              // @ts-ignore\n              test.push(obj[filter.fieldName] === filter.value);\n            } else if (filter.value instanceof Array) {\n              let arrayTest: boolean = false;\n              filter.value.forEach((filterPart: string | boolean | number) => {\n                if (typeof filterPart === \"string\") {\n                  if (\n                    // @ts-ignore\n                    obj[filter.fieldName].toLowerCase().includes(filterPart.toLowerCase())\n                  )\n                    arrayTest = true;\n                } else if (typeof filterPart === \"number\") {\n                  // @ts-ignore\n                  if (obj[filter.fieldName] === filterPart) arrayTest = true;\n                } else if (typeof filterPart === \"boolean\") {\n                  // @ts-ignore\n                  if (obj[filter.fieldName] === filterPart) arrayTest = true;\n                }\n              });\n              test.push(arrayTest);\n            }\n          });\n\n          let result = true;\n          test.forEach((val) => {\n            if (!val) result = false;\n          });\n          return result;\n        })\n        .sortBy(\"name\")\n        .then((data) => {\n          console.timeEnd(\"filtered get all\");\n          dispatch({\n            type: \"resolved\",\n            data,\n          });\n        })\n        .catch((error) => {\n          dispatch({\n            type: \"error\",\n            error,\n          });\n        });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, effect, filters]);\n\n  return state;\n};\n\nexport const useItem = <T, U>(table: Dexie.Table<T, U>, id: U) => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const reducer = useCallback((state: ItemState<T>, action: ItemAction<T>): ItemState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"empty\":\n        return [undefined, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () =>\n        table\n          .get(id)\n          .then((data) => {\n            if (data !== undefined) {\n              dispatch({\n                type: \"resolved\",\n                data,\n              });\n            } else {\n              dispatch({\n                type: \"empty\",\n              });\n            }\n          })\n          .catch((error) => {\n            dispatch({\n              type: \"error\",\n              error,\n            });\n          });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, id, effect]);\n\n  return state;\n};\n\nexport const useItemByAttr = <T, U>(table: Dexie.Table<T, U>, attr: string, attrValue: string) => {\n  const [effect, setEffect] = useState<boolean>(true);\n  const reducer = useCallback((state: ItemState<T>, action: ItemAction<T>): ItemState<T> => {\n    switch (action.type) {\n      case \"resolved\":\n        return [action.data, false, undefined];\n      case \"empty\":\n        return [undefined, false, undefined];\n      case \"error\":\n        return [undefined, false, action.error];\n      default:\n        return [undefined, true, undefined];\n    }\n  }, []);\n\n  const [state, dispatch] = useReducer(reducer, [undefined, true, undefined]);\n\n  useEffect(() => {\n    if (effect) {\n      const getAndDispatch = () =>\n        table\n          .where(attr)\n          .equalsIgnoreCase(attrValue)\n          .first()\n          .then((data) => {\n            if (data !== undefined) {\n              dispatch({\n                type: \"resolved\",\n                data,\n              });\n            } else {\n              dispatch({\n                type: \"empty\",\n              });\n            }\n          })\n          .catch((error) => {\n            dispatch({\n              type: \"error\",\n              error,\n            });\n          });\n\n      getAndDispatch();\n      setEffect(false);\n    }\n  }, [table, attr, attrValue, effect]);\n\n  return state;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transform } from \"@fortawesome/fontawesome-svg-core\";\n\ninterface $Props {\n  icon: IconDefinition;\n  transform?: string | Transform;\n  action: () => void;\n}\n\nconst BackButton = ({ icon, transform, action }: $Props) => {\n  return (\n    <Back onClick={action}>\n      <Icon icon={icon} transform={transform} />\n    </Back>\n  );\n};\n\nexport default BackButton;\n\nconst Icon = styled(FontAwesomeIcon)`\n  margin-right: 5px;\n  width: 20px;\n  height: auto;\n  border-radius: 150px;\n  transition: color 0.2s;\n  color: ${({ theme }) => theme.main.highlight};\n  &:hover {\n    color: ${({ theme }) => theme.buttons.color};\n  }\n`;\n\nconst Back = styled.div`\n  float: left;\n  font-size: calc(${({ theme }) => theme.buttons.height} + 10px);\n  margin: 10px 0px 0px 10px;\n  cursor: pointer;\n`;\n","import styled from \"styled-components\";\n\nexport const ToggleLeft = styled.div`\n  width: auto;\n  padding: 10px;\n  margin: 5px 0px 5px 5px;\n  height: ${({ theme }) => theme.buttons.height};\n  line-height: ${({ theme }) => theme.buttons.height};\n  float: left;\n  cursor: pointer;\n  box-shadow: inset -2px -2px 5px 0px rgba(0, 0, 0, 0.3);\n  border-radius: 5px 0px 0px 5px;\n\n  transition: color 0.2s, background-color 0.2s;\n\n  &:hover {\n    color: ${({ theme }) => theme.buttons.hoverColor};\n  }\n`;\n\nexport const ToggleRight = styled(ToggleLeft)`\n  margin: 5px 5px 5px 0px;\n\n  border-radius: 0px 5px 5px 0px;\n`;\n\ntype EditMode = {\n  mode: string;\n};\n\nexport const EditToggle = styled.div<EditMode>`\n  width: auto;\n  height: ${({ theme }) => theme.buttons.height};\n  float: right;\n  color: ${({ theme }) => theme.buttons.color};\n\n  ${ToggleLeft} {\n    background-color: ${(props) => {\n      if (props.mode !== \"true\") {\n        return ({ theme }) => theme.buttons.backgroundColor;\n      } else {\n        return ({ theme }) => theme.tile.backgroundColor;\n      }\n    }};\n  }\n\n  ${ToggleRight} {\n    background-color: ${(props) => {\n      if (props.mode === \"true\") {\n        return ({ theme }) => theme.buttons.backgroundColor;\n      } else {\n        return ({ theme }) => theme.tile.backgroundColor;\n      }\n    }};\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\nimport TextButton from \"../form_elements/TextButton\";\n\ninterface $Props {\n  message: string;\n  icon?: IconDefinition;\n  confirmeText: string;\n  confirmeClick: () => void;\n  abortText: string;\n  abortClick: () => void;\n}\n\nconst Dialog = ({\n  message,\n  icon,\n  confirmeText,\n  confirmeClick,\n  abortText,\n  abortClick,\n}: $Props) => {\n  return (\n    <DialogWrapper>\n      <Message>\n        {icon ? <Icon icon={icon} /> : \"\"} {message}\n      </Message>\n      <ButtonBar>\n        <TextButton text={abortText} onClick={abortClick} />\n        <TextButton text={confirmeText} onClick={confirmeClick} />\n      </ButtonBar>\n    </DialogWrapper>\n  );\n};\n\nexport default Dialog;\n\nconst DialogWrapper = styled.div`\n  width: 180px;\n  position: absolute;\n  z-index: 1010;\n  top: 10px;\n  left: calc(50% - 100px);\n  padding: 10px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  color: ${({ theme }) => theme.tile.color};\n`;\n\nconst Message = styled.div`\n  width: 100%;\n  text-align: center;\n`;\n\nconst ButtonBar = styled.div`\n  width: 100%;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  flex: 1 1 auto;\n  margin-right: 5px;\n`;\n"],"sourceRoot":""}