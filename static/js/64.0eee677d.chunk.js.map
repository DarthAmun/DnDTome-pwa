{"version":3,"sources":["components/entities/selections/details/SelectionView.tsx","components/entities/selections/details/SelectionEditView.tsx","components/entities/selections/details/SelectionDetail.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/entities/selections/details/link-wrapper/IdToSelection.tsx"],"names":["SelectionView","selection","useState","send","setSend","CenterWrapper","View","Name","name","PropWrapper","TextButton","text","icon","faPaperPlane","onClick","P2PSender","data","mode","selectionOptions","map","trait","index","key","Prop","PropTitle","entityName","level","Text","FormatedText","entityText","styled","div","theme","tile","color","backgroundColor","span","backgroundColorLink","SelectionEditView","onEdit","onSelectionChange","oldSelection","field","value","selections","removeSelection","indexOf","splice","StringField","label","onChange","SelectionWrapper","SelectionName","SelectionLevel","IconButton","faTrash","SelectionText","faPlus","NumberField","ShortTextField","SelectionDetail","isNew","editMode","setMode","selectionObj","editSelection","showAlert","setAlert","showDeleteDialog","setDeleteDialog","message","setMessage","unsavedChanges","setUnsavedChanges","history","useHistory","useEffect","Dialog","faExclamationTriangle","confirmeText","confirmeClick","remove","id","goBack","abortText","abortClick","TopBar","BackButton","faArrowLeft","action","toString","Icon","title","tableName","updateWithCallback","result","setTimeout","updateSelection","faSave","Message","FontAwesomeIcon","main","highlight","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","IdToSelection","match","db","MyAppDatabase","useItem","params","loading","error","undefined"],"mappings":"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","file":"static/js/64.0eee677d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Selection from \"../../../../data/Selection\";\nimport styled from \"styled-components\";\n\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport P2PSender from \"../../../p2p/P2PSender\";\nimport FormatedText from \"../../../general_elements/FormatedText\";\n\ninterface $Props {\n  selection: Selection;\n}\n\nconst SelectionView = ({ selection }: $Props) => {\n  const [send, setSend] = useState<boolean>(false);\n\n  return (\n    <CenterWrapper>\n      <View>\n        <Name>\n          <b>{selection.name}</b>\n        </Name>\n        <PropWrapper>\n          {!send && (\n            <TextButton\n              text={`Send ${selection.name}`}\n              icon={faPaperPlane}\n              onClick={() => setSend(true)}\n            />\n          )}\n          {!!send && <P2PSender data={selection} mode={\"THIS\"} />}\n        </PropWrapper>\n      </View>\n      {selection.selectionOptions.map(\n        (\n          trait: {\n            entityName: string;\n            entityText: string;\n            level: number;\n          },\n          index: number\n        ) => {\n          return (\n            <View key={index}>\n              <PropWrapper>\n                <Prop>\n                  <PropTitle>Name:</PropTitle>\n                  {trait.entityName}\n                </Prop>\n                <Prop>\n                  <PropTitle>Level:</PropTitle>\n                  {trait.level}\n                </Prop>\n                <Text>\n                  <FormatedText text={trait.entityText} />\n                </Text>\n              </PropWrapper>\n            </View>\n          );\n        }\n      )}\n    </CenterWrapper>\n  );\n};\n\nexport default SelectionView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: var(--card-title-color);\n  text-align: center;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst Prop = styled.div`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px;\n  float: left;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.tile.backgroundColorLink};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: calc(100% - 24px);\n  margin: 5px 2px 5px 2px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Selection from \"../../../../data/Selection\";\n\nimport { faTrash, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport IconButton from \"../../../form_elements/IconButton\";\nimport NumberField from \"../../../form_elements/NumberField\";\nimport ShortTextField from \"../../../form_elements/ShortTextField\";\nimport StringField from \"../../../form_elements/StringField\";\n\ninterface $Props {\n  selection: Selection;\n  onEdit: (value: Selection) => void;\n}\n\nconst SelectionEditView = ({ selection, onEdit }: $Props) => {\n  const onSelectionChange = (\n    oldSelection: { entityName: string; entityText: string; level: number },\n    field: string,\n    value: string | number\n  ) => {\n    let selections = selection.selectionOptions.map(\n      (selection: {\n        entityName: string;\n        entityText: string;\n        level: number;\n      }) => {\n        if (selection === oldSelection) {\n          return {\n            ...selection,\n            [field]: value,\n          };\n        } else {\n          return selection;\n        }\n      }\n    );\n    onEdit({ ...selection, selectionOptions: selections });\n  };\n\n  const addNewSelection = () => {\n    onEdit({\n      ...selection,\n      selectionOptions: [\n        ...selection.selectionOptions,\n        { entityName: \"\", entityText: \"\", level: 0 },\n      ],\n    });\n  };\n\n  const removeSelection = (oldSelection: {\n    entityName: string;\n    entityText: string;\n    level: number;\n  }) => {\n    let selections = selection.selectionOptions;\n    const index: number = selections.indexOf(oldSelection);\n    if (index !== -1) {\n      selections.splice(index, 1);\n      onEdit({ ...selection, selectionOptions: selections });\n    }\n  };\n\n  return (\n    <CenterWrapper>\n      <View>\n        <StringField\n          value={selection.name}\n          label=\"Name\"\n          onChange={(name) => onEdit({ ...selection, name: name })}\n        />\n        {selection.selectionOptions.map(\n          (\n            selection: {\n              entityName: string;\n              entityText: string;\n              level: number;\n            },\n            index: number\n          ) => {\n            return (\n              <SelectionWrapper key={index}>\n                <SelectionName\n                  value={selection.entityName}\n                  label=\"Name\"\n                  onChange={(name) =>\n                    onSelectionChange(selection, \"entityName\", name)\n                  }\n                />\n                <SelectionLevel\n                  value={selection.level}\n                  label=\"Level\"\n                  onChange={(level) =>\n                    onSelectionChange(selection, \"level\", level)\n                  }\n                />\n                <IconButton\n                  icon={faTrash}\n                  onClick={() => removeSelection(selection)}\n                />\n                <SelectionText\n                value={selection.entityText}\n                label=\"Text\"\n                onChange={(text) => onSelectionChange(selection, \"entityText\", text)}\n              />\n              </SelectionWrapper>\n            );\n          }\n        )}\n        <SelectionWrapper>\n          <IconButton icon={faPlus} onClick={() => addNewSelection()} />\n        </SelectionWrapper>\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default SelectionEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  padding: 5px;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst SelectionWrapper = styled.div`\n  flex: 1 1 600px;\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\nconst SelectionName = styled(StringField)`\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  padding: 10px;\n  border-radius: 5px;\n  margin: 2px;\n  flex: 3 3 auto;\n`;\nconst SelectionLevel = styled(NumberField)`\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  padding: 10px;\n  border-radius: 5px;\n  margin: 2px;\n  flex: 1 1 auto;\n`;\nconst SelectionText = styled(ShortTextField)`\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  padding: 10px;\n  border-radius: 5px;\n  margin: 2px;\n  flex: 4 4 auto;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\n\nimport {\n  faArrowLeft,\n  faSave,\n  faTrash,\n  faExclamationTriangle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport SelectionView from \"./SelectionView\";\nimport SelectionEditView from \"./SelectionEditView\";\nimport BackButton from \"../../../form_elements/BackButton\";\nimport Selection from \"../../../../data/Selection\";\nimport IconButton from \"../../../form_elements/IconButton\";\nimport { remove, updateWithCallback } from \"../../../../services/DatabaseService\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Dialog from \"../../../general_elements/Dialog\";\nimport { EditToggle, ToggleLeft, ToggleRight } from \"../../../general_elements/ToggleStyle\";\n\ninterface $Props {\n  selection: Selection;\n  isNew: boolean;\n}\n\nconst SelectionDetail = ({ selection, isNew }: $Props) => {\n  const [editMode, setMode] = useState<boolean>(isNew);\n  const [selectionObj, editSelection] = useState<Selection>(selection);\n  const [showAlert, setAlert] = useState<boolean>(false);\n  const [showDeleteDialog, setDeleteDialog] = useState<boolean>(false);\n  const [message, setMessage] = useState<string>(\"\");\n  const [unsavedChanges, setUnsavedChanges] = useState<boolean>(false);\n  let history = useHistory();\n\n  const deleteSelection = () => {\n    setDeleteDialog(true);\n  };\n\n  useEffect(() => {\n    if (selectionObj !== selection) {\n      setUnsavedChanges(true);\n    }\n  }, [selectionObj, selection]);\n\n  const updateSelection = (tableName: string, selectionObj: Selection) => {\n    updateWithCallback(tableName, selectionObj, (result) => {\n      if (result > 0) {\n        setUnsavedChanges(false);\n        setMessage(\"Saved successful!\");\n        setAlert(true);\n      } else {\n        setMessage(\"Something went wrong!\");\n        setAlert(true);\n      }\n      setTimeout(() => {\n        setAlert(false);\n      }, 3000);\n    });\n  };\n\n  return (\n    <>\n      {showDeleteDialog && (\n        <Dialog\n          message={`Delete ${selection.name}?`}\n          icon={faExclamationTriangle}\n          confirmeText={\"Delete\"}\n          confirmeClick={() => {\n            remove(\"selections\", selection.id);\n            history.goBack();\n          }}\n          abortText={\"Back\"}\n          abortClick={() => {\n            setDeleteDialog(false);\n          }}\n        />\n      )}\n      <TopBar>\n        <BackButton icon={faArrowLeft} action={() => history.goBack()} />\n        <EditToggle mode={editMode.toString()}>\n          <ToggleLeft onClick={() => setMode(false)}>View</ToggleLeft>\n          <ToggleRight onClick={() => setMode(true)}>Edit</ToggleRight>\n        </EditToggle>\n        {unsavedChanges && <Icon icon={faExclamationTriangle} title={\"Unsaved changes!\"} />}\n        {editMode && (\n          <>\n            <IconButton onClick={() => updateSelection(\"selections\", selectionObj)} icon={faSave} />\n            <IconButton onClick={() => deleteSelection()} icon={faTrash} />\n            {message && showAlert && <Message>{message}</Message>}\n          </>\n        )}\n      </TopBar>\n      {editMode ? (\n        <SelectionEditView selection={selectionObj} onEdit={(value) => editSelection(value)} />\n      ) : (\n        <SelectionView selection={selectionObj} />\n      )}\n    </>\n  );\n};\n\nexport default SelectionDetail;\n\nconst TopBar = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  overflow: hidden;\n  flex: 1 1;\n  min-width: calc(100% - 20px);\n  height: 45px;\n  padding: 10px;\n`;\n\nconst Message = styled.div`\n  padding: 5px;\n  width: 150px;\n  height: 30px;\n  line-height: 30px;\n  border-radius: 5px;\n  float: right;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  float: right;\n  line-height: 30px;\n  display: block;\n  height: 30px;\n  padding: 10px;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { MyAppDatabase } from \"../../../../../database/MyDatabase\";\nimport { useItem } from \"../../../../../hooks/DexieHooks\";\nimport { LoadingSpinner } from \"../../../../Loading\";\nimport SelectionDetail from \"../SelectionDetail\";\n\n\ntype TParams = { id: string };\n\nconst IdToSelection = ({ match }: RouteComponentProps<TParams>) => {\n  const db = new MyAppDatabase();\n  const [selection, loading, error] = useItem(db.selections, +match.params.id);\n\n  return (\n    <>\n      {!error && loading && <LoadingSpinner />}\n      {error && !loading && <>Fail by Id</>}\n      {!error && !loading && selection !== undefined && (\n        <SelectionDetail selection={selection} isNew={selection.name === \"\" ? true : false} />\n      )}\n    </>\n  );\n};\n\nexport default IdToSelection;\n"],"sourceRoot":""}