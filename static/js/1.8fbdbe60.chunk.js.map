{"version":3,"sources":["services/DatabaseService.tsx","database/MyDatabase.tsx"],"names":["update","tableName","data","db","MyAppDatabase","open","then","table","id","finally","close","updateWithCallback","callback","result","saveNew","entity","filename","a","put","prom","saveWithCallback","add","remove","undefined","delete","reciveAll","toArray","array","reciveCount","count","reciveCountPromise","reciveByAttribute","name","value","where","equalsIgnoreCase","recivePromiseByAttribute","recivePromiseByAttributeCount","equals","reciveAllPromise","applyFilters","obj","filters","test","forEach","filter","fieldName","Array","hasTag","fieldPart","toLowerCase","includes","push","console","log","arrayTest","filterPart","val","reciveAllFiltered","sortedFiled","reverse","sort","sortBy","reciveAttributeSelection","attribute","orderBy","uniqueKeys","reciveAttributeSelectionPromise","createNewWithId","deleteAll","clear","exportFilteredFromTable","all","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","JSON","stringify","type","document","createElement","download","href","encodeURIComponent","target","body","appendChild","click","removeChild","spells","items","gears","monsters","races","subraces","classes","subclasses","chars","encounters","books","selections","randomTables","campaigns","quests","npcs","worlds","locations","events","groups","version","stores","chars_spells","chars_monsters","chars_items","upgrade","trans","toCollection","modify","char","campaign","Dexie"],"mappings":"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FC,MACE,6FACFC,MACE,0FACFC,SACE,mOACFC,MACE,+FACFC,SAAU,6DACVC,QAAS,qFACTC,WAAY,gDACZC,MACE,iTACFC,WAAY,gCACZC,MAAO,uCACPC,WAAY,2CAEd,EAAKS,QAAQ,IAAIC,OAAO,CACtBrB,OACE,oGACFC,MACE,6FACFC,MACE,0FACFC,SACE,mOACFC,MACE,+FACFC,SAAU,6DACVC,QAAS,qFACTC,WAAY,gDACZC,MACE,iTACFC,WAAY,gCACZC,MAAO,uCACPC,WAAY,yCACZC,aAAc,uCAEhB,EAAKQ,QAAQ,IAAIC,OAAO,CACtBrB,OACE,8GACFC,MACE,6FACFC,MACE,0FACFC,SACE,mOACFC,MACE,+FACFC,SAAU,6DACVC,QAAS,qFACTC,WAAY,gDACZC,MACE,iTACFC,WAAY,gCACZC,MAAO,uCACPC,WAAY,yCACZC,aAAc,uCAEhB,EAAKQ,QAAQ,IAAIC,OAAO,CACtBrB,OACE,8GACFC,MACE,6FACFC,MACE,0FACFC,SACE,mOACFC,MACE,+FACFC,SAAU,6DACVC,QAAS,qFACTC,WAAY,gDACZC,MACE,iTACFC,WAAY,gCACZC,MAAO,uCACPC,WAAY,yCACZC,aAAc,qCACdC,UACE,yFAEJ,EAAKO,QAAQ,IAAIC,OAAO,CACtBrB,OACE,8GACFC,MACE,6FACFC,MACE,0FACFC,SACE,mOACFC,MACE,+FACFC,SAAU,6DACVC,QAAS,qFACTC,WAAY,gDACZC,MACE,iTACFC,WAAY,gCACZC,MAAO,uCACPC,WAAY,yCACZC,aAAc,qCACdC,UACE,uFACFC,OACE,2FACFC,KAAM,gEACNC,OAAQ,4EACRC,UAAW,iEACXC,OAAQ,uEAEV,EAAKE,QAAQ,IAAIC,OAAO,CACtBrB,OACE,8GACFC,MACE,6FACFC,MACE,0FACFC,SACE,mOACFC,MACE,+FACFC,SAAU,6DACVC,QAAS,qFACTC,WAAY,gDACZC,MACE,iTACFC,WAAY,gCACZC,MAAO,uCACPC,WAAY,yCACZC,aAAc,qCACdC,UACE,4FACFC,OACE,2FACFC,KAAM,gEACNC,OAAQ,4EACRC,UAAW,iEACXC,OAAQ,uEAEV,EAAKE,QAAQ,IAAIC,OAAO,CACtBrB,OACE,8GACFC,MACE,6FACFC,MACE,0FACFC,SACE,mOACFC,MACE,+FACFC,SAAU,6DACVC,QAAS,qFACTC,WAAY,gDACZC,MACE,iTACFC,WAAY,gCACZC,MAAO,uCACPC,WAAY,yCACZC,aAAc,qCACdC,UACE,gGACFC,OAAQ,wEACRC,KAAM,gEACNC,OAAQ,iEACRC,UACE,qFACFC,OAAQ,4DAEV,EAAKE,QAAQ,IAAIC,OAAO,CACtBrB,OACE,8GACFC,MACE,6FACFC,MACE,0FACFC,SACE,mOACFC,MACE,+FACFC,SAAU,6DACVC,QAAS,qFACTC,WAAY,gDACZC,MACE,iTACFC,WAAY,gCACZC,MAAO,uCACPC,WAAY,yCACZC,aAAc,qCACdC,UACE,gGACFC,OAAQ,wEACRC,KAAM,gEACNC,OAAQ,qEACRC,UAAW,yDACXC,OAAQ,mDACRC,OAAQ,mFAEV,EAAKC,QAAQ,IAAIC,OAAO,CACtBrB,OACE,8GACFC,MACE,6FACFC,MACE,0FACFC,SACE,mOACFC,MACE,+FACFC,SAAU,6DACVC,QAAS,qFACTC,WAAY,gDACZC,MACE,iTACFC,WACE,qFACFC,MAAO,uCACPC,WAAY,yCACZC,aAAc,qCACdC,UACE,gGACFC,OAAQ,wEACRC,KAAM,gEACNC,OAAQ,qEACRC,UAAW,yDACXC,OAAQ,mDACRC,OAAQ,mFAEV,EAAKC,QAAQ,IACVC,OAAO,CACNrB,OACE,8GACFC,MACE,6FACFC,MACE,0FACFC,SACE,mOACFC,MACE,+FACFC,SAAU,6DACVC,QACE,qFACFC,WAAY,gDACZC,MACE,2TACFC,WACE,qFACFC,MAAO,uCACPC,WAAY,yCACZC,aAAc,qCACdC,UACE,gGACFC,OAAQ,wEACRC,KAAM,gEACNC,OAAQ,qEACRC,UAAW,yDACXC,OAAQ,mDACRC,OAAQ,0FAETM,SAAQ,SAACC,GACR,OAAOA,EAAMlB,MAAMmB,eAAeC,QAAO,SAACC,QAClBnG,IAAlBmG,EAAKC,WAAwBD,EAAI,2BAAQA,GAAR,IAAcC,SAAU,YAInE,EAAK9B,OAAS,EAAKtF,MAAM,UACzB,EAAKuF,MAAQ,EAAKvF,MAAM,SACxB,EAAKwF,MAAQ,EAAKxF,MAAM,SACxB,EAAKyF,SAAW,EAAKzF,MAAM,YAC3B,EAAK0F,MAAQ,EAAK1F,MAAM,SACxB,EAAK2F,SAAW,EAAK3F,MAAM,YAC3B,EAAK4F,QAAU,EAAK5F,MAAM,WAC1B,EAAK6F,WAAa,EAAK7F,MAAM,cAC7B,EAAK8F,MAAQ,EAAK9F,MAAM,SACxB,EAAK+F,WAAa,EAAK/F,MAAM,cAC7B,EAAKgG,MAAQ,EAAKhG,MAAM,SACxB,EAAKiG,WAAa,EAAKjG,MAAM,cAC7B,EAAKkG,aAAe,EAAKlG,MAAM,gBAC/B,EAAKmG,UAAY,EAAKnG,MAAM,aAC5B,EAAKoG,OAAS,EAAKpG,MAAM,UACzB,EAAKqG,KAAO,EAAKrG,MAAM,QACvB,EAAKsG,OAAS,EAAKtG,MAAM,UACzB,EAAKuG,UAAY,EAAKvG,MAAM,aAC5B,EAAKwG,OAAS,EAAKxG,MAAM,UACzB,EAAKyG,OAAS,EAAKzG,MAAM,UA/Zb,EAtBhB,U,OAAmCqH","file":"static/js/1.8fbdbe60.chunk.js","sourcesContent":["import { MyAppDatabase } from \"../database/MyDatabase\";\nimport { IndexableType } from \"dexie\";\nimport IEntity from \"../data/IEntity\";\nimport Filter from \"../data/Filter\";\n\nexport const update = (tableName: string, data: IEntity) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName).update(data.id, data);\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const updateWithCallback = (\n  tableName: string,\n  data: IEntity,\n  callback: (data: number) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .update(data.id, data)\n        .then((result: number) => {\n          callback(result);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const save = (tableName: string, data: IEntity) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName).add(data);\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const saveNew = (tableName: string, entity: IEntity, filename: string) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(async function () {\n      delete entity[\"id\"];\n      const prom = await db.table(tableName).put({ ...entity, filename: filename });\n      return prom;\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const saveNewFromList = (\n  tableName: string,\n  entities: IEntity[],\n  filename: string,\n  callback: () => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      const refinedEntities = (entities as IEntity[]).map((entity: IEntity) => {\n        delete entity[\"id\"];\n        return { ...entity, filename: filename };\n      });\n      db.table(tableName)\n        .bulkPut(refinedEntities)\n        .then(() => {\n          callback();\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const saveWithCallback = (\n  tableName: string,\n  data: IEntity,\n  callback: (data: number) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .add(data)\n        .then((result: number) => {\n          callback(result);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const remove = (tableName: string, id: number | undefined) => {\n  const db = new MyAppDatabase();\n  if (id !== undefined) {\n    db.open()\n      .then(function () {\n        db.table(tableName).delete(id);\n      })\n      .finally(function () {\n        db.close();\n      });\n  }\n};\n\nexport const reciveAll = (tableName: string, callback: (data: IndexableType[]) => void) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .toArray()\n        .then((array) => {\n          callback(array);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveCount = (tableName: string, callback: (value: number) => void) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName).count((count) => {\n        callback(count);\n      });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveCountPromise = (tableName: string) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(function () {\n      return db.table(tableName).count();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveByAttribute = (\n  tableName: string,\n  name: string,\n  value: string,\n  callback: (data: IEntity) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .where(name)\n        .equalsIgnoreCase(value)\n        .toArray()\n        .then((array) => {\n          callback(array[0]);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const recivePromiseByAttribute = (tableName: string, name: string, value: string) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(async function () {\n      const array = await db.table(tableName).where(name).equalsIgnoreCase(value).toArray();\n      return array[0];\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const recivePromiseByAttributeCount = (\n  tableName: string,\n  name: string,\n  value: string | number\n) => {\n  const db = new MyAppDatabase();\n  if (typeof value === \"string\") {\n    return db\n      .open()\n      .then(async function () {\n        return await db.table(tableName).where(name).equalsIgnoreCase(value).count();\n      })\n      .finally(function () {\n        db.close();\n      });\n  } else if (typeof value === \"number\") {\n    return db\n      .open()\n      .then(async function () {\n        return await db.table(tableName).where(name).equals(value).count();\n      })\n      .finally(function () {\n        db.close();\n      });\n  } else {\n    return db\n      .open()\n      .then(async function () {\n        return await db\n          .table(tableName)\n          .where(name)\n          .equalsIgnoreCase(\"\" + value)\n          .count();\n      })\n      .finally(function () {\n        db.close();\n      });\n  }\n};\n\nexport const reciveAllPromise = (tableName: string) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(async function () {\n      return await db.table(tableName).toArray();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const applyFilters = (obj: any, filters: Filter[]) => {\n  let test: boolean[] = [];\n  filters.forEach((filter) => {\n    if (typeof filter.value === \"string\") {\n      if (obj[filter.fieldName] instanceof Array) {\n        let hasTag = false;\n        obj[filter.fieldName].forEach((fieldPart: string) => {\n          // @ts-ignore\n          if (fieldPart.toLowerCase().includes(filter.value.toLowerCase())) {\n            hasTag = true;\n          }\n        });\n        if (hasTag) {\n          test.push(true);\n        } else {\n          test.push(false);\n        }\n      } else {\n        console.log(obj, filter);\n        test.push(\n          // @ts-ignore\n          obj[filter.fieldName].toLowerCase().includes(filter.value.toLowerCase())\n        );\n      }\n    } else if (typeof filter.value === \"number\") {\n      // @ts-ignore\n      test.push(obj[filter.fieldName] === filter.value);\n    } else if (typeof filter.value === \"boolean\") {\n      // @ts-ignore\n      test.push(obj[filter.fieldName] === filter.value);\n    } else if (filter.value instanceof Array) {\n      let arrayTest: boolean = false;\n      filter.value.forEach((filterPart: string | boolean | number) => {\n        if (typeof filterPart === \"string\") {\n          if (\n            // @ts-ignore\n            obj[filter.fieldName].toLowerCase().includes(filterPart.toLowerCase())\n          )\n            arrayTest = true;\n        } else if (typeof filterPart === \"number\") {\n          // @ts-ignore\n          if (obj[filter.fieldName] === filterPart) arrayTest = true;\n        } else if (typeof filterPart === \"boolean\") {\n          // @ts-ignore\n          if (obj[filter.fieldName] === filterPart) arrayTest = true;\n        }\n      });\n      test.push(arrayTest);\n    }\n  });\n\n  let result = true;\n  test.forEach((val) => {\n    if (!val) result = false;\n  });\n  return result;\n};\n\nexport const reciveAllFiltered = (\n  tableName: string,\n  filters: Filter[],\n  callback: (data: IndexableType[]) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      let sortedFiled: string = \"name\";\n      let reverse: boolean = false;\n\n      filters.forEach((filter: Filter) => {\n        if (filter.sort !== 0) {\n          sortedFiled = filter.fieldName;\n          if (filter.sort === 2) reverse = true;\n        }\n      });\n\n      if (reverse) {\n        db.table(tableName)\n          .filter((obj) => applyFilters(obj, filters))\n          .reverse()\n          .sortBy(sortedFiled)\n          .then((data) => {\n            callback(data);\n          });\n      } else {\n        db.table(tableName)\n          .filter((obj) => applyFilters(obj, filters))\n          .sortBy(sortedFiled)\n          .then((data) => {\n            callback(data);\n          });\n      }\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveAttributeSelection = (\n  tableName: string,\n  attribute: string,\n  callback: (data: IndexableType[]) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .orderBy(attribute)\n        .uniqueKeys(function (array) {\n          callback(array);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveAttributeSelectionPromise = (tableName: string, attribute: string) => {\n  const db = new MyAppDatabase();\n  return db\n    .open()\n    .then(function () {\n      return db.table(tableName).orderBy(attribute).uniqueKeys();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const createNewWithId = (\n  tableName: string,\n  entity: IEntity,\n  callback: (id: number) => void\n) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .put(entity)\n        .then((id: number) => {\n          callback(id);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const deleteAll = (tableName: string) => {\n  const db = new MyAppDatabase();\n  db.open()\n    .then(function () {\n      db.table(tableName).clear();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const exportFilteredFromTable = (tableName: string, filters: Filter[], filename: string) => {\n  reciveAllFiltered(tableName, filters, (all: IndexableType[]) => {\n    let contentType = \"application/json;charset=utf-8;\";\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(all)))], {\n        type: contentType,\n      });\n      navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      var a = document.createElement(\"a\");\n      a.download = filename;\n      a.href = \"data:\" + contentType + \",\" + encodeURIComponent(JSON.stringify(all));\n      a.target = \"_blank\";\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    }\n  });\n};\n","import Dexie from \"dexie\";\nimport Book from \"../data/Book\";\nimport Campaign from \"../data/campaign/Campaign\";\nimport Npc from \"../data/campaign/Npc\";\nimport Quest from \"../data/campaign/Quest\";\nimport Char from \"../data/chars/Char\";\nimport Class from \"../data/classes/Class\";\nimport Subclass from \"../data/classes/Subclass\";\nimport Encounter from \"../data/encounter/Encounter\";\nimport Gear from \"../data/Gear\";\nimport Item from \"../data/Item\";\nimport Monster from \"../data/Monster\";\nimport Race from \"../data/races/Race\";\nimport Subrace from \"../data/races/Subrace\";\nimport RandomTable from \"../data/RandomTable\";\nimport Selection from \"../data/Selection\";\nimport Spell from \"../data/Spell\";\nimport World from \"../data/world/World\";\nimport Location from \"../data/world/Location\";\nimport Event from \"../data/world/Event\";\nimport Group from \"../data/campaign/Group\";\n\nexport class MyAppDatabase extends Dexie {\n  spells: Dexie.Table<Spell, number>; // number = type of the primkey\n  items: Dexie.Table<Item, number>; // number = type of the primkey\n  gears: Dexie.Table<Gear, number>; // number = type of the primkey\n  monsters: Dexie.Table<Monster, number>; // number = type of the primkey\n  races: Dexie.Table<Race, number>; // number = type of the primkey\n  subraces: Dexie.Table<Subrace, number>; // number = type of the primkey\n  classes: Dexie.Table<Class, number>; // number = type of the primkey\n  subclasses: Dexie.Table<Subclass, number>; // number = type of the primkey\n  chars: Dexie.Table<Char, number>; // number = type of the primkey\n  encounters: Dexie.Table<Encounter, number>; // number = type of the primkey\n  books: Dexie.Table<Book, number>; // number = type of the primkey\n  selections: Dexie.Table<Selection, number>; // number = type of the primkey\n  randomTables: Dexie.Table<RandomTable, number>; // number = type of the primkey\n  campaigns: Dexie.Table<Campaign, number>; // number = type of the primkey\n  quests: Dexie.Table<Quest, number>; // number = type of the primkey\n  npcs: Dexie.Table<Npc, number>; // number = type of the primkey\n  worlds: Dexie.Table<World, number>; // number = type of the primkey\n  locations: Dexie.Table<Location, number>; // number = type of the primkey\n  events: Dexie.Table<Event, number>; // number = type of the primkey\n  groups: Dexie.Table<Group, number>; // number = type of the primkey\n\n  constructor() {\n    super(\"DnDTomeDB\");\n    this.version(1).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic\",\n    });\n    this.version(2).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic\",\n      items: \"++id, name, sources, pic, description, type, rarity, attunment\",\n    });\n    this.version(3).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic\",\n      items: \"++id, name, sources, pic, description, type, rarity, attunment\",\n      gears: \"++id, name, sources, pic, description, type, cost, damage, weight, properties\",\n    });\n    this.version(4).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic\",\n      items: \"++id, name, sources, pic, description, type, rarity, attunment\",\n      gears: \"++id, name, sources, pic, description, type, cost, damage, weight, properties\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n    });\n    this.version(5).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic\",\n      items: \"++id, name, sources, pic, description, type, rarity, attunment\",\n      gears: \"++id, name, sources, pic, description, type, cost, damage, weight, properties\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n      chars:\n        \"++id, name, player, prof, level, pic, classes, race, background, ac, hp, currentHp, hitDice, init, speed, str, dex, con, int, wis, cha, strSave, dexSave, conSave, intSave, wisSave, chaSave, strSaveProf, dexSaveProf, conSaveProf, intSaveProf, wisSaveProf, chaSaveProf, actions, bonusActions, reactions, features, classFeatures, racialFeatures, profsLangs, senses, passivPerception, passivInsight, passivInvestigation, notesOne, notesTwo, notesThree, acrobatics, animalHandling, arcana, athletics, deception, history, insight, intimidation, investigation, medicine, nature, perception, performance, persuasion, religion, sleightOfHand, stealth, survival, acrobaticsProf, animalHandlingProf, arcanaProf, athleticsProf, deceptionProf, historyProf, insightProf, intimidationProf, investigationProf, medicineProf, natureProf, perceptionProf, performanceProf, persuasionProf, religionProf, sleightOfHandProf, stealthProf, survivalProf, spellNotes, alignment, inspiration, castingHit, castingDC\",\n    });\n    this.version(6).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic\",\n      items: \"++id, name, sources, pic, description, type, rarity, attunment\",\n      gears: \"++id, name, sources, pic, description, type, cost, damage, weight, properties\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n      chars:\n        \"++id, name, player, prof, level, pic, classes, race, background, ac, hp, currentHp, hitDice, init, speed, str, dex, con, int, wis, cha, strSave, dexSave, conSave, intSave, wisSave, chaSave, strSaveProf, dexSaveProf, conSaveProf, intSaveProf, wisSaveProf, chaSaveProf, actions, bonusActions, reactions, features, classFeatures, racialFeatures, profsLangs, senses, passivPerception, passivInsight, passivInvestigation, notesOne, notesTwo, notesThree, acrobatics, animalHandling, arcana, athletics, deception, history, insight, intimidation, investigation, medicine, nature, perception, performance, persuasion, religion, sleightOfHand, stealth, survival, acrobaticsProf, animalHandlingProf, arcanaProf, athleticsProf, deceptionProf, historyProf, insightProf, intimidationProf, investigationProf, medicineProf, natureProf, perceptionProf, performanceProf, persuasionProf, religionProf, sleightOfHandProf, stealthProf, survivalProf, spellNotes, alignment, inspiration, castingHit, castingDC\",\n      chars_spells: \"++id, char_id, spell_id, prepared\",\n      chars_monsters: \"++id, char_id, monster_id\",\n      chars_items:\n        \"++id, char_id, item_id, gear_id, amount, equiped, attuned, damage, hit, range, properties\",\n    });\n    this.version(7).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic\",\n      items:\n        \"++id, name, sources, pic, description, type, rarity, attunment, magicBonus, base, filename\",\n      gears:\n        \"++id, name, sources, pic, description, type, cost, damage, weight, properties, filename\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n      races:\n        \"++id, name, abilityScores, age, alignment, size, speed, lang, traits, sources, pic, filename\",\n      subraces: \"++id, name, type, abilityScores, traits, sources, filename\",\n      classes: \"++id, name, featureSets, hitDice, proficiencies, equipment, sources, pic, filename\",\n      subclasses: \"++id, name, type, features, sources, filename\",\n      chars:\n        \"++id, name, player, pic, classes, race, background, spells, spellSlots, items, monsters, ac, hp, currentHp, init, speed, str, dex, con, int, wis, cha, saves, actions, bonusActions, reactions, profsLangs, senses, money, skills, spellNotes, alignment, inspiration, castingHit, castingDC\",\n    });\n    this.version(8).stores({\n      chars_spells: null,\n      chars_monsters: null,\n      chars_items: null,\n\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic\",\n      items:\n        \"++id, name, sources, pic, description, type, rarity, attunment, magicBonus, base, filename\",\n      gears:\n        \"++id, name, sources, pic, description, type, cost, damage, weight, properties, filename\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n      races:\n        \"++id, name, abilityScores, age, alignment, size, speed, lang, traits, sources, pic, filename\",\n      subraces: \"++id, name, type, abilityScores, traits, sources, filename\",\n      classes: \"++id, name, featureSets, hitDice, proficiencies, equipment, sources, pic, filename\",\n      subclasses: \"++id, name, type, features, sources, filename\",\n      chars:\n        \"++id, name, player, pic, classes, race, background, spells, spellSlots, items, monsters, ac, hp, currentHp, init, speed, str, dex, con, int, wis, cha, saves, actions, bonusActions, reactions, profsLangs, senses, money, skills, spellNotes, alignment, inspiration, castingHit, castingDC\",\n      encounters: \"++id, name, monsters, players\",\n    });\n    this.version(9).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic\",\n      items:\n        \"++id, name, sources, pic, description, type, rarity, attunment, magicBonus, base, filename\",\n      gears:\n        \"++id, name, sources, pic, description, type, cost, damage, weight, properties, filename\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n      races:\n        \"++id, name, abilityScores, age, alignment, size, speed, lang, traits, sources, pic, filename\",\n      subraces: \"++id, name, type, abilityScores, traits, sources, filename\",\n      classes: \"++id, name, featureSets, hitDice, proficiencies, equipment, sources, pic, filename\",\n      subclasses: \"++id, name, type, features, sources, filename\",\n      chars:\n        \"++id, name, player, pic, classes, race, background, spells, spellSlots, items, monsters, ac, hp, currentHp, init, speed, str, dex, con, int, wis, cha, saves, actions, bonusActions, reactions, profsLangs, senses, money, skills, spellNotes, alignment, inspiration, castingHit, castingDC\",\n      encounters: \"++id, name, monsters, players\",\n      books: \"++id, name, cover, data, pages, tags\",\n    });\n    this.version(10).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic\",\n      items:\n        \"++id, name, sources, pic, description, type, rarity, attunment, magicBonus, base, filename\",\n      gears:\n        \"++id, name, sources, pic, description, type, cost, damage, weight, properties, filename\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n      races:\n        \"++id, name, abilityScores, age, alignment, size, speed, lang, traits, sources, pic, filename\",\n      subraces: \"++id, name, type, abilityScores, traits, sources, filename\",\n      classes: \"++id, name, featureSets, hitDice, proficiencies, equipment, sources, pic, filename\",\n      subclasses: \"++id, name, type, features, sources, filename\",\n      chars:\n        \"++id, name, player, pic, classes, race, background, spells, spellSlots, items, monsters, ac, hp, currentHp, init, speed, str, dex, con, int, wis, cha, saves, actions, bonusActions, reactions, profsLangs, senses, money, skills, spellNotes, alignment, inspiration, castingHit, castingDC\",\n      encounters: \"++id, name, monsters, players\",\n      books: \"++id, name, cover, data, pages, tags\",\n      selections: \"++id, name, selectionOptions, filename\",\n    });\n    this.version(11).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic\",\n      items:\n        \"++id, name, sources, pic, description, type, rarity, attunment, magicBonus, base, filename\",\n      gears:\n        \"++id, name, sources, pic, description, type, cost, damage, weight, properties, filename\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n      races:\n        \"++id, name, abilityScores, age, alignment, size, speed, lang, traits, sources, pic, filename\",\n      subraces: \"++id, name, type, abilityScores, traits, sources, filename\",\n      classes: \"++id, name, featureSets, hitDice, proficiencies, equipment, sources, pic, filename\",\n      subclasses: \"++id, name, type, features, sources, filename\",\n      chars:\n        \"++id, name, player, pic, classes, race, background, spells, spellSlots, activeSelections, items, monsters, ac, hp, currentHp, init, speed, str, dex, con, int, wis, cha, saves, actions, bonusActions, reactions, profsLangs, senses, money, skills, spellNotes, alignment, inspiration, castingHit, castingDC\",\n      encounters: \"++id, name, monsters, players\",\n      books: \"++id, name, cover, data, pages, tags\",\n      selections: \"++id, name, selectionOptions, filename\",\n    });\n    this.version(12).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic\",\n      items:\n        \"++id, name, sources, pic, description, type, rarity, attunment, magicBonus, base, filename\",\n      gears:\n        \"++id, name, sources, pic, description, type, cost, damage, weight, properties, filename\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n      races:\n        \"++id, name, abilityScores, age, alignment, size, speed, lang, traits, sources, pic, filename\",\n      subraces: \"++id, name, type, abilityScores, traits, sources, filename\",\n      classes: \"++id, name, featureSets, hitDice, proficiencies, equipment, sources, pic, filename\",\n      subclasses: \"++id, name, type, features, sources, filename\",\n      chars:\n        \"++id, name, player, pic, classes, race, background, spells, spellSlots, activeSelections, items, monsters, ac, hp, currentHp, init, speed, str, dex, con, int, wis, cha, saves, actions, bonusActions, reactions, profsLangs, senses, money, skills, spellNotes, alignment, inspiration, castingHit, castingDC\",\n      encounters: \"++id, name, monsters, players\",\n      books: \"++id, name, cover, data, pages, tags\",\n      selections: \"++id, name, selectionOptions, filename\",\n      randomTables: \"++id, name, rows, header, filename\",\n    });\n    this.version(13).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic, filename\",\n      items:\n        \"++id, name, sources, pic, description, type, rarity, attunment, magicBonus, base, filename\",\n      gears:\n        \"++id, name, sources, pic, description, type, cost, damage, weight, properties, filename\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n      races:\n        \"++id, name, abilityScores, age, alignment, size, speed, lang, traits, sources, pic, filename\",\n      subraces: \"++id, name, type, abilityScores, traits, sources, filename\",\n      classes: \"++id, name, featureSets, hitDice, proficiencies, equipment, sources, pic, filename\",\n      subclasses: \"++id, name, type, features, sources, filename\",\n      chars:\n        \"++id, name, player, pic, classes, race, background, spells, spellSlots, activeSelections, items, monsters, ac, hp, currentHp, init, speed, str, dex, con, int, wis, cha, saves, actions, bonusActions, reactions, profsLangs, senses, money, skills, spellNotes, alignment, inspiration, castingHit, castingDC\",\n      encounters: \"++id, name, monsters, players\",\n      books: \"++id, name, cover, data, pages, tags\",\n      selections: \"++id, name, selectionOptions, filename\",\n      randomTables: \"++id, name, rows, header, filename\",\n    });\n    this.version(14).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic, filename\",\n      items:\n        \"++id, name, sources, pic, description, type, rarity, attunment, magicBonus, base, filename\",\n      gears:\n        \"++id, name, sources, pic, description, type, cost, damage, weight, properties, filename\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n      races:\n        \"++id, name, abilityScores, age, alignment, size, speed, lang, traits, sources, pic, filename\",\n      subraces: \"++id, name, type, abilityScores, traits, sources, filename\",\n      classes: \"++id, name, featureSets, hitDice, proficiencies, equipment, sources, pic, filename\",\n      subclasses: \"++id, name, type, features, sources, filename\",\n      chars:\n        \"++id, name, player, pic, classes, race, background, spells, spellSlots, activeSelections, items, monsters, ac, hp, currentHp, init, speed, str, dex, con, int, wis, cha, saves, actions, bonusActions, reactions, profsLangs, senses, money, skills, spellNotes, alignment, inspiration, castingHit, castingDC\",\n      encounters: \"++id, name, monsters, players\",\n      books: \"++id, name, cover, data, pages, tags\",\n      selections: \"++id, name, selectionOptions, filename\",\n      randomTables: \"++id, name, rows, header, filename\",\n      campaigns:\n        \"++id, name, pic, description, world, quests, npcs, notes, players, sources, filename\",\n    });\n    this.version(15).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic, filename\",\n      items:\n        \"++id, name, sources, pic, description, type, rarity, attunment, magicBonus, base, filename\",\n      gears:\n        \"++id, name, sources, pic, description, type, cost, damage, weight, properties, filename\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n      races:\n        \"++id, name, abilityScores, age, alignment, size, speed, lang, traits, sources, pic, filename\",\n      subraces: \"++id, name, type, abilityScores, traits, sources, filename\",\n      classes: \"++id, name, featureSets, hitDice, proficiencies, equipment, sources, pic, filename\",\n      subclasses: \"++id, name, type, features, sources, filename\",\n      chars:\n        \"++id, name, player, pic, classes, race, background, spells, spellSlots, activeSelections, items, monsters, ac, hp, currentHp, init, speed, str, dex, con, int, wis, cha, saves, actions, bonusActions, reactions, profsLangs, senses, money, skills, spellNotes, alignment, inspiration, castingHit, castingDC\",\n      encounters: \"++id, name, monsters, players\",\n      books: \"++id, name, cover, data, pages, tags\",\n      selections: \"++id, name, selectionOptions, filename\",\n      randomTables: \"++id, name, rows, header, filename\",\n      campaigns:\n        \"++id, name, pic, description, world, quests, npcs, notes, players, sources, filename\",\n      quests:\n        \"++id, name, pic, locations, origin, description, rewards, followQuest, sources, filename\",\n      npcs: \"++id, name, pic, char, traits, description, sources, filename\",\n      worlds: \"++id, name, map, description, locations, events, notes, sources, filename\",\n      locations: \"++id, name, map, description, events, notes, sources, filename\",\n      events: \"++id, name, description, locations, npcs, notes, sources, filename\",\n    });\n    this.version(16).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic, filename\",\n      items:\n        \"++id, name, sources, pic, description, type, rarity, attunment, magicBonus, base, filename\",\n      gears:\n        \"++id, name, sources, pic, description, type, cost, damage, weight, properties, filename\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n      races:\n        \"++id, name, abilityScores, age, alignment, size, speed, lang, traits, sources, pic, filename\",\n      subraces: \"++id, name, type, abilityScores, traits, sources, filename\",\n      classes: \"++id, name, featureSets, hitDice, proficiencies, equipment, sources, pic, filename\",\n      subclasses: \"++id, name, type, features, sources, filename\",\n      chars:\n        \"++id, name, player, pic, classes, race, background, spells, spellSlots, activeSelections, items, monsters, ac, hp, currentHp, init, speed, str, dex, con, int, wis, cha, saves, actions, bonusActions, reactions, profsLangs, senses, money, skills, spellNotes, alignment, inspiration, castingHit, castingDC\",\n      encounters: \"++id, name, monsters, players\",\n      books: \"++id, name, cover, data, pages, tags\",\n      selections: \"++id, name, selectionOptions, filename\",\n      randomTables: \"++id, name, rows, header, filename\",\n      campaigns:\n        \"++id, name, pic, description, world, quests, npcs, notes, players, map, sources, filename\",\n      quests:\n        \"++id, name, pic, locations, origin, description, rewards, followQuest, sources, filename\",\n      npcs: \"++id, name, pic, char, traits, description, sources, filename\",\n      worlds: \"++id, name, map, description, locations, events, notes, sources, filename\",\n      locations: \"++id, name, map, description, events, notes, sources, filename\",\n      events: \"++id, name, description, locations, npcs, notes, sources, filename\",\n    });\n    this.version(17).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic, filename\",\n      items:\n        \"++id, name, sources, pic, description, type, rarity, attunment, magicBonus, base, filename\",\n      gears:\n        \"++id, name, sources, pic, description, type, cost, damage, weight, properties, filename\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n      races:\n        \"++id, name, abilityScores, age, alignment, size, speed, lang, traits, sources, pic, filename\",\n      subraces: \"++id, name, type, abilityScores, traits, sources, filename\",\n      classes: \"++id, name, featureSets, hitDice, proficiencies, equipment, sources, pic, filename\",\n      subclasses: \"++id, name, type, features, sources, filename\",\n      chars:\n        \"++id, name, player, pic, classes, race, background, spells, spellSlots, activeSelections, items, monsters, ac, hp, currentHp, init, speed, str, dex, con, int, wis, cha, saves, actions, bonusActions, reactions, profsLangs, senses, money, skills, spellNotes, alignment, inspiration, castingHit, castingDC\",\n      encounters: \"++id, name, monsters, players\",\n      books: \"++id, name, cover, data, pages, tags\",\n      selections: \"++id, name, selectionOptions, filename\",\n      randomTables: \"++id, name, rows, header, filename\",\n      campaigns:\n        \"++id, name, pic, description, world, npcs, notes, logs, players, flow, map, sources, filename\",\n      quests: \"++id, name, pic, description, rewards, followQuest, sources, filename\",\n      npcs: \"++id, name, pic, char, traits, description, sources, filename\",\n      worlds: \"++id, name, map, description, events, notes, sources, filename\",\n      locations:\n        \"++id, name, map, dimension, description, events, notes, markers, sources, filename\",\n      events: \"++id, name, description, npcs, notes, sources, filename\",\n    });\n    this.version(18).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic, filename\",\n      items:\n        \"++id, name, sources, pic, description, type, rarity, attunment, magicBonus, base, filename\",\n      gears:\n        \"++id, name, sources, pic, description, type, cost, damage, weight, properties, filename\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n      races:\n        \"++id, name, abilityScores, age, alignment, size, speed, lang, traits, sources, pic, filename\",\n      subraces: \"++id, name, type, abilityScores, traits, sources, filename\",\n      classes: \"++id, name, featureSets, hitDice, proficiencies, equipment, sources, pic, filename\",\n      subclasses: \"++id, name, type, features, sources, filename\",\n      chars:\n        \"++id, name, player, pic, classes, race, background, spells, spellSlots, activeSelections, items, monsters, ac, hp, currentHp, init, speed, str, dex, con, int, wis, cha, saves, actions, bonusActions, reactions, profsLangs, senses, money, skills, spellNotes, alignment, inspiration, castingHit, castingDC\",\n      encounters: \"++id, name, monsters, players\",\n      books: \"++id, name, cover, data, pages, tags\",\n      selections: \"++id, name, selectionOptions, filename\",\n      randomTables: \"++id, name, rows, header, filename\",\n      campaigns:\n        \"++id, name, pic, description, world, npcs, notes, logs, players, flow, map, sources, filename\",\n      quests: \"++id, name, pic, description, rewards, followQuest, sources, filename\",\n      npcs: \"++id, name, pic, char, traits, description, sources, filename\",\n      worlds: \"++id, name, map, description, locations, events, sources, filename\",\n      locations: \"++id, name, map, dimension, markers, sources, filename\",\n      events: \"++id, name, description, date, sources, filename\",\n      groups: \"++id, name, pic, description, npcs, players, monsters, flow, sources, filename\",\n    });\n    this.version(19).stores({\n      spells:\n        \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic, filename\",\n      items:\n        \"++id, name, sources, pic, description, type, rarity, attunment, magicBonus, base, filename\",\n      gears:\n        \"++id, name, sources, pic, description, type, cost, damage, weight, properties, filename\",\n      monsters:\n        \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n      races:\n        \"++id, name, abilityScores, age, alignment, size, speed, lang, traits, sources, pic, filename\",\n      subraces: \"++id, name, type, abilityScores, traits, sources, filename\",\n      classes: \"++id, name, featureSets, hitDice, proficiencies, equipment, sources, pic, filename\",\n      subclasses: \"++id, name, type, features, sources, filename\",\n      chars:\n        \"++id, name, player, pic, classes, race, background, spells, spellSlots, activeSelections, items, monsters, ac, hp, currentHp, init, speed, str, dex, con, int, wis, cha, saves, actions, bonusActions, reactions, profsLangs, senses, money, skills, spellNotes, alignment, inspiration, castingHit, castingDC\",\n      encounters:\n        \"++id, name, enemies, players, isPlaying, currentInit, roundCounter, map, dimension\",\n      books: \"++id, name, cover, data, pages, tags\",\n      selections: \"++id, name, selectionOptions, filename\",\n      randomTables: \"++id, name, rows, header, filename\",\n      campaigns:\n        \"++id, name, pic, description, world, npcs, notes, logs, players, flow, map, sources, filename\",\n      quests: \"++id, name, pic, description, rewards, followQuest, sources, filename\",\n      npcs: \"++id, name, pic, char, traits, description, sources, filename\",\n      worlds: \"++id, name, map, description, locations, events, sources, filename\",\n      locations: \"++id, name, map, dimension, markers, sources, filename\",\n      events: \"++id, name, description, date, sources, filename\",\n      groups: \"++id, name, pic, description, npcs, players, monsters, flow, sources, filename\",\n    });\n    this.version(20)\n      .stores({\n        spells:\n          \"++id, name, classes, sources, level, school, time, range, components, duration, ritual, text, pic, filename\",\n        items:\n          \"++id, name, sources, pic, description, type, rarity, attunment, magicBonus, base, filename\",\n        gears:\n          \"++id, name, sources, pic, description, type, cost, damage, weight, properties, filename\",\n        monsters:\n          \"++id, name, type, subtype, cr, ac, hp, str, dex, con, int, wis, cha, senses, lang, speed, source, skills, savingThrows, dmgImmunities, dmgResistance, dmgVulnerabilitie, conImmunities, sAblt, ablt, lAblt, pic, size, alignment\",\n        races:\n          \"++id, name, abilityScores, age, alignment, size, speed, lang, traits, sources, pic, filename\",\n        subraces: \"++id, name, type, abilityScores, traits, sources, filename\",\n        classes:\n          \"++id, name, featureSets, hitDice, proficiencies, equipment, sources, pic, filename\",\n        subclasses: \"++id, name, type, features, sources, filename\",\n        chars:\n          \"++id, name, player, campaign, pic, classes, race, background, spells, spellSlots, activeSelections, items, monsters, ac, hp, currentHp, init, speed, str, dex, con, int, wis, cha, saves, actions, bonusActions, reactions, profsLangs, senses, money, skills, spellNotes, alignment, inspiration, castingHit, castingDC\",\n        encounters:\n          \"++id, name, enemies, players, isPlaying, currentInit, roundCounter, map, dimension\",\n        books: \"++id, name, cover, data, pages, tags\",\n        selections: \"++id, name, selectionOptions, filename\",\n        randomTables: \"++id, name, rows, header, filename\",\n        campaigns:\n          \"++id, name, pic, description, world, npcs, notes, logs, players, flow, map, sources, filename\",\n        quests: \"++id, name, pic, description, rewards, followQuest, sources, filename\",\n        npcs: \"++id, name, pic, char, traits, description, sources, filename\",\n        worlds: \"++id, name, map, description, locations, events, sources, filename\",\n        locations: \"++id, name, map, dimension, markers, sources, filename\",\n        events: \"++id, name, description, date, sources, filename\",\n        groups: \"++id, name, pic, description, notes, npcs, players, monsters, flow, sources, filename\",\n      })\n      .upgrade((trans: any) => {\n        return trans.chars.toCollection().modify((char: Char) => {\n          if (char.campaign === undefined) char = { ...char, campaign: \"\" };\n        });\n      });\n\n    this.spells = this.table(\"spells\");\n    this.items = this.table(\"items\");\n    this.gears = this.table(\"gears\");\n    this.monsters = this.table(\"monsters\");\n    this.races = this.table(\"races\");\n    this.subraces = this.table(\"subraces\");\n    this.classes = this.table(\"classes\");\n    this.subclasses = this.table(\"subclasses\");\n    this.chars = this.table(\"chars\");\n    this.encounters = this.table(\"encounters\");\n    this.books = this.table(\"books\");\n    this.selections = this.table(\"selections\");\n    this.randomTables = this.table(\"randomTables\");\n    this.campaigns = this.table(\"campaigns\");\n    this.quests = this.table(\"quests\");\n    this.npcs = this.table(\"npcs\");\n    this.worlds = this.table(\"worlds\");\n    this.locations = this.table(\"locations\");\n    this.events = this.table(\"events\");\n    this.groups = this.table(\"groups\");\n  }\n}\n"],"sourceRoot":""}