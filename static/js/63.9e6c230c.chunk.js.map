{"version":3,"sources":["data/IEntity.tsx","data/Selection.tsx","components/entities/selections/details/SelectionView.tsx","components/entities/selections/details/SelectionEditView.tsx","components/entities/selections/details/SelectionDetail.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/entities/selections/details/link-wrapper/NameToSelection.tsx","components/general_elements/ErrorTile.tsx"],"names":["isIEntity","arg","nameCheck","undefined","name","Selection","id","filename","selectionOptions","this","isSelection","selectionOptionsCheck","Array","isArray","SelectionView","selection","useState","send","setSend","CenterWrapper","View","Name","PropWrapper","TextButton","text","icon","faPaperPlane","onClick","P2PSender","data","mode","map","trait","index","key","Prop","PropTitle","entityName","level","Text","FormatedText","entityText","styled","div","theme","tile","color","backgroundColor","span","backgroundColorLink","SelectionEditView","onEdit","onSelectionChange","oldSelection","field","value","selections","removeSelection","indexOf","splice","StringField","label","onChange","SelectionWrapper","SelectionName","SelectionLevel","IconButton","faTrash","SelectionText","faPlus","NumberField","ShortTextField","SelectionDetail","isNew","editMode","setMode","selectionObj","editSelection","showAlert","setAlert","showDeleteDialog","setDeleteDialog","message","setMessage","unsavedChanges","setUnsavedChanges","history","useHistory","useEffect","Dialog","faExclamationTriangle","confirmeText","confirmeClick","remove","goBack","abortText","abortClick","TopBar","BackButton","faArrowLeft","action","toString","Icon","title","tableName","updateWithCallback","result","setTimeout","updateSelection","faSave","Message","FontAwesomeIcon","main","highlight","_toConsumableArray","arr","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","NameToSelection","match","db","MyAppDatabase","useItemByAttr","params","loading","error","buttonText","onButton","newSelection","createNewWithId","push","createNewSelection","ErrorTile","Tile","faPlusCircle","boxShadow","headerColor"],"mappings":"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","file":"static/js/63.9e6c230c.chunk.js","sourcesContent":["export default interface IEntity {\n    id?: number;\n    name: string;\n}\n\nexport function isIEntity(arg: any): arg is IEntity {\n    const nameCheck = arg.name !== undefined && typeof arg.name == \"string\";\n  \n    return (\n      arg &&\n      nameCheck \n    );\n  }","import IEntity, { isIEntity } from \"./IEntity\";\n\nexport default class Selection implements IEntity {\n  id?: number;\n  name: string;\n  selectionOptions: { entityName: string; entityText: string; level: number }[];\n  filename?: string;\n\n  constructor(\n    id?: number,\n    name?: string,\n    filename?: string,\n    selectionOptions?: {\n      entityName: string;\n      entityText: string;\n      level: number;\n    }[]\n  ) {\n    this.id = id;\n    this.filename = filename || \"\";\n    this.name = name || \"\";\n    this.selectionOptions = selectionOptions || [];\n  }\n}\n\nexport function isSelection(arg: any): arg is Selection {\n  const nameCheck = arg.name !== undefined && typeof arg.name == \"string\";\n  const selectionOptionsCheck =\n    arg.selectionOptions !== undefined &&\n    Array.isArray(arg.selectionOptions) &&\n    isIEntity(arg.selectionOptions[0]);\n\n  return arg && nameCheck && selectionOptionsCheck;\n}\n\nexport function findSelectionFormattError(\n  arg: any\n): {\n  nameCheck: boolean;\n  selectionOptionsCheck: boolean;\n} {\n  const nameCheck = arg.name !== undefined && typeof arg.name == \"string\";\n  const selectionOptionsCheck =\n    arg.selectionOptions !== undefined &&\n    Array.isArray(arg.selectionOptions) &&\n    isIEntity(arg.selectionOptions[0]);\n  return {\n    nameCheck: nameCheck,\n    selectionOptionsCheck: selectionOptionsCheck,\n  };\n}\n","import React, { useState } from \"react\";\nimport Selection from \"../../../../data/Selection\";\nimport styled from \"styled-components\";\n\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport TextButton from \"../../../form_elements/TextButton\";\nimport P2PSender from \"../../../p2p/P2PSender\";\nimport FormatedText from \"../../../general_elements/FormatedText\";\n\ninterface $Props {\n  selection: Selection;\n}\n\nconst SelectionView = ({ selection }: $Props) => {\n  const [send, setSend] = useState<boolean>(false);\n\n  return (\n    <CenterWrapper>\n      <View>\n        <Name>\n          <b>{selection.name}</b>\n        </Name>\n        <PropWrapper>\n          {!send && (\n            <TextButton\n              text={`Send ${selection.name}`}\n              icon={faPaperPlane}\n              onClick={() => setSend(true)}\n            />\n          )}\n          {!!send && <P2PSender data={selection} mode={\"THIS\"} />}\n        </PropWrapper>\n      </View>\n      {selection.selectionOptions.map(\n        (\n          trait: {\n            entityName: string;\n            entityText: string;\n            level: number;\n          },\n          index: number\n        ) => {\n          return (\n            <View key={index}>\n              <PropWrapper>\n                <Prop>\n                  <PropTitle>Name:</PropTitle>\n                  {trait.entityName}\n                </Prop>\n                <Prop>\n                  <PropTitle>Level:</PropTitle>\n                  {trait.level}\n                </Prop>\n                <Text>\n                  <FormatedText text={trait.entityText} />\n                </Text>\n              </PropWrapper>\n            </View>\n          );\n        }\n      )}\n    </CenterWrapper>\n  );\n};\n\nexport default SelectionView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 5px 10px 5px;\n  width: calc(100% - 30px);\n  color: var(--card-title-color);\n  text-align: center;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst Prop = styled.div`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px;\n  float: left;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.tile.backgroundColorLink};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: calc(100% - 24px);\n  margin: 5px 2px 5px 2px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Selection from \"../../../../data/Selection\";\n\nimport { faTrash, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport IconButton from \"../../../form_elements/IconButton\";\nimport NumberField from \"../../../form_elements/NumberField\";\nimport ShortTextField from \"../../../form_elements/ShortTextField\";\nimport StringField from \"../../../form_elements/StringField\";\n\ninterface $Props {\n  selection: Selection;\n  onEdit: (value: Selection) => void;\n}\n\nconst SelectionEditView = ({ selection, onEdit }: $Props) => {\n  const onSelectionChange = (\n    oldSelection: { entityName: string; entityText: string; level: number },\n    field: string,\n    value: string | number\n  ) => {\n    let selections = selection.selectionOptions.map(\n      (selection: {\n        entityName: string;\n        entityText: string;\n        level: number;\n      }) => {\n        if (selection === oldSelection) {\n          return {\n            ...selection,\n            [field]: value,\n          };\n        } else {\n          return selection;\n        }\n      }\n    );\n    onEdit({ ...selection, selectionOptions: selections });\n  };\n\n  const addNewSelection = () => {\n    onEdit({\n      ...selection,\n      selectionOptions: [\n        ...selection.selectionOptions,\n        { entityName: \"\", entityText: \"\", level: 0 },\n      ],\n    });\n  };\n\n  const removeSelection = (oldSelection: {\n    entityName: string;\n    entityText: string;\n    level: number;\n  }) => {\n    let selections = selection.selectionOptions;\n    const index: number = selections.indexOf(oldSelection);\n    if (index !== -1) {\n      selections.splice(index, 1);\n      onEdit({ ...selection, selectionOptions: selections });\n    }\n  };\n\n  return (\n    <CenterWrapper>\n      <View>\n        <StringField\n          value={selection.name}\n          label=\"Name\"\n          onChange={(name) => onEdit({ ...selection, name: name })}\n        />\n        {selection.selectionOptions.map(\n          (\n            selection: {\n              entityName: string;\n              entityText: string;\n              level: number;\n            },\n            index: number\n          ) => {\n            return (\n              <SelectionWrapper key={index}>\n                <SelectionName\n                  value={selection.entityName}\n                  label=\"Name\"\n                  onChange={(name) =>\n                    onSelectionChange(selection, \"entityName\", name)\n                  }\n                />\n                <SelectionLevel\n                  value={selection.level}\n                  label=\"Level\"\n                  onChange={(level) =>\n                    onSelectionChange(selection, \"level\", level)\n                  }\n                />\n                <IconButton\n                  icon={faTrash}\n                  onClick={() => removeSelection(selection)}\n                />\n                <SelectionText\n                value={selection.entityText}\n                label=\"Text\"\n                onChange={(text) => onSelectionChange(selection, \"entityText\", text)}\n              />\n              </SelectionWrapper>\n            );\n          }\n        )}\n        <SelectionWrapper>\n          <IconButton icon={faPlus} onClick={() => addNewSelection()} />\n        </SelectionWrapper>\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default SelectionEditView;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  padding: 5px;\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nconst SelectionWrapper = styled.div`\n  flex: 1 1 600px;\n  height: auto;\n  width: calc(100% - 6px);\n  float: left;\n  padding: 3px;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\nconst SelectionName = styled(StringField)`\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  padding: 10px;\n  border-radius: 5px;\n  margin: 2px;\n  flex: 3 3 auto;\n`;\nconst SelectionLevel = styled(NumberField)`\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  padding: 10px;\n  border-radius: 5px;\n  margin: 2px;\n  flex: 1 1 auto;\n`;\nconst SelectionText = styled(ShortTextField)`\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  padding: 10px;\n  border-radius: 5px;\n  margin: 2px;\n  flex: 4 4 auto;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\n\nimport {\n  faArrowLeft,\n  faSave,\n  faTrash,\n  faExclamationTriangle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport SelectionView from \"./SelectionView\";\nimport SelectionEditView from \"./SelectionEditView\";\nimport BackButton from \"../../../form_elements/BackButton\";\nimport Selection from \"../../../../data/Selection\";\nimport IconButton from \"../../../form_elements/IconButton\";\nimport { remove, updateWithCallback } from \"../../../../services/DatabaseService\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Dialog from \"../../../general_elements/Dialog\";\nimport { EditToggle, ToggleLeft, ToggleRight } from \"../../../general_elements/ToggleStyle\";\n\ninterface $Props {\n  selection: Selection;\n  isNew: boolean;\n}\n\nconst SelectionDetail = ({ selection, isNew }: $Props) => {\n  const [editMode, setMode] = useState<boolean>(isNew);\n  const [selectionObj, editSelection] = useState<Selection>(selection);\n  const [showAlert, setAlert] = useState<boolean>(false);\n  const [showDeleteDialog, setDeleteDialog] = useState<boolean>(false);\n  const [message, setMessage] = useState<string>(\"\");\n  const [unsavedChanges, setUnsavedChanges] = useState<boolean>(false);\n  let history = useHistory();\n\n  const deleteSelection = () => {\n    setDeleteDialog(true);\n  };\n\n  useEffect(() => {\n    if (selectionObj !== selection) {\n      setUnsavedChanges(true);\n    }\n  }, [selectionObj, selection]);\n\n  const updateSelection = (tableName: string, selectionObj: Selection) => {\n    updateWithCallback(tableName, selectionObj, (result) => {\n      if (result > 0) {\n        setUnsavedChanges(false);\n        setMessage(\"Saved successful!\");\n        setAlert(true);\n      } else {\n        setMessage(\"Something went wrong!\");\n        setAlert(true);\n      }\n      setTimeout(() => {\n        setAlert(false);\n      }, 3000);\n    });\n  };\n\n  return (\n    <>\n      {showDeleteDialog && (\n        <Dialog\n          message={`Delete ${selection.name}?`}\n          icon={faExclamationTriangle}\n          confirmeText={\"Delete\"}\n          confirmeClick={() => {\n            remove(\"selections\", selection.id);\n            history.goBack();\n          }}\n          abortText={\"Back\"}\n          abortClick={() => {\n            setDeleteDialog(false);\n          }}\n        />\n      )}\n      <TopBar>\n        <BackButton icon={faArrowLeft} action={() => history.goBack()} />\n        <EditToggle mode={editMode.toString()}>\n          <ToggleLeft onClick={() => setMode(false)}>View</ToggleLeft>\n          <ToggleRight onClick={() => setMode(true)}>Edit</ToggleRight>\n        </EditToggle>\n        {unsavedChanges && <Icon icon={faExclamationTriangle} title={\"Unsaved changes!\"} />}\n        {editMode && (\n          <>\n            <IconButton onClick={() => updateSelection(\"selections\", selectionObj)} icon={faSave} />\n            <IconButton onClick={() => deleteSelection()} icon={faTrash} />\n            {message && showAlert && <Message>{message}</Message>}\n          </>\n        )}\n      </TopBar>\n      {editMode ? (\n        <SelectionEditView selection={selectionObj} onEdit={(value) => editSelection(value)} />\n      ) : (\n        <SelectionView selection={selectionObj} />\n      )}\n    </>\n  );\n};\n\nexport default SelectionDetail;\n\nconst TopBar = styled.div`\n  color: ${({ theme }) => theme.tile.color};\n  font-size: 16px;\n  overflow: hidden;\n  flex: 1 1;\n  min-width: calc(100% - 20px);\n  height: 45px;\n  padding: 10px;\n`;\n\nconst Message = styled.div`\n  padding: 5px;\n  width: 150px;\n  height: 30px;\n  line-height: 30px;\n  border-radius: 5px;\n  float: right;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n  float: right;\n  line-height: 30px;\n  display: block;\n  height: 30px;\n  padding: 10px;\n  color: ${({ theme }) => theme.main.highlight};\n`;\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from \"react\";\nimport { RouteComponentProps, useHistory } from \"react-router\";\nimport Selection from \"../../../../../data/Selection\";\nimport { MyAppDatabase } from \"../../../../../database/MyDatabase\";\nimport { useItemByAttr } from \"../../../../../hooks/DexieHooks\";\nimport { LoadingSpinner } from \"../../../../Loading\";\nimport SelectionDetail from \"../SelectionDetail\";\nimport { createNewWithId } from \"../../../../../services/DatabaseService\";\nimport ErrorTile from \"../../../../general_elements/ErrorTile\";\n\ntype TParams = { name: string };\n\nconst NameToSelection = ({ match }: RouteComponentProps<TParams>) => {\n  let history = useHistory();\n  const db = new MyAppDatabase();\n  const [selection, loading, error] = useItemByAttr(db.selections, \"name\", match.params.name);\n\n  const createNewSelection = () => {\n    let newSelection = new Selection(0, match.params.name);\n    delete newSelection.id;\n    createNewWithId(\"selections\", newSelection, (id) => {\n      history.push(`/selection-detail/id/${id}`);\n    });\n  };\n\n  return (\n    <>\n      {!error && loading && <LoadingSpinner />}\n      {error && !loading && <>Error occured</>}\n      {!error && !loading && selection === undefined && (\n        <ErrorTile\n          text={\"No such selection exists. Want to creat such selection?\"}\n          buttonText={\"Add\"}\n          onButton={() => createNewSelection()}\n        />\n      )}\n      {!error && !loading && selection !== undefined && (\n        <SelectionDetail selection={selection} isNew={selection.name === \"\" ? true : false} />\n      )}\n    </>\n  );\n};\n\nexport default NameToSelection;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport TextButton from \"../form_elements/TextButton\";\n\ninterface $Props {\n  text: string;\n  buttonText: string;\n  onButton: () => void;\n}\n\nconst ErrorTile = ({ text, buttonText, onButton }: $Props) => {\n  return (\n    <Tile>\n      <PropWrapper>\n        <Name>\n          <b>A problem occured!</b>\n        </Name>\n        <Text>\n          <PropTitle>Text: </PropTitle>\n          {text}\n        </Text>\n        <TextButton text={buttonText} onClick={() => onButton()} icon={faPlusCircle} />\n      </PropWrapper>\n    </Tile>\n  );\n};\n\nexport default ErrorTile;\n\nconst Tile = styled.div`\n  flex: 1 1 15em;\n  color: ${({ theme }) => theme.tile.color};\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n  margin: 0.5em;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.tile.boxShadow};\n  overflow: hidden;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n`;\n\nconst Name = styled.div`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 0 5px 5px 5px;\n  font-size: 14px;\n  width: calc(100% - 30px);\n  color: ${({ theme }) => theme.tile.headerColor};\n  text-align: center;\n  border-radius: 5px;\n`;\n\nconst PropWrapper = styled.div`\n  height: auto;\n  width: calc(100% - 10px);\n  float: left;\n  padding: 5px 5px 0 5px;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.tile.backgroundColorLink};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Text = styled.div`\n  height: auto;\n  width: calc(100% - 30px);\n  margin: 10px 5px 5px 5px;\n  float: left;\n  line-height: 18px;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.tile.backgroundColor};\n`;\n"],"sourceRoot":""}